<?xml version="1.0" encoding="US-ASCII" ?>
<!--
 -*- mode: Fundamental; tab-width: 4; -*-
 ex:ts=4

 $Id$
-->

<project name="xins" default="all" basedir=".">

	<target name="-checkstyle-avail">
		<available classname="com.puppycrawl.tools.checkstyle.CheckStyleTask" property="checkstyle.available" />
		<fail unless="checkstyle.available" message="Checkstyle not available" />
	</target>

	<target name="-junit-avail">
		<available classname="junit.framework.Test" property="junit.available" />
		<fail unless="junit.available" message="JUnit not available" />
	</target>

	<target name="-checkstyle-task" depends="-checkstyle-avail">
		<taskdef name="checkstyle" classname="com.puppycrawl.tools.checkstyle.CheckStyleTask"/>
	</target>

	<target name="-j2h-avail">
		<available classname="j2h" property="j2h.available" />
		<fail unless="j2h.available" message="Java2HTML not available" />
	</target>

	<target name="-init-release">
		<property name="javac.debug"         value="false" />
		<property name="javac.deprecation"   value="false" />
	</target>

	<target name="-init">
		<property name="title"               value="XINS" />
		<property name="name"                value="${ant.project.name}" />
		<property name="version.major"       value="0" />
		<property name="version.minor"       value="73" />
		<property name="version.suffix"      value="" />
		<property name="version"             value="${version.major}.${version.minor}${version.suffix}" />
		<property name="src-package-tarfile" value="${name}-${version}.tar" />
		<property name="bin-package-tarfile" value="${name}-${version}-bin.tar" />
		<property name="www.user"            value="znerd" />
		<property name="cvs.module"          value="${name}" />
		<property name="www.host"            value="${name}.sourceforge.net" />
		<property name="www.dir"             value="/home/groups/x/xi/xins/htdocs" />
		<property name="www.target"          value="${www.user}@${www.host}:${www.dir}" />
		<property name="url"                 value="http://${www.host}/" />
		<property name="vendor"              value="Wanadoo Nederland B.V." />

		<property name="javac.debug"         value="true"  />
		<property name="javac.deprecation"   value="true"  />
		<property name="javac.optimize"      value="true" />

		<property name="javadoc.srcdir.j2se" value="${java.home}/src" />
		<property name="javadoc.srcdir.xins" value="build/src/java-common:build/src/java-server-framework:build/src/java-client-framework" />
	</target>

	<target name="version" depends="-init">
		<echo message="${title} ${version}" />
	</target>

	<target name="-prepare" depends="-init">
		<mkdir dir="build" />
	</target>

	<target name="-prepare-classes" depends="-prepare">
		<mkdir dir="build/classes" />
	</target>

	<target name="clean" description="Removes all generated files">
		<delete dir="build" />
	</target>

	<target name="-prepare-java-common" depends="-prepare">
		<mkdir dir="build/src/java-common" />
		<copy todir="build/src/java-common">
			<fileset dir="src/java-common" includes="**/*.java,**/package.html" />
		</copy>
		<replace dir="build/src/java-common" token="%%VERSION%%" value="${version}" />
	</target>

	<target name="java-common" depends="-prepare-java-common,-prepare-classes" description="Compiles the XINS/Java common code">
		<mkdir dir="build/classes/java-common" />
		<javac
		srcdir="build/src/java-common"
		destdir="build/classes/java-common"
		debug="${javac.debug}"
		deprecation="${javac.deprecation}"
		optimize="${javac.optimize}"
		target="1.2">
			<classpath>
				<fileset dir="depends/compile"             includes="**/*.jar" />
				<fileset dir="depends/compile_and_runtime" includes="**/*.jar" />
			</classpath>
		</javac>
		<manifest file="build/MANIFEST.MF">
			<section name="xins-common">
				<attribute name="Specification-Title"    value="XINS/Java Common Library" />
				<attribute name="Specification-Version"  value="${version}" />
				<attribute name="Specification-Vendor"   value="${vendor}"  />
				<attribute name="Implementation-Title"   value="XINS/Java Common Library" />
				<attribute name="Implementation-Version" value="${version}" />
				<attribute name="Implementation-Vendor"  value="${vendor}"  />
			</section>
		</manifest>
		<jar
		jarfile="build/xins-common.jar"
		basedir="build/classes/java-common"
		manifest="build/MANIFEST.MF" />
	</target>

	<target name="-prepare-java-server-framework" depends="-prepare">
		<mkdir dir="build/src/java-server-framework" />
		<style
		in="src/xml/default_resultcodes.xml"
		out="build/src/java-server-framework/org/xins/server/DefaultResultCodes.java"
		style="src/xslt/java-server-framework/default_resultcodes_to_java.xslt" />
		<copy todir="build/src/java-server-framework">
			<fileset dir="src/java-server-framework" includes="**/*.java,**/package.html" />
		</copy>
		<replace dir="build/src/java-server-framework" token="%%VERSION%%" value="${version}" />
	</target>

	<target name="java-server-framework" depends="java-common,-prepare-java-server-framework" description="Compiles the XINS/Java server framework">
		<mkdir dir="build/classes/java-server-framework" />
		<javac
		srcdir="build/src/java-server-framework"
		destdir="build/classes/java-server-framework"
		debug="${javac.debug}"
		deprecation="${javac.deprecation}"
		optimize="${javac.optimize}"
		target="1.2">
			<classpath>
				<pathelement path="build/classes/java-common" />
				<fileset dir="depends/compile"             includes="**/*.jar" />
				<fileset dir="depends/compile_and_runtime" includes="**/*.jar" />
			</classpath>
		</javac>
		<manifest file="build/MANIFEST.MF">
			<attribute name="Class-Path" value="xins-common.jar" />
			<section name="xins-server">
				<attribute name="Specification-Title"    value="XINS/Java Server Framework" />
				<attribute name="Specification-Version"  value="${version}" />
				<attribute name="Specification-Vendor"   value="${vendor}"  />
				<attribute name="Implementation-Title"   value="XINS/Java Server Framework" />
				<attribute name="Implementation-Version" value="${version}" />
				<attribute name="Implementation-Vendor"  value="${vendor}"  />
			</section>
		</manifest>
		<jar
		jarfile="build/xins-server.jar"
		basedir="build/classes/java-server-framework"
		manifest="build/MANIFEST.MF" />
	</target>

	<target name="-prepare-java-client-framework" depends="-prepare">
		<mkdir dir="build/src/java-client-framework" />
		<copy todir="build/src/java-client-framework">
			<fileset dir="src/java-client-framework" includes="**/*.java,**/package.html" />
		</copy>
		<replace dir="build/src/java-client-framework" token="%%VERSION%%" value="${version}" />
	</target>

	<target name="java-client-framework" depends="java-common,-prepare-java-client-framework" description="Compiles the XINS/Java client framework">
		<mkdir dir="build/classes/java-client-framework" />
		<javac
		srcdir="build/src/java-client-framework"
		destdir="build/classes/java-client-framework"
		debug="${javac.debug}"
		deprecation="${javac.deprecation}"
		optimize="${javac.optimize}"
		target="1.2">
			<classpath>
				<pathelement path="build/classes/java-common" />
				<fileset dir="depends/compile"             includes="**/*.jar" />
				<fileset dir="depends/compile_and_runtime" includes="**/*.jar" />
			</classpath>
		</javac>
		<manifest file="build/MANIFEST.MF">
			<attribute name="Class-Path" value="xins-common.jar" />
			<section name="xins-client">
				<attribute name="Specification-Title"    value="XINS/Java Client Framework" />
				<attribute name="Specification-Version"  value="${version}" />
				<attribute name="Specification-Vendor"   value="${vendor}"  />
				<attribute name="Implementation-Title"   value="XINS/Java Client Framework" />
				<attribute name="Implementation-Version" value="${version}" />
				<attribute name="Implementation-Vendor"  value="${vendor}"  />
			</section>
		</manifest>
		<jar
		jarfile="build/xins-client.jar"
		basedir="build/classes/java-client-framework"
		manifest="build/MANIFEST.MF" />
	</target>

	<target name="java" depends="java-server-framework,java-client-framework" />

	<target name="upload-jars" depends="java" description="Uploads the JAR files to the web server">
		<echo message="Uploading JAR files to ${www.host}" />
		<exec dir="build/" executable="scp" failonerror="true">
			<arg value="xins-common.jar" />
			<arg value="${www.target}/xins-common-${version}.jar" />
		</exec>
		<exec dir="build/" executable="scp" failonerror="true">
			<arg value="xins-server.jar" />
			<arg value="${www.target}/xins-server-${version}.jar" />
		</exec>
		<exec dir="build/" executable="scp" failonerror="true">
			<arg value="xins-client.jar" />
			<arg value="${www.target}/xins-client-${version}.jar" />
		</exec>
	</target>

	<target name="classes-tests" depends="-junit-avail,java" description="Compiles the test cases">
		<mkdir dir="build/classes/tests" />
		<javac destdir="build/classes/tests" includes="**/*.java" debug="true" deprecation="true">
			<src path="src/tests" />
			<classpath>
				<pathelement location="build/xins-common.jar" />
				<pathelement location="build/xins-server.jar" />
				<pathelement location="build/xins-client.jar" />
				<fileset dir="depends/compile"             includes="**/*.jar" />
				<fileset dir="depends/compile_and_runtime" includes="**/*.jar" />
			</classpath>
		</javac>
	</target>

	<target name="do-tests" depends="classes-tests" description="Runs the unit tests">
		<mkdir dir="build/testresults" />
		<mkdir dir="build/testresults/xml" />
		<junit printsummary="true" failureproperty="tests.failed">
			<formatter type="xml" />
			<test name="org.xins.tests.AllTests" todir="build/testresults/xml" outfile="testresults"/>
			<classpath>
				<pathelement location="build/classes/tests" />
				<pathelement location="build/xins-common.jar" />
				<pathelement location="build/xins-server.jar" />
				<pathelement location="build/xins-client.jar" />
				<fileset dir="depends/compile_and_runtime" includes="**/*.jar" />
				<fileset dir="depends/runtime"             includes="**/*.jar" />
			</classpath>
		</junit>
	</target>

	<target name="testreports" description="Generates the unit test reports">
		<mkdir dir="build/testresults/html" />
		<style
		in="build/testresults/xml/testresults.xml"
		out="build/testresults/html/index.html"
		style="src/xslt/tests/index.xslt" />
		<copy
		file="src/css/tests/stylesheet.css"
		todir="build/testresults/html" />
	</target>

	<target name="tests" depends="do-tests,testreports" description="Runs the unit tests and generates reports" />

	<target name="-jdksrc-avail">
		<available file="${javadoc.srcdir.j2se}" type="dir" property="jdksrc.available" />
	</target>

	<target name="-javadoc-sourcepath-nojdksrc" depends="-prepare,-jdksrc-avail" unless="jdksrc.available">
		<property name="javadoc.sourcepath" value="${javadoc.srcdir.xins}" />
		<echo level="verbose" message="JDK source code not available." />
	</target>

	<target name="-javadoc-sourcepath-jdksrc" depends="-jdksrc-avail" if="jdksrc.available">
		<property name="javadoc.sourcepath" value="${javadoc.srcdir.xins}:${javadoc.srcdir.j2se}" />
		<echo level="verbose" message="JDK source code available." />
	</target>

	<target name="-javadoc-sourcepath" depends="-javadoc-sourcepath-nojdksrc,-javadoc-sourcepath-jdksrc" />

	<target name="-do-javadoc" depends="-prepare-java-server-framework,-prepare-java-client-framework,-javadoc-sourcepath">
		<mkdir dir="${javadoc.destdir}" />
		<javadoc
		sourcepath="${javadoc.sourcepath}"
		destdir="${javadoc.destdir}"
		version="yes"
		use="yes"
		author="yes"
		private="${javadoc.private}"
		windowtitle="${javadoc.title}"
		doctitle="${javadoc.title}"
		bottom="${javadoc.footer}">
			<packageset dir="build/src/java-common" />
			<packageset dir="build/src/java-server-framework" />
			<packageset dir="build/src/java-client-framework" />
			<group title="XINS/Java Common"           packages="org.xins.util*,org.xins.types*" />
			<group title="XINS/Java Server Framework" packages="org.xins.server*" />
			<group title="XINS/Java Client Framework" packages="org.xins.client*" />
			<classpath>
				<fileset dir="depends/compile"             includes="**/*.jar" />
				<fileset dir="depends/compile_and_runtime" includes="**/*.jar" />
				<fileset dir="depends/runtime"             includes="**/*.jar" />
			</classpath>
			<link
			href="http://java.sun.com/products/servlet/2.3/javadoc/"
			offline="true"
			packagelistloc="src/package-lists/servlet/" />
			<link
			href="http://java.sun.com/j2se/1.3/docs/api"
			offline="true"
			packagelistloc="src/package-lists/j2se/" />
			<link
			href="http://jakarta.apache.org/log4j/docs/api/"
			offline="true"
			packagelistloc="src/package-lists/log4j/" />
			<link
			href="http://jakarta.apache.org/commons/logging/api/"
			offline="true"
			packagelistloc="src/package-lists/commons-logging/" />
			<link
			href="http://www.jdom.org/docs/apidocs/"
			offline="true"
			packagelistloc="src/package-lists/jdom/" />
		</javadoc>
		<copy
		file="src/css/javadoc/style.css"
		tofile="${javadoc.destdir}/stylesheet.css"
		overwrite="true" />
	</target>

	<target name="javadoc" depends="javadoc-public,javadoc-private" description="Generates all Javadoc API documentation" />

	<target name="javadoc-public" depends="-init" description="Generates public Javadoc API documentation">
		<antcall target="-do-javadoc">
			<param name="javadoc.private" value="no" />
			<param name="javadoc.destdir" value="build/javadoc" />
			<param name="javadoc.title"   value="${title} ${version}" />
			<param name="javadoc.footer"  value="See &lt;a target=&quot;_top&quot; href='${url}'&gt;${url}&lt;/a&gt;." />
		</antcall>
	</target>

	<target name="javadoc-private" depends="-init" description="Generates private Javadoc API documentation">
		<antcall target="-do-javadoc">
			<param name="javadoc.private" value="yes" />
			<param name="javadoc.destdir" value="build/javadoc-private" />
			<param name="javadoc.title"   value="${title} ${version}" />
			<param name="javadoc.footer"  value="See &lt;a target=&quot;_top&quot; href='${url}'&gt;${url}&lt;/a&gt;.&lt;br /&gt;This Javadoc API documentation set contains private and package private members as well." />
		</antcall>
	</target>

	<target name="upload-javadoc" depends="-init,javadoc,javadoc-private" description="Uploads the Javadoc documentation to the webserver">
		<echo message="Uploading ${title} ${version} API docs to ${www.host}" />

		<echo level="verbose" message="Creating directory ${www.dir}/javadoc/${version} on ${www.host}" />
		<exec executable="ssh" failonerror="true">
			<arg value="${www.user}@${www.host}" />
			<arg value="mkdir -p ${www.dir}/javadoc/${version}" />
		</exec>
		<echo level="verbose" message="Copying files to ${www.dir}/javadoc/${version} on ${www.host}" />
		<exec dir="build/javadoc" executable="scp" failonerror="true">
			<arg value="-r" />
			<arg value="." />
			<arg value="${www.target}/javadoc/${version}/" />
		</exec>

		<echo level="verbose" message="Creating directory ${www.dir}/javadoc-private/${version} on ${www.host}" />
		<exec executable="ssh" failonerror="true">
			<arg value="${www.user}@${www.host}" />
			<arg value="mkdir -p ${www.dir}/javadoc-private/${version}" />
		</exec>
		<echo level="verbose" message="Copying files to ${www.dir}/javadoc-private/${version} on ${www.host}" />
		<exec dir="build/javadoc-private" executable="scp" failonerror="true">
			<arg value="-r" />
			<arg value="." />
			<arg value="${www.target}/javadoc-private/${version}/" />
		</exec>
	</target>

	<target name="-prepare-checkstyle" depends="-checkstyle-task" />

	<target name="checkstyle-text" depends="-prepare-checkstyle" description="Prints checkstyle errors">
		<checkstyle config="src/config/checkstyle/config.xml" failOnViolation="false">
			<fileset dir="src/java-common"           includes="**/*.java" />
			<fileset dir="src/java-server-framework" includes="**/*.java" />
			<fileset dir="src/java-client-framework" includes="**/*.java" />
			<formatter type="plain" />
		</checkstyle>
	</target>

	<target name="checkstyle-xml" depends="-prepare-checkstyle" description="Checks the style of the source code">
		<mkdir dir="build/checkstyle" />
		<mkdir dir="build/checkstyle/xml" />
		<checkstyle config="src/config/checkstyle/config.xml" failOnViolation="false">
			<fileset dir="src/java-common"           includes="**/*.java" />
			<fileset dir="src/java-server-framework" includes="**/*.java" />
			<fileset dir="src/java-client-framework" includes="**/*.java" />
			<formatter type="xml" tofile="build/checkstyle/xml/results.xml"/>
		</checkstyle>
	</target>

	<target name="checkstyle-report" description="Generates the checkstyle report">
		<mkdir dir="build/checkstyle/html" />
		<style
		in="build/checkstyle/xml/results.xml"
		out="build/checkstyle/html/index.html"
		style="src/xslt/checkstyle/index.xslt" />
		<copy
		file="src/css/checkstyle/style.css"
		tofile="build/checkstyle/html/stylesheet.css" />
	</target>

	<target name="checkstyle" depends="checkstyle-xml,checkstyle-report" description="Checks the style of the source code" />

	<target name="upload-checkstyle" depends="-init,checkstyle">
		<echo message="Uploading ${title} ${version} Checkstyle report to ${www.host}" />
		<echo level="verbose" message="Creating directory ${www.dir}/checkstyle/${version} on ${www.host}" />
		<exec executable="ssh" failonerror="true">
			<arg value="${www.user}@${www.host}" />
			<arg value="mkdir -p ${www.dir}/checkstyle/${version}" />
		</exec>
		<exec dir="build/checkstyle/html" executable="scp" failonerror="true">
			<arg value="-r" />
			<arg value="." />
			<arg value="${www.target}/checkstyle/${version}" />
		</exec>
	</target>

	<target name="src-package" depends="-prepare" description="Builds an archive with source files and dependencies">
		<tar tarfile="build/${src-package-tarfile}">
			<tarfileset
			dir="${basedir}"
			prefix="${name}-${version}"
			mode="644">
				<include name="build.xml"                      />
				<include name="CHANGES"                        />
				<include name="COPYRIGHT"                      />
				<include name="README"                         />
				<include name="src/ant/**/*"                   />
				<include name="src/bin/xins.bat"               />
				<include name="src/config/**/*"                />
				<include name="src/css/**/*"                   />
				<include name="src/demos/**/*"                 />
				<include name="src/java-client-framework/**/*" />
				<include name="src/java-common/**/*"           />
				<include name="src/java-server-framework/**/*" />
				<include name="src/package-lists/**/*"         />
				<include name="src/xml/**/*"                   />
				<include name="src/xslt/**/*"                  />
				<include name="depends/**/*"                   />
			</tarfileset>
			<tarfileset
			dir="${basedir}"
			prefix="${name}-${version}"
			mode="755">
				<include name="src/bin/xins" />
			</tarfileset>
		</tar>
		<gzip zipfile="build/${src-package-tarfile}.gz" src="build/${src-package-tarfile}" />
		<delete file="build/${src-package-tarfile}" />
	</target>

	<target name="bin-package" depends="javadoc,java-server-framework" description="Builds a complete distribution archive">
		<tar tarfile="build/${bin-package-tarfile}">
			<tarfileset
			dir="${basedir}"
			prefix="${name}-${version}"
			mode="644">
				<include name="build.xml"                      />
				<include name="CHANGES"                        />
				<include name="COPYRIGHT"                      />
				<include name="README"                         />
				<include name="build/javadoc/**/*"             />
				<include name="build/*.jar"                    />
				<include name="src/ant/**/*"                   />
				<include name="src/bin/xins.bat"               />
				<include name="src/config/**/*"                />
				<include name="src/css/**/*"                   />
				<include name="src/demos/**/*"                 />
				<include name="src/java-client-framework/**/*" />
				<include name="src/java-common/**/*"           />
				<include name="src/java-server-framework/**/*" />
				<include name="src/package-lists/**/*"         />
				<include name="src/xml/**/*"                   />
				<include name="src/xslt/**/*"                  />
				<include name="depends/**/*"                   />
			</tarfileset>
			<tarfileset
			dir="${basedir}"
			prefix="${name}-${version}"
			mode="755">
				<include name="src/bin/xins" />
			</tarfileset>
		</tar>
		<gzip zipfile="build/${bin-package-tarfile}.gz" src="build/${bin-package-tarfile}" />
		<delete file="build/${bin-package-tarfile}" />
	</target>

	<target name="packages" depends="src-package,bin-package" description="Build all distribution archives"/>

	<target name="do-upload-packages" depends="-init" description="Uploads the packages to the web server">
		<echo message="Uploading ${title} ${version} packages to ${www.host}" />
		<exec dir="build/" executable="scp" failonerror="true">
			<arg value="${src-package-tarfile}.gz" />
			<arg value="${bin-package-tarfile}.gz" />
			<arg value="${www.target}" />
		</exec>
	</target>

	<target name="upload-packages" depends="packages,do-upload-packages" description="Creates and uploads packages to the web server" />

	<target name="-check-release-version" depends="-init-release,-init">
		<condition property="version.suffix.unset">
			<equals arg1="${version.suffix}" arg2="" />
		</condition>
		<fail unless="version.suffix.unset" message="A version suffix is set." />
	</target>

	<target name="-nodiffs-check" depends="clean">
		<tempfile destdir="${java.io.tmpdir}" prefix="xins-release-diff." property="diff-file" suffix=".diff" />
		<cvs command="diff" output="${diff-file}" quiet="true" />
		<loadfile srcfile="${diff-file}" property="diff-contents" />
		<property name="diff-contents" value="" />
		<echo message="Diff contents: &quot;${diff-contents}&quot;." />
		<condition property="diff-contents-empty">
			<equals arg1="${diff-contents}" arg2="" />
		</condition>
		<fail unless="diff-contents-empty" message="There are differences with the CVS repository (result of 'cvs diff' is non-empty). See: ${diff-file}" />
		<delete file="${diff-file}" />
	</target>

	<target
	name="-pre-release-checks"
	depends="-check-release-version,-nodiffs-check,tests">
		<fail if="tests.failed" message="All tests should run" />
	</target>

	<target
	name="-prepare-release"
	depends="-pre-release-checks">
		<property name="tagname" value="RELEASE_${version.major}_${version.minor}" />
		<echo message="Tagging ${tagname}" />
		<cvs command="tag ${tagname}" quiet="true" />
	</target>

	<target name="upload-changes" depends="-init">
		<echo message="Uploading ${title} ${version} change log to ${www.host}" />
		<exec executable="scp" failonerror="true">
			<arg value="CHANGES" />
			<arg value="${www.target}/changes-${version}.txt" />
		</exec>
	</target>

	<target
	name="release"
	depends="-prepare-release,upload-changes,upload-jars,upload-packages,upload-javadoc,upload-checkstyle"
	description="Performs a release" />

	<target name="all" depends="java-server-framework,javadoc" description="Generates everything" />

	<target name="-demo-caller-pretest">
		<condition property="demo-caller-properties-set">
			<and>
				<isset property="config"  />
				<isset property="request" />
			</and>
		</condition>
	</target>

	<target name="-demo-caller-properties-notset" depends="-demo-caller-pretest" unless="demo-caller-properties-set">
		<echo message="The properties 'config' and 'request' need to be set." />
	</target>

	<target name="demo-caller" depends="java-client-framework,-demo-caller-properties-notset" if="demo-caller-properties-set" description="Executes the 'Caller' demo program">
		<mkdir dir="build/classes/demos/caller" />
		<javac
		srcdir="src/demos/caller/java"
		destdir="build/classes/demos/caller"
		debug="true"
		deprecation="true"
		optimize="false"
		target="1.2">
			<classpath>
				<pathelement path="build/xins-common.jar" />
				<pathelement path="build/xins-client.jar" />
				<fileset dir="depends/compile"             includes="**/*.jar" />
				<fileset dir="depends/compile_and_runtime" includes="**/*.jar" />
			</classpath>
		</javac>
		<java
		classname="org.xins.demos.caller.Main"
		fork="true">
			<classpath>
				<pathelement path="build/classes/demos/caller" />
				<pathelement path="build/xins-common.jar" />
				<pathelement path="build/xins-client.jar" />
				<fileset dir="depends/compile_and_runtime" includes="**/*.jar" />
				<fileset dir="depends/runtime"             includes="**/*.jar" />
			</classpath>
			<arg value="${config}" />
			<arg value="${request}" />
		</java>
	</target>
</project>
