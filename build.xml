<?xml version="1.0" encoding="US-ASCII" ?>
<!--
 -*- mode: Fundamental; tab-width: 4; -*-
 ex:ts=4

 $Id$
-->

<project name="xins" default="all" basedir=".">

	<!--
	Defines the 'junit' task. This target fails if the required class for
	this task is not available.
	-->
	<target name="-junit-task">
		<available classname="junit.framework.TestListener" property="junit.available" />
		<fail unless="junit.available" message="JUnit not available" />
		<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" />
	</target>

	<!--
	Defines the 'checkstyle' task. This target fails if the required class
	for this task is not available.
	-->
	<target name="-checkstyle-task">
		<available classname="com.puppycrawl.tools.checkstyle.CheckStyleTask" property="checkstyle.available">
			<classpath>
				<fileset dir="lib" includes="*.jar" />
			</classpath>
		</available>
		<fail unless="checkstyle.available" message="Checkstyle not available" />
		<taskdef name="checkstyle" classname="com.puppycrawl.tools.checkstyle.CheckStyleTask">
			<classpath>
				<fileset dir="lib" includes="*.jar" />
			</classpath>
		</taskdef>
	</target>

	<!--
	Defines the 'j2h' (Java2HTML) task. This target fails if the required
	class for this task is not available.
	-->
	<target name="-j2h-task">
		<available classname="j2h" property="j2h.available" />
		<fail unless="j2h.available" message="Java2HTML not available" />
		<taskdef name="java2html" classname="com.java2html.Java2HTMLTask"/>
	</target>

	<!--
	Determines the current XINS version by reading this information from
	the version file.

	By default the version file is '.version.properties'. This can be
	overridden by setting the property 'version.file' to the file to read
	from instead.

	This target fails if the required properties are not set in the file.
	-->
	<target name="-load-version">
		<property name="version.file" value=".version.properties" />
		<property file="${version.file}" />
		<condition property="version.isset">
			<and>
				<isset property="version.major" />
				<isset property="version.middle" />
				<isset property="version.minor" />
				<isset property="version.build" />
			</and>
		</condition>
		<fail unless="version.isset">
Properties 'version.major', 'version.middle', 'version.minor' and
'version.build' must be set. These are normally read from the version
properties file.

Please do either of the following:
1) add the missing properties to the file;
2) specify what file to read from instead by setting the 'version.file'
   property on the command line;
3) specify the missing properties manually, on the command line.

The current version properties file used is:
${version.file}</fail>
	</target>

	<!--
	Determines the SourceForge account with the corresponding password by
	reading the properties 'sf.user' and 'sf.password' from a file.
	-->
	<target name="-load-sfproperties">
		<property name="sf.file" value="${user.home}/.sourceforge.properties" />
		<available property="sf.file.exists" file="${sf.file}" />
		<fail message="The file ${sf.file} does not exists" unless="sf.file.exists" />
		<property file="${sf.file}" />
		<condition property="sf.isset">
			<and>
				<isset property="sf.user" />
				<isset property="sf.password" />
			</and>
		</condition>
		<fail unless="sf.isset">
Properties 'sf.user' and 'sf.password' must be set. These are normally read
from the SourceForge properties file.

Please do either of the following:
1) add the missing properties to the file;
2) specify what file to read from instead by setting the 'sf.file'
   property on the command line;
3) specify the missing properties manually, on the command line.

The current SourceForge properties file used is:
${sf.file}</fail>
	</target>

	<target name="-init-release-properties" depends="-load-version">
		<property name="version"           value="${version.major}.${version.middle}.${version.minor}${version.build}" />
		<property name="tests.deprecation" value="false"  />
	</target>

	<target name="-init-release" depends="-init-release-properties,-load-sfproperties,-init" />

	<target name="-init" depends="-load-version">

		<!-- General project properties -->
		<property name="title"               value="XINS" />
		<property name="name"                value="${ant.project.name}" />
		<property name="version"             value="${version.major}.${version.middle}.${version.minor}${version.build}${version.suffix}" />
		<property name="package-basename"    value="${name}-${version}" />
		<property name="vendor"              value="Wanadoo Nederland B.V." />
		<property name="cvs.module"          value="${name}" />

		<!-- SourceForge-related properties -->
		<property name="sf.group"            value="71598" />
		<property name="sf.package"          value="71219" />

		<!-- Website-related properties -->
		<property name="www.user"            value="${sf.user}" />
		<property name="www.host"            value="${name}.sourceforge.net" />
		<property name="www.dir"             value="/home/groups/x/xi/xins/htdocs" />
		<property name="www.target"          value="${www.user}@${www.host}:${www.dir}" />
		<property name="www.url"             value="http://www.xins.org/" />

		<!-- Java compiler-related properties -->
		<property name="javac.targetvm"      value="1.3"   />
		<property name="javac.debug"         value="true"  />
		<property name="javac.deprecation"   value="true"  />
		<property name="javac.optimize"      value="false" />
		<property name="tests.deprecation"   value="true"  />

		<!-- Javadoc-related properties -->
		<property name="javadoc.srcdir.j2se" value="${java.home}/src" />
		<property name="javadoc.srcdir.xins" value="src/java-common:build/src/java-common:src/java-server-framework:build/src/java-server-framework:src/java-client-framework:build/src/java-client-framework" />
	</target>

	<target name="version" depends="-init">
		<echo message="Java ${java.version}" />
		<echo message="${ant.version}" />
		<echo message="${title} ${version}" />
	</target>

	<target name="clean" description="Removes all generated files">
		<delete dir="build" />
		<delete dir="docs/javadoc" />
		<delete dir="docs/javadoc-private" />
		<delete dir="docs/logdoc" />
		<delete dir="src/tests/build" />
	</target>

	<target name="java-logdoc" depends="-init" description="Compiles the XINS/Java logdoc code">
		<mkdir dir="build/classes/logdoc" />
		<javac
		srcdir="src/java-common"
		includes="org/xins/logdoc/*.java"
		destdir="build/classes/logdoc"
		debug="${javac.debug}"
		deprecation="${javac.deprecation}"
		optimize="${javac.optimize}"
		source="${javac.targetvm}"
		target="${javac.targetvm}">
			<classpath>
				<fileset dir="lib" includes="*.jar" />
			</classpath>
		</javac>
		<manifest file="build/MANIFEST.MF">
			<section name="logdoc">
				<attribute name="Specification-Title"    value="Logdoc" />
				<attribute name="Specification-Version"  value="${version}" />
				<attribute name="Specification-Vendor"   value="${vendor}"  />
				<attribute name="Implementation-Title"   value="Logdoc" />
				<attribute name="Implementation-Version" value="${version}" />
				<attribute name="Implementation-Vendor"  value="${vendor}"  />
			</section>
		</manifest>
		<jar
		jarfile="build/logdoc.jar"
		basedir="build/classes/logdoc"
		manifest="build/MANIFEST.MF" />
	</target>

	<target name="java-common" depends="java-logdoc, logdoc-java-common" description="Compiles the XINS/Java common code">
		<antcall target="-build-framework">
			<param name="src.side" value="common" />
			<param name="side"     value="common" />
			<param name="type"     value="Common" />
		</antcall>
	</target>

	<target name="java-client" depends="java-common, logdoc-java-client" description="Compiles the XINS/Java client framework">
		<path id="path.common">
			<pathelement path="build/classes/java-common" />
		</path>
		<antcall target="-build-framework" inheritRefs="true">
			<param name="src.side" value="client-framework" />
			<param name="side"     value="client"           />
			<param name="type"     value="Client Framework" />
		</antcall>
	</target>

	<target name="java-server" depends="java-common, logdoc-java-server" description="Compiles the XINS/Java server framework">
		<mkdir dir="build/src/java-server-framework" />
		<style
		in="src/xml/default_resultcodes.xml"
		out="build/src/java-server-framework/org/xins/server/DefaultResultCodes.java"
		style="src/xslt/java-server-framework/default_resultcodes_to_java.xslt" />
		<path id="path.common">
			<pathelement path="build/classes/java-common" />
		</path>
		<antcall target="-build-framework" inheritRefs="true">
			<param name="src.side" value="server-framework" />
			<param name="side"     value="server"           />
			<param name="type"     value="Server Framework" />
		</antcall>
	</target>

	<target name="-build-framework">
		<mkdir dir="build/src/java-${src.side}" />
		<copy file="src/java-${src.side}/org/xins/${side}/Library.java" todir="build/src/java-${src.side}/org/xins/${side}/" />
		<replace dir="build/src/java-${src.side}" token="%%VERSION%%" value="${version}" />
		<mkdir dir="build/classes/java-${side}" />
		<javac
		sourcepath=""
		destdir="build/classes/java-${side}"
		debug="${javac.debug}"
		deprecation="${javac.deprecation}"
		optimize="${javac.optimize}"
		source="${javac.targetvm}"
		target="${javac.targetvm}">
			<src path="build/src/java-${src.side}" />
			<include name="org/xins/${side}/Library.java" />
			<classpath>
				<path refid="path.common" />
				<pathelement location="build/logdoc.jar" />
				<fileset dir="lib" includes="*.jar" />
			</classpath>
		</javac>
		<javac
		destdir="build/classes/java-${side}"
		debug="${javac.debug}"
		deprecation="${javac.deprecation}"
		optimize="${javac.optimize}"
		source="${javac.targetvm}"
		target="${javac.targetvm}">
			<src path="src/java-${src.side}" />
			<src path="build/src/java-${src.side}" />
			<exclude name="org/xins/${side}/Library.java" />
			<exclude name="org/xins/logdoc/**" />
			<classpath>
				<path refid="path.common" />
				<pathelement location="build/logdoc.jar" />
				<fileset dir="lib" includes="*.jar" />
			</classpath>
		</javac>
		<manifest file="build/MANIFEST.MF">
			<section name="xins-${side}">
				<attribute name="Specification-Title"    value="XINS/Java ${type}" />
				<attribute name="Specification-Version"  value="${version}"        />
				<attribute name="Specification-Vendor"   value="${vendor}"         />
				<attribute name="Implementation-Title"   value="XINS/Java ${type}" />
				<attribute name="Implementation-Version" value="${version}"        />
				<attribute name="Implementation-Vendor"  value="${vendor}"         />
			</section>
		</manifest>
		<jar
		jarfile="build/xins-${side}.jar"
		basedir="build/classes/java-${side}"
		manifest="build/MANIFEST.MF" />
	</target>

	<target name="java" depends="java-logdoc,java-common,java-client,java-server" description="Compiles the XINS/Java java code (common, server and client)"/>

	<target name="-prepare-logdoc-server">
		<antcall target="-prepare-logdoc">
			<param name="src.side" value="server-framework" />
			<param name="side" value="server"/>
		</antcall>
	</target>

	<target name="-prepare-logdoc-client">
		<antcall target="-prepare-logdoc">
			<param name="src.side" value="client-framework" />
			<param name="side" value="client"/>
		</antcall>
	</target>

	<target name="-prepare-logdoc-common">
		<antcall target="-prepare-logdoc">
			<param name="src.side" value="common" />
			<param name="side" value="common"/>
		</antcall>
	</target>

	<target name="-prepare-logdoc" depends="-init">
		<!-- If not defined in the antcall, the default is the side -->
		<property name="package" value="${side}" />
		<style
		in="src/logdoc/${side}/log.xml"
		out="build/logdoc/${side}/build.xml"
		style="src/xslt/logdoc/log_to_build.xslt">
			<xmlcatalog id="log-dtds">
				<dtd
				location="src/dtd/log_1_0.dtd"
				publicId="-//XINS//DTD XINS Logdoc 1.0//EN" />
				<dtd
				location="src/dtd/translation-bundle_1_0.dtd"
				publicId="-//XINS//DTD XINS Translation Bundle 1.0//EN" />
			</xmlcatalog>
			<param name="xins_home"       expression="${basedir}"                    />
			<param name="logdoc_xslt_dir" expression="${basedir}/src/xslt/logdoc"    />
			<param name="logdoc_dtd_dir"  expression="${basedir}/src/dtd"            />
			<param name="sourcedir"       expression="${basedir}/src/logdoc/${side}" />
			<param name="html_destdir"    expression="html"                          />
			<param name="java_destdir"    expression="${basedir}/build/src/java-${src.side}/org/xins/${side}" />
			<param name="package_name"    expression="org.xins.${package}"           />
		</style>
	</target>

	<target name="logdoc-html-server" depends="-prepare-logdoc-server">
		<antcall target="-logdoc-html">
			<param name="side" value="server"/>
		</antcall>
	</target>

	<target name="logdoc-html-client" depends="-prepare-logdoc-client">
		<antcall target="-logdoc-html">
			<param name="side" value="client"/>
		</antcall>
	</target>

	<target name="logdoc-html-common" depends="-prepare-logdoc-common">
		<antcall target="-logdoc-html">
			<param name="side" value="common"/>
		</antcall>
	</target>

	<target name="logdoc-html" depends="-init, logdoc-html-server, logdoc-html-client, logdoc-html-common">
		<copy todir="docs/logdoc/server">
			<fileset dir="build/logdoc/server/html" />
		</copy>
		<copy todir="docs/logdoc/client">
			<fileset dir="build/logdoc/client/html" />
		</copy>
		<copy todir="docs/logdoc/common">
			<fileset dir="build/logdoc/common/html" />
		</copy>
	</target>

	<target name="-logdoc-html">
		<copy file="src/css/logdoc/style.css" todir="build/logdoc/${side}/html" />
		<ant dir="build/logdoc/${side}" target="html" inheritall="false" />
	</target>

	<target name="do-upload-logdoc"
	depends="-load-sfproperties,-init"
	unless="no-upload">
		<echo message="Uploading ${title} ${version} Logdoc HTML to ${www.host}" />

		<!-- Create TAR GZ file for Logdoc HTML -->
		<echo level="verbose" message="Creating TAR GZ file for Logdoc HTML" />
		<tar tarfile="build/logdoc.tar" longfile="gnu">
			<tarfileset dir="build/logdoc/common/html" mode="664" prefix="${version}/common" />
			<tarfileset dir="build/logdoc/client/html" mode="664" prefix="${version}/client" />
			<tarfileset dir="build/logdoc/server/html" mode="664" prefix="${version}/server" />
		</tar>
		<gzip src="build/logdoc.tar" zipfile="build/logdoc.tgz" />
		<delete file="build/logdoc.tar" />

		<!-- Copy to remote host -->
		<echo level="verbose" message="Copying TAR GZ file for Logdoc HTML" />
		<scp
		todir="${www.target}/logdoc"
		password="${sf.password}"
		trust="true"
		file="build/logdoc.tgz" />

		<!-- Remotely: Unpack and create symbolic link -->
		<echo level="verbose" message="Unpacking TAR GZ file for Logdoc HTML remotely" />
		<sshexec
		host="${www.host}"
		username="${sf.user}"
		password="${sf.password}" trust="true"
		command="cd ${www.dir}/logdoc &amp;&amp; tar zxf logdoc.tgz &amp;&amp; rm logdoc.tgz &amp;&amp; rm -f latest &amp;&amp; ln -s ${version} latest" />
	</target>

	<target
	name="upload-logdoc"
	depends="logdoc-html,do-upload-logdoc"
	description="Generates Logdoc HTML and then uploads it for the web site"
	unless="no-upload" />

	<target name="logdoc-java-server" depends="-prepare-logdoc-server">
		<antcall target="-logdoc-java">
			<param name="side" value="server"/>
		</antcall>
	</target>

	<target name="logdoc-java-client" depends="-prepare-logdoc-client">
		<antcall target="-logdoc-java">
			<param name="side" value="client"/>
		</antcall>
	</target>

	<target name="logdoc-java-common" depends="-prepare-logdoc-common">
		<ant dir="build/logdoc/common" target="java" inheritall="false">
			<property name="accesslevel" value="public" />
		</ant>
	</target>

	<target name="-logdoc-java">
		<ant dir="build/logdoc/${side}" target="java" inheritall="false">
			<property name="accesslevel" value="package" />
		</ant>
	</target>

	<target name="classes-tests" depends="-junit-task,java" description="Compiles the test cases">
		<!-- Compiles the example used for the tests -->
		<!--delete dir="src/tests/build" /-->
		<ant antfile="${basedir}/src/ant/make-build.xml" dir="src/tests">
			<property name="xins_home" value="${basedir}"           />
			<property name="user.dir"  value="${basedir}/src/tests" />
		</ant>

		<!-- TODO: Can these be combined? -->
		<ant antfile="build/build.xml" dir="src/tests" target="specdocs-allinone" />
		<ant antfile="build/build.xml" dir="src/tests" target="jar-allinone"      />
		<ant antfile="build/build.xml" dir="src/tests" target="war-allinone"      />
		
		<!-- Compiles the tests -->
		<mkdir dir="build/classes/tests" />
		<javac
		destdir="build/classes/tests"
		includes="org/xins/**/*.java"
		debug="true"
		deprecation="${tests.deprecation}"
		source="${javac.targetvm}"
		target="${javac.targetvm}">
			<src path="src/tests" />
			<classpath>
				<pathelement location="build/xins-common.jar" />
				<pathelement location="build/xins-server.jar" />
				<pathelement location="build/xins-client.jar" />
				<pathelement location="build/logdoc.jar" />
				<pathelement location="src/tests/build/classes-capi/allinone" />
				<fileset dir="lib" includes="*.jar" />
			</classpath>
		</javac>
	</target>

	<target name="do-tests" depends="classes-tests" description="Runs the unit tests">
		<mkdir dir="build/testresults" />
		<mkdir dir="build/testresults/xml" />
		
		<junit fork="true" printsummary="true" failureproperty="tests.failed">
			<sysproperty key="user.dir" value="${basedir}"/>
			<formatter type="xml" />
			<test name="org.xins.tests.AllTests" todir="build/testresults/xml" outfile="testresults"/>
			<classpath>
				<pathelement location="build/classes/tests" />
				<pathelement location="build/xins-common.jar" />
				<pathelement location="build/xins-server.jar" />
				<pathelement location="build/xins-client.jar" />
				<pathelement location="build/logdoc.jar" />
				<pathelement location="src/tests/build/classes-capi/allinone" />
				<pathelement location="src/tests/build/classes-api/allinone" />
				<pathelement location="src/tests/build/classes-types/allinone" />
				<fileset dir="lib" includes="*.jar" />
			</classpath>
		</junit>
	</target>

	<target name="testreports" description="Generates the unit test reports">
		<mkdir dir="build/testresults/html" />
		<style
		in="build/testresults/xml/testresults.xml"
		out="build/testresults/html/index.html"
		style="src/xslt/tests/index.xslt" />
		<copy
		file="src/css/tests/stylesheet.css"
		todir="build/testresults/html" />
	</target>

	<target name="tests" depends="do-tests,testreports" description="Runs the unit tests and generates reports">
		<fail if="tests.failed" message="All tests should run" />
	</target>

	<target name="tests-ui" depends="classes-tests" description="Runs the unit tests in a graphical environment">
		<mkdir dir="build/testresults" />
		<java fork="true" classname="junit.swingui.TestRunner">
			<sysproperty key="user.dir" value="${basedir}"/>
			<arg value="-noloading"/>
			<arg value="org.xins.tests.AllTests"/>
			<classpath>
				<pathelement location="build/classes/tests" />
				<pathelement location="build/xins-common.jar" />
				<pathelement location="build/xins-server.jar" />
				<pathelement location="build/xins-client.jar" />
				<pathelement location="build/logdoc.jar" />
				<pathelement location="src/tests/build/classes-capi/allinone" />
				<pathelement location="src/tests/build/classes-api/allinone" />
				<pathelement location="src/tests/build/classes-types/allinone" />
				<fileset dir="lib" includes="*.jar" />
			</classpath>
		</java>
	</target>
	
	<target name="do-perftests" depends="classes-tests" description="Runs the performance tests">
		<mkdir dir="build/perftestresults" />
		<mkdir dir="build/perftestresults/xml" />
		<junit printsummary="true" failureproperty="perftests.failed">
			<sysproperty key="user.dir" value="${basedir}"/>
			<formatter type="xml" />
			<test name="org.xins.perftests.AllTests" todir="build/perftestresults/xml" outfile="perftestresults"/>
			<classpath>
				<pathelement location="build/classes/tests" />
				<pathelement location="build/xins-common.jar" />
				<pathelement location="build/xins-server.jar" />
				<pathelement location="build/xins-client.jar" />
				<pathelement location="build/logdoc.jar" />
				<pathelement location="src/tests/build/classes-capi/allinone" />
				<pathelement location="src/tests/build/classes-api/allinone" />
				<pathelement location="src/tests/build/classes-types/allinone" />
				<fileset dir="lib" includes="*.jar" />
			</classpath>
		</junit>
	</target>

	<target name="perftestreports" description="Generates the performance test reports">
		<mkdir dir="build/perftestresults/html" />
		<style
		in="build/perftestresults/xml/perftestresults.xml"
		out="build/perftestresults/html/index.html"
		style="src/xslt/tests/perftests.xslt" />
		<copy
		file="src/css/tests/stylesheet.css"
		todir="build/perftestresults/html" />
	</target>

	<target name="perftests" depends="do-perftests,perftestreports" description="Runs the performance tests and generates reports" />

	<target name="clean-coverage">
		<delete file="jcoverage.ser" />
		<delete dir="build/instrumented-classes" />
		<delete dir="build/testresults/coverage" />
	</target>

	<target name="-prepare-coverage">
		<taskdef classpath="lib/jcoverage.jar" resource="tasks.properties"/>
		<instrument todir="build/instrumented-classes/java-client">
			<fileset dir="build/classes/java-client" includes="**/*.class" />
		</instrument>
		<instrument todir="build/instrumented-classes/java-server">
			<fileset dir="build/classes/java-server" includes="**/*.class" />
		</instrument>
		<instrument todir="build/instrumented-classes/java-common">
			<fileset dir="build/classes/java-common" includes="**/*.class" />
		</instrument>
	</target>

	<target name="coverage" depends="classes-tests, -prepare-coverage">
		<mkdir dir="build/testresults" />
		<mkdir dir="build/testresults/xml" />
		<mkdir dir="build/testresults/coverage" />
		<junit printsummary="true" failureproperty="tests.failed" fork="yes" showoutput="true" haltonfailure="false">
			<sysproperty key="user.dir" value="${basedir}" />
			<formatter type="xml" />
			<test name="org.xins.tests.AllTests" todir="build/testresults/xml" outfile="testresults"/>
			<classpath>
				<pathelement location="build/instrumented-classes/java-client" />
				<pathelement location="build/instrumented-classes/java-server" />
				<pathelement location="build/instrumented-classes/java-common" />
				<pathelement location="build/classes/java-client" />
				<pathelement location="build/classes/java-server" />
				<pathelement location="build/classes/java-common" />
				<pathelement location="build/classes/tests" />
				<pathelement location="../xins-examples/xins-project/build/classes-capi/allinone" />
				<pathelement location="../xins-examples/xins-project/build/classes-api/allinone" />
				<pathelement location="../xins-examples/xins-project/build/classes-types/allinone" />
				<pathelement location="lib/jcoverage.jar" />
				<fileset dir="lib" includes="*.jar" />
			</classpath>
		</junit>
		<report
		srcdir="src/java-common"
		destdir="build/testresults/coverage" />
	</target>

	<target name="j2h" depends="-j2h-task,java" description="Generates pretty-printed Java code as HTML">
		<mkdir dir="build/j2h" />
		<java2html
		title="Source X-ref for ${title} ${version}"
		destination="build/j2h"
		footer="no">
			<fileset dir="src/java-common">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="src/java-server-framework">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="src/java-client-framework">
				<include name="**/*.java" />
			</fileset>
		</java2html>
		<copy
		file="src/j2h/front.html"
		todir="build/j2h"
		overwrite="true" />
		<copy file="src/css/j2h/style.css"
		tofile="build/j2h/stylesheet.css"
		overwrite="true" />
	</target>

	<target name="-jdksrc-avail">
		<available
		file="${javadoc.srcdir.j2se}"
		type="dir"
		property="jdksrc.available" />
	</target>

	<target
	name="-javadoc-sourcepath-nojdksrc"
	depends="-init,-jdksrc-avail"
	unless="jdksrc.available">
		<property name="javadoc.sourcepath" value="${javadoc.srcdir.xins}" />
		<echo level="verbose" message="JDK source code not available." />
	</target>

	<target
	name="-javadoc-sourcepath-jdksrc"
	depends="-jdksrc-avail"
	if="jdksrc.available">
		<property name="javadoc.sourcepath" value="${javadoc.srcdir.xins}:${javadoc.srcdir.j2se}" />
		<echo level="verbose" message="JDK source code available." />
	</target>

	<target
	name="-javadoc-sourcepath"
	depends="-javadoc-sourcepath-nojdksrc,-javadoc-sourcepath-jdksrc" />

	<target name="-do-javadoc" depends="java,-javadoc-sourcepath">
		<mkdir dir="${javadoc.destdir}" />
		<javadoc
		sourcepath="${javadoc.sourcepath}"
		destdir="${javadoc.destdir}"
		source="1.3"
		version="yes"
		use="yes"
		author="yes"
		private="${javadoc.private}"
		windowtitle="${javadoc.title}"
		doctitle="${javadoc.title}"
		bottom="${javadoc.footer}">
			<packageset dir="src/java-common"           />
			<packageset dir="src/java-server-framework" />
			<packageset dir="src/java-client-framework" />

			<group title="XINS/Java Logdoc"           packages="org.xins.logdoc*" />
			<group title="XINS/Java Common Library"   packages="org.xins.common*" />
			<group title="XINS/Java Client Framework" packages="org.xins.client*" />
			<group title="XINS/Java Server Framework" packages="org.xins.server*" />

			<classpath>
				<fileset dir="lib"             includes="*.jar" />
				<fileset dir="${ant.home}/lib" includes="*.jar" />
			</classpath>

			<link offline="true" packagelistloc="src/package-lists/servlet/"            href="http://xins.sourceforge.net/servlet-2.4-docs/"             />
			<link offline="true" packagelistloc="src/package-lists/j2se/"               href="http://java.sun.com/j2se/1.3/docs/api"                     />
			<link offline="true" packagelistloc="src/package-lists/log4j/"              href="http://jakarta.apache.org/log4j/docs/api/"                 />
			<link offline="true" packagelistloc="src/package-lists/commons-logging/"    href="http://jakarta.apache.org/commons/logging/api/"            />
			<link offline="true" packagelistloc="src/package-lists/commons-httpclient/" href="http://jakarta.apache.org/commons/httpclient/apidocs/"     />
			<link offline="true" packagelistloc="src/package-lists/oro/"                href="http://jakarta.apache.org/oro/api/"                        />
			<link offline="true" packagelistloc="src/package-lists/xmlenc/"             href="http://xmlenc.sourceforge.net/javadoc/0.44/"               />
			<link offline="true" packagelistloc="src/package-lists/ant/"                href="http://xins.sourceforge.net/ant-1.6.2-docs/"               />
		</javadoc>
		<copy
		file="src/css/javadoc/style.css"
		tofile="${javadoc.destdir}/stylesheet.css"
		overwrite="true" />
	</target>

	<target
	name="javadoc"
	depends="javadoc-public,javadoc-private"
	description="Generates all Javadoc API documentation" />

	<target
	name="javadoc-public"
	depends="-init"
	description="Generates public Javadoc API documentation">
		<antcall target="-do-javadoc">
			<param name="javadoc.private" value="no" />
			<param name="javadoc.destdir" value="docs/javadoc" />
			<param name="javadoc.title"   value="${title} ${version}" />
			<param name="javadoc.footer"  value="See &lt;a target=&quot;_top&quot; href='${www.url}'&gt;${www.url}&lt;/a&gt;." />
		</antcall>
	</target>

	<target name="javadoc-private" depends="-init" description="Generates private Javadoc API documentation">
		<antcall target="-do-javadoc">
			<param name="javadoc.private" value="yes" />
			<param name="javadoc.destdir" value="docs/javadoc-private" />
			<param name="javadoc.title"   value="${title} ${version}" />
			<param name="javadoc.footer"  value="See &lt;a target=&quot;_top&quot; href='${www.url}'&gt;${www.url}&lt;/a&gt;.&lt;br /&gt;This Javadoc API documentation set contains private and package private members as well." />
		</antcall>
	</target>

	<target
	name="do-upload-javadoc"
	depends="-load-sfproperties,-init"
	description="Uploads the Javadoc documentation to the web site"
	unless="no-upload">
		<echo message="Uploading ${title} ${version} Javadoc to ${www.host}" />

		<!-- Create TAR GZ file for Javadoc -->
		<echo level="verbose" message="Creating TAR GZ file for Javadoc HTML" />
		<tar tarfile="build/javadoc.tar" longfile="gnu">
			<tarfileset dir="docs/javadoc"         mode="664" dirmode="775" prefix="javadoc/${version}" />
			<tarfileset dir="docs/javadoc-private" mode="664" dirmode="775" prefix="javadoc-private/${version}" />
		</tar>
		<gzip src="build/javadoc.tar" zipfile="build/javadoc.tgz" />
		<delete file="build/javadoc.tar" />

		<!-- Copy to remote host -->
		<echo level="verbose" message="Copying TAR GZ file for Javadoc" />
		<scp
		todir="${www.target}/"
		password="${sf.password}"
		trust="true"
		file="build/javadoc.tgz" />

		<!-- Remotely: unpack and create symbolic links -->
		<echo level="verbose" message="Unpacking TAR GZ file for Javadoc remotely" />
		<sshexec
		host="${www.host}"
		username="${sf.user}"
		password="${sf.password}"
		trust="true"
		command="cd ${www.dir} &amp;&amp; tar zxf javadoc.tgz &amp;&amp; rm javadoc.tgz &amp;&amp; cd javadoc &amp;&amp; rm -f latest &amp;&amp; ln -s ${version} latest &amp;&amp; cd ../javadoc-private &amp;&amp; rm -f latest &amp;&amp; ln -s ${version} latest" />
	</target>

	<target
	name="upload-javadoc"
	depends="javadoc,javadoc-private,do-upload-javadoc"
	description="Generates and then uploads the Javadoc API documentation to the web site"
	unless="no-upload" />

	<target name="-prepare-checkstyle" depends="-checkstyle-task" />

	<target name="checkstyle-text" depends="-prepare-checkstyle" description="Prints checkstyle errors">
		<checkstyle config="src/config/checkstyle/config.xml" failOnViolation="false">
			<fileset dir="src/java-common"           includes="**/*.java" />
			<fileset dir="src/java-server-framework" includes="**/*.java" />
			<fileset dir="src/java-client-framework" includes="**/*.java" />
			<formatter type="plain" />
		</checkstyle>
	</target>

	<target name="checkstyle-xml" depends="-prepare-checkstyle" description="Checks the style of the source code">
		<mkdir dir="build/checkstyle" />
		<mkdir dir="build/checkstyle/xml" />
		<checkstyle config="src/config/checkstyle/config.xml" failOnViolation="false">
			<fileset dir="src/java-common"           includes="**/*.java" />
			<fileset dir="src/java-server-framework" includes="**/*.java" />
			<fileset dir="src/java-client-framework" includes="**/*.java" />
			<formatter type="xml" tofile="build/checkstyle/xml/results.xml"/>
		</checkstyle>
	</target>

	<target name="checkstyle-report" description="Generates the checkstyle report">
		<mkdir dir="build/checkstyle/html" />
		<style
		in="build/checkstyle/xml/results.xml"
		out="build/checkstyle/html/index.html"
		style="src/xslt/checkstyle/index.xslt" />
		<copy
		file="src/css/checkstyle/style.css"
		tofile="build/checkstyle/html/stylesheet.css" />
	</target>

	<target name="checkstyle" depends="checkstyle-xml,checkstyle-report" description="Checks the style of the source code" />

	<target
	name="upload-checkstyle"
	depends="-init,checkstyle"
	description="Generates the Checkstyle report and uploads it to the web site"
	unless="no-upload">
		<echo message="Uploading ${title} ${version} Checkstyle report to ${www.host}" />
		<echo level="verbose" message="Creating directory ${www.dir}/checkstyle/${version} on ${www.host}" />
		<sshexec host="${www.host}" username="${sf.user}" password="${sf.password}" trust="true"
		         command="mkdir -p ${www.dir}/checkstyle/${version}" />
		<echo level="verbose" message="Copying files to directory ${www.dir}/checkstyle/${version} on ${www.host}" />
		<!-- TODO: Send compressed archive and unpack remotely -->
		<scp
		todir="${www.target}/checkstyle/${version}"
		password="${sf.password}"
		trust="true">
			<fileset dir="build/checkstyle/html" />
		</scp>
		<sshexec host="${www.host}" username="${sf.user}" password="${sf.password}" trust="true"
		         command="rm ${www.dir}/checkstyle/latest" />
		<sshexec host="${www.host}" username="${sf.user}" password="${sf.password}" trust="true"
		         command="ln -s ${www.dir}/checkstyle/${version} ${www.dir}/checkstyle/latest" />
	</target>

	<target name="upload-j2h"
	depends="-init,j2h"
	description="Uploads the Java2HTML documentation to the web site"
	unless="no-upload">
		<echo message="Uploading ${title} ${version} Java2HTML documentation to ${www.host}" />
		
		<!-- Create TAR GZ file for Java2HTML -->
		<echo level="verbose" message="Creating TAR GZ file for Java2HTML" />
		<tar tarfile="build/j2h.tar" longfile="gnu">
			<tarfileset dir="build/j2h" mode="664" dirmode="775" prefix="j2h/${version}" />
		</tar>
		<gzip src="build/j2h.tar" zipfile="build/j2h.tgz" />
		<delete file="build/j2h.tar" />

		<!-- Copy to remote host -->
		<echo level="verbose" message="Copying TAR GZ file for Java2HTML" />
		<scp
		todir="${www.target}/"
		password="${sf.password}"
		trust="true"
		file="build/j2h.tgz" />

		<!-- Remotely: unpack and create symbolic links -->
		<echo level="verbose" message="Unpacking TAR GZ file for Java2HTML remotely" />
		<sshexec
		host="${www.host}"
		username="${sf.user}"
		password="${sf.password}"
		trust="true"
		command="cd ${www.dir} &amp;&amp; tar zxf j2h.tgz &amp;&amp; rm j2h.tgz &amp;&amp; cd j2h &amp;&amp; rm -f latest &amp;&amp; ln -s ${version} latest" />
	</target>

	<target name="copy-docs-demo" depends="-init">
		<!-- Copy the examples in the release -->
		<delete dir="demo" />
		<mkdir dir="demo" />
		<copy todir="demo">
			<fileset dir="../${name}-examples">
				<include name="build.xml" />
				<include name="nbbuild.xml" />
				<include name="xins.properties" />
				<include name="jetty_myproject.xml" />
				<include name="jetty_allinone.xml" />
				<include name="jetty_filteredproject.xml" />
				<include name="capis/**/*.xml" />
				<include name="capis/**/*.java" />
				<include name="xins-project/**/*.xml" />
				<include name="xins-project/**/*.fnc" />
				<include name="xins-project/**/*.typ" />
				<include name="xins-project/**/*.rcd" />
				<include name="xins-project/**/*.java" />
				<exclude name="build" />
				<exclude name="xins-project/build/**/*" />
			</fileset>
		</copy>
		<!-- Create and copy the documentation -->
		<ant dir="../${name}-docs" target="guide" inheritall="false">
			<property name="version" value="${version.major}.${version.middle}.${version.minor}${version.build}" />
		</ant>
		<delete dir="docs/protocol" />
		<delete>
			<fileset dir="docs">
				<include name="*" />
			</fileset>
		</delete>
		<mkdir dir="docs" />
		<copy todir="docs">
			<fileset dir="../${name}-docs/build/guide">
				<exclude name="*.fo" />
				<exclude name="XINSGuide.html" />
			</fileset>
		</copy>
		<ant dir="../${name}-docs" target="protocol" inheritall="false" />
		<mkdir dir="docs/protocol" />
		<copy todir="docs/protocol">
			<fileset dir="../${name}-docs/build/protocol">
				<exclude name="*.fo" />
				<exclude name="XINSProtocol.html" />
			</fileset>
		</copy>
	</target>

	<target name="package" depends="javadoc,java-server,java-client,logdoc-html,copy-docs-demo" description="Builds a complete distribution archive">
		<!-- convert all text files to Unix LF -->
		<patternset id="release.text.files">
			<include name="src/ant/**/*"                   />
			<include name="src/css/javadoc/*"              />
			<include name="src/css/logdoc/*"               />
			<include name="src/css/specdocs/*"             />
			<include name="src/dtd/**/*"                   />
			<include name="src/java-client-framework/**/*" />
			<include name="src/java-common/**/*"           />
			<include name="src/java-server-framework/**/*" />
			<include name="src/logdoc/client/*"            />
			<include name="src/logdoc/common/*"            />
			<include name="src/logdoc/server/*"            />
			<include name="src/package-lists/**/*"         />
			<include name="src/xml/**/*"                   />
			<include name="src/xslt/**/*"                  />
			<include name="lib/apache.LICENSE"             />
			<include name="lib/commons-httpclient.LICENSE" />
			<include name="lib/commons-logging.LICENSE"    />
			<include name="lib/jakarta-oro.LICENSE"        />
			<include name="lib/log4j.LICENSE"              />
			<include name="lib/xmlenc.LICENSE"             />
			<include name="docs/*.html"                    />
			<include name="docs/*.css"                     />
			<include name="docs/protocol/*.html"           />
			<include name="docs/protocol/*.css"            />
			<include name="docs/javadoc/**/*.html"         />
			<include name="docs/javadoc/*.css"             />
			<include name="docs/javadoc/package-list"      />
			<include name="docs/logdoc/**/*.html"          />
			<include name="docs/logdoc/**/*.css"           />
			<include name="demo/**/*"                      />
			<include name="build.xml"                      />
			<include name=".version.properties"            />
			<include name="CHANGES"                        />
			<include name="COPYRIGHT"                      />
			<include name="README.html"                    />
			<exclude name="src/xslt/checkstyle/*"          />
			<exclude name="src/xslt/tests/*"               />
		</patternset>
		<mkdir dir="build/lf" />
		<copy todir="build/lf" includeEmptyDirs="false">
			<fileset dir=".">
				<patternset refid="release.text.files" />
				<include name="bin/*"                  />
			</fileset>
		</copy>
		<fixcrlf srcdir="build/lf" eol="unix" eof="remove">
			<patternset refid="release.text.files" />
			<include name="bin/xins" />
		</fixcrlf>
		<fixcrlf srcdir="build/lf/bin" eol="dos" eof="asis">
			<include name="xins.bat" />
		</fixcrlf>

		<!-- Tar the release file -->
		<tar tarfile="build/${package-basename}.tar" longfile="gnu">
			<tarfileset
			dir="${basedir}"
			prefix="${name}-${version}"
			mode="644">
				<include name="build/*.jar"                    />
				<include name="docs/XINSGuide.pdf"             />
				<include name="docs/protocol/XINSProtocol.pdf" />
				<include name="lib/commons-httpclient.jar"     />
				<include name="lib/commons-logging.jar"        />
				<include name="lib/jakarta-oro.jar"            />
				<include name="lib/log4j.jar"                  />
				<include name="lib/xmlenc.jar"                 />
				<include name="lib/servlet.jar"                />
			</tarfileset>
			<tarfileset
			dir="${basedir}/build/lf"
			prefix="${name}-${version}"
			mode="644">
				<patternset refid="release.text.files"/>
				<include name="bin/xins.bat" />
			</tarfileset>
			<tarfileset
			dir="${basedir}/build/lf"
			prefix="${name}-${version}"
			mode="755">
				<include name="bin/xins" />
			</tarfileset>
		</tar>
		<gzip src="build/${package-basename}.tar" zipfile="build/${package-basename}.tgz" />
		<delete file="build/${package-basename}.tar" />
		<delete dir="build/lf" />
	</target>

	<target
	name="do-upload-package-www"
	depends="-init"
	description="Uploads the package to the web site">
		<echo message="Uploading ${title} ${version} package to ${www.host}" />
		<scp
		file="build/${package-basename}.tgz"
		todir="${www.target}/"
		password="${sf.password}"
		trust="true" />
	</target>

	<target
	name="do-upload-package-ftp"
	depends="-init"
	description="Uploads the package to the SourceForge FTP server"
	unless="no-ftp">
		<echo message="Uploading ${title} ${version} package to SourceForge FTP server" />
		<ftp server="upload.sf.net" remotedir="incoming"
		     userid="anonymous" password="${sf.user}@users.sourceforge.net">
			<fileset dir="build" includes="${package-basename}.tgz" />
		</ftp>
	</target>

	<target
	name="do-upload-package"
	depends="do-upload-package-www,do-upload-package-ftp"
	description="Uploads the package to both the web site and to the SourceForge FTP server" />

	<target
	name="upload-package"
	depends="package,do-upload-package"
	description="Creates and uploads package to the web server" />

	<target name="-check-release-version" depends="-init" unless="force">
		<condition property="version.suffix.set">
			<equals arg1="${version.suffix}" arg2="-dev" />
		</condition>
		<fail unless="version.suffix.set" message="Version suffix is not set to -dev. If you do want to release, please set 'force'." />
	</target>

	<target name="-check-directories" depends="-init">
		<available property="docs.installed" file="../${name}-docs" type="dir" />
		<fail message="../${name}-docs not found, please check it out from CVS." unless="docs.installed" />
		<available property="examples.installed" file="../${name}-examples" type="dir" />
		<fail message="../${name}-examples not found, please check it out from CVS." unless="examples.installed" />
		<property environment="env" />
		<fail unless="env.DOCBOOK_XSLT_HOME">
Please point the environment variable DOCBOOK_XSLT_HOME to the correct directory.
If necessary, download docbook-xsl 1.65.1 at
http://sourceforge.net/project/showfiles.php?group_id=21935&amp;package_id=16608
		</fail>
	</target>

	<target name="-nodiffs-check" depends="clean">
		<tempfile destdir="${java.io.tmpdir}" prefix="${name}-release-diff." property="diff-file" suffix=".diff" />
		<cvs cvsRoot=":ext:${sf.user}@cvs.sourceforge.net:/cvsroot/xins"
		     failonerror="true" command="diff" output="${diff-file}" quiet="true" />
		<loadfile srcfile="${diff-file}" property="diff-contents" />
		<property name="diff-contents" value="" />
		<echo message="Diff contents: &quot;${diff-contents}&quot;." />
		<condition property="diff-contents-empty">
			<equals arg1="${diff-contents}" arg2="" />
		</condition>
		<fail unless="diff-contents-empty" message="There are differences with the CVS repository (result of 'cvs diff' is non-empty). See: ${diff-file}" />
		<delete file="${diff-file}" />
	</target>

	<target name="-pre-commit-version" depends="-init" unless="major.release">
		<propertyfile file="${version.file}" comment=" Version number for XINS.&#10;">
			<entry key="version.suffix" operation="=" value="" />
		</propertyfile>
		<cvs cvsRoot=":ext:${sf.user}@cvs.sourceforge.net:/cvsroot/xins"
		     failonerror="true">
			<commandline>
				<argument value="commit" />
				<argument value="-m" />
				<argument value="Unmarked -dev." />
				<argument value="${version.file}" />
			</commandline>
		</cvs>
	</target>

	<target
	name="-pre-release-checks"
	depends="-init-release,-check-release-version,-check-directories,-nodiffs-check,tests,-pre-commit-version">
	</target>

	<target
	name="-prepare-release"
	depends="-pre-release-checks">
		<taskdef name="uppercase" classname="org.xins.common.ant.UppercaseTask" classpath="build/xins-common.jar" />
		<uppercase property="version.minor.uppercase" text="${version.minor}" />
		<property name="tagname" value="RELEASE_${version.major}_${version.middle}_${version.minor.uppercase}${version.build}" />
		<echo message="Tagging ${tagname}" />
		<cvs cvsRoot=":ext:${sf.user}@cvs.sourceforge.net:/cvsroot/xins"
		     failonerror="true" command="tag ${tagname}" quiet="true" />
	</target>

	<target
	name="upload-changes"
	depends="-init"
	description="Uploads the change history file to the web site">
		<echo message="Uploading ${title} ${version} change log to ${www.host}" />
		<copy file="CHANGES" tofile="build/changes-${version}.txt" />
		<scp
		file="build/changes-${version}.txt"
		todir="${www.target}"
		password="${sf.password}"
		trust="true" />
	</target>

	<target name="upload-homepage" depends="-init">
		<property name="docs.dir" value="../${name}-docs/" />
		<available property="docs.avail" file="${docs.dir}/build.xml" type="file" />
		<fail unless="docs.avail" message="Unable to find build.xml in ${docs.dir}. Unable to upload homepage." />
		<ant dir="../${name}-docs" target="upload-homepage" inheritall="false">
			<property name="version" value="${version.major}.${version.middle}.${version.minor}${version.build}" />
			<property name="sf.user" value="${sf.user}" />
			<property name="sf.password" value="${sf.password}" />
		</ant>
	</target>

	<target name="-post-commit-version" depends="-init" unless="major.release">
		<propertyfile file="${version.file}" comment=" Version number for XINS.&#10;">
			<entry key="version.build"      type="int" operation="+" value="1"      />
			<entry key="version.suffix"                operation="=" value="-dev"   />
		</propertyfile>
		<cvs cvsRoot=":ext:${sf.user}@cvs.sourceforge.net:/cvsroot/xins" failonerror="true">
			<commandline>
				<argument value="commit" />
				<argument value="-m" />
				<argument value="Bumped version, marked -dev." />
				<argument value="${version.file}" />
			</commandline>
		</cvs>
	</target>

	<target
	name="release"
	depends="-junit-task,-checkstyle-task,-j2h-task,-init-release,-prepare-release,upload-changes,upload-package,upload-javadoc,upload-checkstyle,upload-j2h,upload-logdoc,-post-commit-version"
	description="Performs a release">
		<antcall target="upload-homepage" />
		<delete>
			<fileset dir="build/src" />
		</delete>
	</target>

	<target name="all" depends="java-server,javadoc" description="Generates everything" />

	<target name="help" description="Print the help of the main targets" depends="-init">
		<echo message="XINS ${version}"                                                     />
		<echo message=""                                                                    />
		<echo message="Main targets:"                                                       />
		<echo message="  clean        : Remove all generated files"                         />
		<echo message="  java         : Compile all Java source files"                      />
		<echo message="  javadoc      : Generate the Javadoc API docs"                      />
		<echo message="  logdoc-html  : Generate the Logdoc HTML pages"                     />
		<echo message="  version      : Print the XINS version"                             />
		<echo message="* tests        : Run all unit tests"                                 />
		<echo message="* release      : Create a new XINS release"                          />
		<echo                                                                               />
		<echo message="The targets marked with an asterisk (*) need '-lib lib' to be"       />
		<echo message="passed on the command line:"                                         />
		<echo                                                                               />
		<echo message="Supported options (can change at any time):"                         />
		<echo message="1) -Dforce=true         : Skip -dev suffix check on release"         />
		<echo message="2) -Dmajor.release=true : Skip version update on release"            />
		<echo message="3) -Dno-upload=true     : Skip upload except package and changes"    />
		<echo message="4) -Dno-ftp=true        : Skip FTP upload actions"                   />
		<echo                                                                               />
		<echo message="To create a release the following requirements apply:"               />
		<echo message="1) CVS module 'xins-docs' must be checked out in parent directory"   />
		<echo message="   and should be up-to-date;"                                        />
		<echo message="2) CVS module 'xins-examples' must be checked out in parent"         />
		<echo message="   directory and should be up-to-date;"                              />
		<echo message="3) File .sourceforge.properties must exist in home directory and"    />
		<echo message="   must contain valid sf.user and sf.password properties."           />
		<echo message="4) The DOCBOOK_XSLT_HOME environment variable must be set and"       />
		<echo message="   refer to the directory containing the Docbook XSLT files."        />
	</target>

	<target name="netbeans-debug" depends="classes-tests" if="netbeans.home" description="Debug in NetBeans IDE">
		<nbjpdastart name="XINS tests" addressproperty="jpda.address" transport="dt_socket">
			<classpath>
				<pathelement location="build/classes/tests" />
				<pathelement location="build/xins-common.jar" />
				<pathelement location="build/xins-server.jar" />
				<pathelement location="build/xins-client.jar" />
				<pathelement location="build/logdoc.jar" />
				<pathelement location="src/tests/build/classes-capi/allinone" />
				<pathelement location="src/tests/build/classes-api/allinone" />
				<pathelement location="src/tests/build/classes-types/allinone" />
				<fileset dir="lib" includes="*.jar" />
			</classpath>
			<sourcepath>
				<pathelement location="src/java-client-framework" />
				<pathelement location="src/java-server-framework" />
				<pathelement location="src/java-common" />
			</sourcepath>
		</nbjpdastart>

		<mkdir dir="build/testresults" />
		<mkdir dir="build/testresults/xml" />
		
		<junit printsummary="true" failureproperty="tests.failed" fork="true">
			<jvmarg value="-Xdebug" />
			<jvmarg value="-Xnoagent" />
			<jvmarg value="-Djava.compiler=none" />
			<jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>

			<sysproperty key="user.dir" value="${basedir}"/>
			<formatter type="xml" />
			<test name="org.xins.tests.AllTests" todir="build/testresults/xml" outfile="testresults"/>
			<classpath>
				<pathelement location="build/classes/tests" />
				<pathelement location="build/xins-common.jar" />
				<pathelement location="build/xins-server.jar" />
				<pathelement location="build/xins-client.jar" />
				<pathelement location="build/logdoc.jar" />
				<pathelement location="src/tests/build/classes-capi/allinone" />
				<pathelement location="src/tests/build/classes-api/allinone" />
				<pathelement location="src/tests/build/classes-types/allinone" />
				<fileset dir="lib" includes="*.jar" />
			</classpath>
		</junit>
		
		<antcall target="testreports" />
	</target>
</project>
