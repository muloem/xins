<?xml version="1.0" encoding="US-ASCII" ?>
<!--
 -*- mode: Fundamental; tab-width: 4; -*-
 ex:ts=4

 $Id$
-->

<project name="xins" default="all" basedir=".">

	<target name="-checkstyle-avail">
		<available classname="com.puppycrawl.tools.checkstyle.CheckStyleTask" property="checkstyle.available" />
		<fail unless="checkstyle.available" message="Checkstyle not available" />
	</target>

	<target name="-checkstyle-task" depends="-checkstyle-avail">
		<taskdef name="checkstyle" classname="com.puppycrawl.tools.checkstyle.CheckStyleTask"/>
	</target>

	<target name="-init">
		<property name="title"               value="XINS" />
		<property name="name"                value="${ant.project.name}" />
		<property name="version"             value="0.27-dev" />
		<property name="src-package-tarfile" value="${name}-${version}.tar" />
		<property name="bin-package-tarfile" value="${name}-${version}-bin.tar" />
		<property name="www.user"            value="znerd" />
		<property name="project"             value="${name}" />
		<property name="cvs.module"          value="${name}" />
		<property name="www.host"            value="${project}.sourceforge.net" />
		<property name="www.dir"             value="/home/groups/x/xi/xins/htdocs" />
		<property name="www.target"          value="${www.user}@${www.host}:${www.dir}" />
		<property name="url"                 value="http://${www.host}/" />
		<property name="vendor"              value="Wanadoo Nederland B.V." />

		<property name="javac.debug"         value="true"  />
		<property name="javac.deprecation"   value="true"  />
		<property name="javac.optimize"      value="true" />
	</target>

	<target name="version" depends="-init">
		<echo message="${title} ${version}" />
	</target>

	<target name="-prepare" depends="-init">
		<mkdir dir="build" />
	</target>

	<target name="-prepare-java" depends="-prepare">
		<mkdir dir="build/src/java-server-framework" />
		<style
		in="src/xml/default_resultcodes.xml"
		out="build/src/java-server-framework/org/xins/server/DefaultResultCodes.java"
		style="src/xslt/java-server-framework/default_resultcodes_to_java.xslt" />
		<mkdir dir="build/src/java-server-framework" />
		<copy todir="build/src/java-server-framework">
			<fileset dir="build/src/java-server-framework" includes="**/*.java" />
			<fileset dir="src/java-server-framework"   includes="**/*.java" />
		</copy>
		<replace dir="build/src/java-server-framework" token="%%VERSION%%" value="${version}" />
	</target>

	<target name="-prepare-classes" depends="-prepare">
		<mkdir dir="build/classes" />
	</target>

	<target name="clean" description="Removes all generated files">
		<delete dir="build" />
	</target>

	<target name="java-server-framework" depends="-prepare-java,-prepare-classes" description="Compiles the XINS/Java server framework">
		<mkdir dir="build/classes/java-server-framework" />
		<javac
		srcdir="build/src/java-server-framework"
		destdir="build/classes/java-server-framework"
		debug="${javac.debug}"
		deprecation="${javac.deprecation}"
		optimize="${javac.optimize}"
		target="1.2">
			<classpath>
				<fileset dir="depends/compile"             includes="**/*.jar" />
				<fileset dir="depends/compile_and_runtime" includes="**/*.jar" />
				<fileset dir="depends/runtime"             includes="**/*.jar" />
			</classpath>
		</javac>
		<manifest file="build/MANIFEST.MF">
			<section name="xins">
				<attribute name="Specification-Title"    value="${title}"   />
				<attribute name="Specification-Version"  value="${version}" />
				<attribute name="Specification-Vendor"   value="${vendor}"  />
				<attribute name="Implementation-Title"   value="${title}"   />
				<attribute name="Implementation-Version" value="${version}" />
				<attribute name="Implementation-Vendor"  value="${vendor}"  />
			</section>
		</manifest>
		<jar
		jarfile="build/xins.jar"
		basedir="build/classes/java-server-framework"
		manifest="build/MANIFEST.MF" />
	</target>

	<target name="-jdksrc-avail">
		<available file="${java.home}/src" type="dir" property="jdksrc.available" />
	</target>

	<target name="-javadoc-sourcepath-nojdksrc" depends="-prepare,-jdksrc-avail" unless="jdksrc.available">
		<property name="javadoc.sourcepath" value="build/src/java-server-framework" />
		<echo level="verbose" message="JDK source code not available." />
	</target>

	<target name="-javadoc-sourcepath-jdksrc" depends="-jdksrc-avail" if="jdksrc.available">
		<property name="javadoc.sourcepath" value="build/src/java-server-framework:${java.home}/src" />
		<echo level="verbose" message="JDK source code available." />
	</target>

	<target name="-javadoc-sourcepath" depends="-javadoc-sourcepath-nojdksrc,-javadoc-sourcepath-jdksrc" />

	<target name="-do-javadoc" depends="-prepare-java,-javadoc-sourcepath">
		<mkdir dir="${javadoc.destdir}" />
		<javadoc
		sourcepath="${javadoc.sourcepath}"
		destdir="${javadoc.destdir}"
		version="yes"
		use="yes"
		author="yes"
		private="${javadoc.private}"
		windowtitle="${javadoc.title}"
		doctitle="${javadoc.title}"
		bottom="${javadoc.footer}">
			<packageset dir="src/java-server-framework" />
			<classpath>
				<fileset dir="depends/compile"             includes="**/*.jar" />
				<fileset dir="depends/compile_and_runtime" includes="**/*.jar" />
				<fileset dir="depends/runtime"             includes="**/*.jar" />
			</classpath>
			<link
			href="http://java.sun.com/products/servlet/2.3/javadoc/"
			offline="true"
			packagelistloc="src/package-lists/servlet/" />
			<link
			href="http://java.sun.com/j2se/1.3/docs/api"
			offline="true"
			packagelistloc="src/package-lists/j2se/" />
			<link
			href="http://jakarta.apache.org/log4j/docs/api/"
			offline="true"
			packagelistloc="src/package-lists/log4j/" />
			<link
			href="http://jakarta.apache.org/commons/logging/api/"
			offline="true"
			packagelistloc="src/package-lists/commons-logging/" />
		</javadoc>
		<copy
		file="src/css/javadoc/style.css"
		tofile="${javadoc.destdir}/stylesheet.css"
		overwrite="true" />
	</target>

	<target name="javadoc" depends="javadoc-public,javadoc-private" description="Generates all Javadoc API documentation" />

	<target name="javadoc-public" depends="-init" description="Generates public Javadoc API documentation">
		<antcall target="-do-javadoc">
			<param name="javadoc.private" value="no" />
			<param name="javadoc.destdir" value="build/javadoc" />
			<param name="javadoc.title"   value="${title} ${version}" />
			<param name="javadoc.footer"  value="See &lt;a target=&quot;_top&quot; href='${url}'&gt;${url}&lt;/a&gt;." />
		</antcall>
	</target>

	<target name="javadoc-private" depends="-init" description="Generates private Javadoc API documentation">
		<antcall target="-do-javadoc">
			<param name="javadoc.private" value="yes" />
			<param name="javadoc.destdir" value="build/javadoc-private" />
			<param name="javadoc.title"   value="${title} ${version}" />
			<param name="javadoc.footer"  value="See &lt;a target=&quot;_top&quot; href='${url}'&gt;${url}&lt;/a&gt;.&lt;br /&gt;This Javadoc API documentation set contains private and package private members as well." />
		</antcall>
	</target>

	<target name="upload-javadoc" depends="-init,javadoc,javadoc-private" description="Uploads the Javadoc documentation to the webserver">
		<echo message="Uploading ${title} ${version} API docs to ${www.host}" />

		<echo level="verbose" message="Creating directory ${www.dir}/javadoc/${version} on ${www.host}" />
		<exec executable="ssh" failonerror="true">
			<arg value="${www.user}@${www.host}" />
			<arg value="mkdir -p ${www.dir}/javadoc/${version}" />
		</exec>
		<echo level="verbose" message="Copying files to ${www.dir}/javadoc/${version} on ${www.host}" />
		<exec dir="build/javadoc" executable="scp" failonerror="true">
			<arg value="-r" />
			<arg value="." />
			<arg value="${www.target}/javadoc/${version}/" />
		</exec>

		<echo level="verbose" message="Creating directory ${www.dir}/javadoc-private/${version} on ${www.host}" />
		<exec executable="ssh" failonerror="true">
			<arg value="${www.user}@${www.host}" />
			<arg value="mkdir -p ${www.dir}/javadoc-private/${version}" />
		</exec>
		<echo level="verbose" message="Copying files to ${www.dir}/javadoc-private/${version} on ${www.host}" />
		<exec dir="build/javadoc-private" executable="scp" failonerror="true">
			<arg value="-r" />
			<arg value="." />
			<arg value="${www.target}/javadoc-private/${version}/" />
		</exec>
	</target>

	<target name="-prepare-checkstyle" depends="-checkstyle-task" />

	<target name="checkstyle-text" depends="-prepare-checkstyle" description="Prints checkstyle errors">
		<checkstyle properties="src/config/checkstyle/checkstyle.properties" failOnViolation="false">
			<fileset dir="src/java-server-framework" includes="**/*.java" />
			<formatter type="plain" />
		</checkstyle>
	</target>

	<target name="checkstyle-xml" depends="-prepare-checkstyle" description="Checks the style of the source code">
		<mkdir dir="build/checkstyle" />
		<mkdir dir="build/checkstyle/xml" />
		<checkstyle properties="src/config/checkstyle/checkstyle.properties" failOnViolation="false">
			<fileset dir="src/java-server-framework" includes="**/*.java" />
			<formatter type="xml" tofile="build/checkstyle/xml/results.xml"/>
		</checkstyle>
	</target>

	<target name="checkstyle-report" description="Generates the checkstyle report">
		<mkdir dir="build/checkstyle/html" />
		<style
		in="build/checkstyle/xml/results.xml"
		out="build/checkstyle/html/index.html"
		style="src/xslt/checkstyle/index.xslt" />
		<copy
		file="src/css/checkstyle/style.css"
		tofile="build/checkstyle/html/stylesheet.css" />
	</target>

	<target name="checkstyle" depends="checkstyle-xml,checkstyle-report" description="Checks the style of the source code" />

	<target name="upload-checkstyle" depends="-init,checkstyle">
		<echo message="Uploading ${title} ${version} Checkstyle report to ${www.host}" />
		<echo level="verbose" message="Creating directory ${www.dir}/checkstyle/${version} on ${www.host}" />
		<exec executable="ssh" failonerror="true">
			<arg value="${www.user}@${www.host}" />
			<arg value="mkdir -p ${www.dir}/checkstyle/${version}" />
		</exec>
		<exec dir="build/checkstyle/html" executable="scp" failonerror="true">
			<arg value="-r" />
			<arg value="." />
			<arg value="${www.target}/checkstyle/${version}" />
		</exec>
	</target>

	<target name="src-package" depends="-prepare" description="Builds an archive with source files and dependencies">
		<tar tarfile="build/${src-package-tarfile}">
			<tarfileset dir="${basedir}" prefix="${name}-${version}" includes="build.xml,CHANGES,COPYRIGHT,README,src/**/*,depends/**/*" />
		</tar>
		<gzip zipfile="build/${src-package-tarfile}.gz" src="build/${src-package-tarfile}" />
		<delete file="build/${src-package-tarfile}" />
	</target>

	<target name="bin-package" depends="javadoc,java-server-framework" description="Builds a complete distribution archive">
		<tar tarfile="build/${bin-package-tarfile}">
			<tarfileset dir="${basedir}" prefix="${name}-${version}" includes="build.xml,CHANGES,COPYRIGHT,README,src/**/*,depends/**,build/javadoc/**,build/${name}.jar" />
		</tar>
		<gzip zipfile="build/${bin-package-tarfile}.gz" src="build/${bin-package-tarfile}" />
		<delete file="build/${bin-package-tarfile}" />
	</target>

	<target name="packages" depends="src-package,bin-package" description="Build all distribution archives"/>

	<target name="do-upload-packages" depends="-init" description="Uploads the packages to the web server">
		<echo message="Uploading ${title} ${version} packages to ${www.host}" />
		<exec dir="build/" executable="scp" failonerror="true">
			<arg value="${src-package-tarfile}.gz" />
			<arg value="${bin-package-tarfile}.gz" />
			<arg value="${www.target}" />
		</exec>
	</target>

	<target name="upload-packages" depends="packages,do-upload-packages" description="Creates and uploads packages to the web server" />


	<target name="upload-release" depends="clean,upload-packages,upload-javadoc,upload-checkstyle" description="Uploads everything" />

	<target name="all" depends="java-server-framework,javadoc" description="Generates everything" />

</project>
