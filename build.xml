<?xml version="1.0" encoding="US-ASCII" ?>
<!--
 -*- mode: Fundamental; tab-width: 4; -*-
 ex:ts=4

 $Id$
-->

<project name="xins" default="all" basedir=".">

	<target name="-init">
		<property name="title"               value="XINS" />
		<property name="name"                value="${ant.project.name}" />
		<property name="version"             value="0.1-dev" />
		<property name="release-version"     value="0.1" />
		<property name="src-package-tarfile" value="${name}-${version}.tar" />
		<property name="bin-package-tarfile" value="${name}-${version}-bin.tar" />
		<property name="debug"               value="true" />
		<property name="www.user"            value="znerd" />
		<property name="project"             value="${name}" />
		<property name="cvs.module"          value="${name}" />
		<property name="www.host"            value="${project}.sourceforge.net" />
		<property name="www.dir"             value="/home/groups/x/xi/xins/htdocs" />
		<property name="www.target"          value="${www.user}@${www.host}:${www.dir}" />
		<property name="url"                 value="http://${www.host}/" />
		<property name="javadoc.title"       value="${title} ${version}" />
		<property name="javadoc.footer"      value="See &lt;a href='${url}'&gt;${url}&lt;/a&gt;." />
		<property name="vendor"              value="Wanadoo Nederland B.V." />
	</target>

	<target name="-xmlenc-avail">
		<available classname="org.znerd.xmlenc.XMLOutputter" property="xmlenc.available" />
		<fail unless="xmlenc.available" message="Library not available: xmlenc" />
	</target>

	<target name="-servlet-avail">
		<available classname="javax.servlet.http.HttpServletRequest" property="servlet.available" />
		<fail unless="servlet.available" message="Library not available: Servlet API" />
	</target>

	<target name="-prepare" depends="-init">
		<mkdir dir="build" />
	</target>

	<target name="-prepare-java" depends="-prepare">
		<mkdir dir="build/src/java-server-framework" />
		<style
		in="src/xml/default_returncodes.xml"
		out="build/src/java-server-framework/org/xins/server/DefaultReturnCodes.java"
		style="src/xslt/java-server-framework/default_returncodes_to_java.xslt" />
		<mkdir dir="build/src/java-server-framework" />
		<copy todir="build/src/java-server-framework">
			<fileset dir="build/src/java-server-framework" includes="**/*.java" />
			<fileset dir="src/java-server-framework"   includes="**/*.java" />
		</copy>
	</target>

	<target name="-prepare-classes" depends="-prepare">
		<mkdir dir="build/classes" />
	</target>

	<target name="clean" description="Removes all generated files">
		<delete dir="build" />
	</target>

	<target name="java-server-framework" depends="-xmlenc-avail,-servlet-avail,-prepare-java,-prepare-classes" description="Compiles the XINS/Java server framework">
		<mkdir dir="build/classes/java-server-framework" />
		<javac
		srcdir="build/src/java-server-framework"
		destdir="build/classes/java-server-framework"
		debug="on"
		deprecation="on"
		optimize="off"
		target="1.2" />
		<manifest file="build/MANIFEST.MF">
			<section name="xins">
				<attribute name="Specification-Title"    value="${title}"   />
				<attribute name="Specification-Version"  value="${version}" />
				<attribute name="Specification-Vendor"   value="${vendor}"  />
				<attribute name="Implementation-Title"   value="${title}"   />
				<attribute name="Implementation-Version" value="${version}" />
				<attribute name="Implementation-Vendor"  value="${vendor}"  />
			</section>
		</manifest>
		<jar
		jarfile="build/xins.jar"
		basedir="build/classes/java-server-framework"
		manifest="build/MANIFEST.MF" />
	</target>

	<target name="-jdksrc-avail">
		<available file="${java.home}/src" type="dir" property="jdksrc.available" />
	</target>

	<target name="-javadoc-sourcepath-nojdksrc" depends="-servlet-avail,-prepare,-jdksrc-avail" unless="jdksrc.available">
		<property name="javadoc.sourcepath" value="build/src/java-server-framework" />
		<echo level="verbose" message="JDK source code not available." />
	</target>

	<target name="-javadoc-sourcepath-jdksrc" depends="-jdksrc-avail" if="jdksrc.available">
		<property name="javadoc.sourcepath" value="build/src/java-server-framework:${java.home}/src" />
		<echo level="verbose" message="JDK source code available." />
	</target>

	<target name="-javadoc-sourcepath" depends="-javadoc-sourcepath-nojdksrc,-javadoc-sourcepath-jdksrc" />

	<target name="javadoc" depends="-prepare-java,-javadoc-sourcepath" description="Generates Javadoc API documentation">
		<mkdir dir="build/javadoc" />
		<javadoc
		sourcepath="${javadoc.sourcepath}"
		destdir="build/javadoc"
		version="yes"
		use="yes"
		author="yes"
		private="no"
		windowtitle="${javadoc.title}"
		doctitle="${javadoc.title}"
		bottom="${javadoc.footer}">
			<packageset dir="src/java-server-framework" />
			<link
			href="http://java.sun.com/products/servlet/2.3/javadoc/"
			offline="true"
			packagelistloc="src/package-lists/servlet/" />
			<link
			href="http://java.sun.com/j2se/1.3/docs/api"
			offline="true"
			packagelistloc="src/package-lists/j2se/" />
		</javadoc>
		<copy
		file="src/css/javadoc/style.css"
		tofile="build/javadoc/stylesheet.css"
		overwrite="true" />
	</target>

	<target name="upload-javadoc" depends="javadoc" description="Uploads the Javadoc documentation to the webserver">
		<echo message="Uploading API documentation to ${www.host}" />
		<echo level="verbose" message="Creating directory ${www.dir}/javadoc/${version} on ${www.host}" />
		<exec executable="ssh" failonerror="true">
			<arg value="${www.user}@${www.host}" />
			<arg value="mkdir -p ${www.dir}/javadoc/${version}" />
		</exec>
		<echo level="verbose" message="Copying files to ${www.dir}/javadoc/${version} on ${www.host}" />
		<exec dir="build/javadoc" executable="scp" failonerror="true">
			<arg value="-r" />
			<arg value="." />
			<arg value="${www.target}/javadoc/${version}/" />
		</exec>
	</target>

	<target name="all" depends="java-server-framework,javadoc" description="Generates everything" />

</project>
