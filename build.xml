<?xml version="1.0" encoding="US-ASCII" ?>
<!--
 -*- mode: Fundamental; tab-width: 4; -*-
 ex:ts=4

 $Id$
-->

<project name="xins" default="all" basedir=".">

	<target name="-junit-task">
		<available classname="junit.framework.TestListener" property="junit.available" />
		<fail unless="junit.available" message="JUnit not available" />
		<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" />
	</target>

	<target name="-checkstyle-task">
		<available classname="com.puppycrawl.tools.checkstyle.CheckStyleTask" property="checkstyle.available">
			<classpath>
				<fileset dir="lib" includes="*.jar" />
			</classpath>
		</available>
		<fail unless="checkstyle.available" message="Checkstyle not available" />
		<taskdef name="checkstyle" classname="com.puppycrawl.tools.checkstyle.CheckStyleTask">
			<classpath>
				<fileset dir="lib" includes="*.jar" />
			</classpath>
		</taskdef>
	</target>

	<target name="-j2h-task">
		<available classname="j2h" property="j2h.available" />
		<fail unless="j2h.available" message="Java2HTML not available" />
		<taskdef name="java2html" classname="com.java2html.Java2HTMLTask"/>
	</target>

	<target name="-load-version">
		<property name="version.file" value=".version.properties" />
		<property file="${version.file}" />
		<condition property="version.isset">
			<and>
				<isset property="version.major" />
				<isset property="version.minor" />
				<isset property="version.prev.major" />
				<isset property="version.prev.minor" />
			</and>
		</condition>
		<fail unless="version.isset" message="Version must be set in file ${version.file}." />
		<property name="version.prev" value="${version.prev.major}.${version.prev.minor}" />
	</target>

	<target name="-determine-version-dev" depends="-load-version" if="version.suffix">
		<property name="version.real" value="${version.prev}" />
	</target>

	<target name="-determine-version-nondev" depends="-load-version" unless="version.suffix">
		<property name="version.real" value="${version}" />
	</target>

	<target name="-determine-version" depends="-determine-version-dev,-determine-version-nondev" />

	<target name="-load-sfproperties">
		<property name="sf.file" value="${user.home}/.sourceforge.properties" />
		<property file="${sf.file}" />
		<condition property="sf.isset">
			<and>
				<isset property="sf.user" />
				<isset property="sf.password" />
			</and>
		</condition>
	</target>

	<target name="-init-release" depends="-determine-version">
		<property name="javac.debug"         value="false" />
		<property name="javac.deprecation"   value="false" />
		<property name="version"             value="${version.major}.${version.minor}" />
	</target>

	<target name="-init" depends="-determine-version,-load-sfproperties">
		<!-- General project properties -->
		<property name="title"               value="XINS" />
		<property name="name"                value="${ant.project.name}" />
		<property name="version"             value="${version.major}.${version.minor}${version.suffix}" />
		<property name="package-basename"    value="${name}-${version}" />
		<property name="vendor"              value="Wanadoo Nederland B.V." />
		<property name="cvs.module"          value="${name}" />

		<!-- SourceForge-related properties -->
		<property name="sf.group"            value="71598" />
		<property name="sf.package"          value="71219" />

		<!-- Website-related properties -->
		<property name="www.user"            value="${sf.user}" />
		<property name="www.host"            value="${name}.sourceforge.net" />
		<property name="www.dir"             value="/home/groups/x/xi/xins/htdocs" />
		<property name="www.target"          value="${www.user}@${www.host}:${www.dir}" />
		<property name="www.url"             value="http://${www.host}/" />

		<!-- Java compiler-related properties -->
		<property name="javac.targetvm"      value="1.3" />
		<property name="javac.debug"         value="true"  />
		<property name="javac.deprecation"   value="true"  />
		<property name="javac.optimize"      value="true" />

		<!-- Javadoc-related properties -->
		<property name="javadoc.srcdir.j2se" value="${java.home}/src" />
		<property name="javadoc.srcdir.xins" value="build/src/java-common:build/src/java-server-framework:build/src/java-client-framework" />
	</target>

	<target name="version" depends="-init">
		<echo message="Java ${java.version}" />
		<echo message="${ant.version}" />
		<echo message="${title} ${version} (real: ${version.real})" />
	</target>

	<target name="clean" description="Removes all generated files">
		<delete dir="build" />
	</target>

	<target name="java-common" depends="-init, logdoc-java-common" description="Compiles the XINS/Java common code">
		<antcall target="-build-framework">
			<param name="src.side" value="common" />
			<param name="side"     value="common" />
			<param name="type"     value="Common" />
		</antcall>
	</target>

	<target name="java-client" depends="java-common, logdoc-java-client" description="Compiles the XINS/Java client framework">
		<path id="path.common">
			<pathelement path="build/classes/java-common" />
		</path>
		<antcall target="-build-framework" inheritRefs="true">
			<param name="src.side" value="client-framework" />
			<param name="side"     value="client"           />
			<param name="type"     value="Client Framework" />
		</antcall>
	</target>

	<target name="java-server" depends="java-common, logdoc-java-server" description="Compiles the XINS/Java server framework">
		<mkdir dir="build/src/java-server-framework" />
		<style in="src/xml/default_resultcodes.xml"
		       out="build/src/java-server-framework/org/xins/server/DefaultResultCodes.java"
		       style="src/xslt/java-server-framework/default_resultcodes_to_java.xslt" />
		<path id="path.common">
			<pathelement path="build/classes/java-common" />
		</path>
		<antcall target="-build-framework" inheritRefs="true">
			<param name="src.side" value="server-framework" />
			<param name="side"     value="server"           />
			<param name="type"     value="Server Framework" />
		</antcall>
	</target>

	<target name="-build-framework">
		<mkdir dir="build/src/java-${src.side}" />
		<copy todir="build/src/java-${src.side}">
			<fileset dir="src/java-${src.side}" includes="**/*.java,**/package.html" />
		</copy>
		<replace dir="build/src/java-${src.side}" token="%%VERSION%%" value="${version}" />
		<copy todir="build/src/java-${src.side}/org/xins/${side}">
			<fileset dir="build/logdoc/${side}/java" includes="**/*.java" />
		</copy>
		<mkdir dir="build/classes/java-${side}" />
		<javac
		srcdir="build/src/java-${src.side}"
		destdir="build/classes/java-${side}"
		debug="${javac.debug}"
		deprecation="${javac.deprecation}"
		optimize="${javac.optimize}"
		target="${javac.targetvm}">
			<classpath>
				<path refid="path.common" />
				<fileset dir="lib"             includes="*.jar" />
			</classpath>
		</javac>
		<manifest file="build/MANIFEST.MF">
			<section name="xins-${side}">
				<attribute name="Specification-Title"    value="XINS/Java ${type}" />
				<attribute name="Specification-Version"  value="${version}" />
				<attribute name="Specification-Vendor"   value="${vendor}"  />
				<attribute name="Implementation-Title"   value="XINS/Java ${type}" />
				<attribute name="Implementation-Version" value="${version}" />
				<attribute name="Implementation-Vendor"  value="${vendor}"  />
			</section>
		</manifest>
		<jar
		jarfile="build/xins-${side}.jar"
		basedir="build/classes/java-${side}"
		manifest="build/MANIFEST.MF" />
	</target>

	<target name="java" depends="java-common,java-client,java-server" description="Compiles the XINS/Java java code (common, server and client)"/>

	<target name="-prepare-logdoc-server">
		<antcall target="-prepare-logdoc">
			<param name="side" value="server"/>
		</antcall>
	</target>

	<target name="-prepare-logdoc-client">
		<antcall target="-prepare-logdoc">
			<param name="side" value="client"/>
		</antcall>
	</target>

	<target name="-prepare-logdoc-common">
		<antcall target="-prepare-logdoc">
			<param name="side" value="common"/>
		</antcall>
	</target>

	<target name="-prepare-logdoc" depends="-init">
		<!-- If not defined in the antcall, the default is the side -->
		<property name="package" value="${side}" />
		<style
		in="src/logdoc/${side}/log.xml"
		out="build/logdoc/${side}/build.xml"
		style="src/xslt/logdoc/log_to_build.xslt">
			<param name="xins_home"       expression="../../.."                    />
			<param name="logdoc_xslt_dir" expression="../../../src/xslt/logdoc"    />
			<param name="sourcedir"       expression="../../../src/logdoc/${side}" />
			<param name="html_destdir"    expression="html"                        />
			<param name="java_destdir"    expression="java"                        />
			<param name="package_name"    expression="org.xins.${package}"         />
		</style>
	</target>

	<target name="logdoc-html-server" depends="-prepare-logdoc-server">
		<antcall target="-logdoc-html">
			<param name="side" value="server"/>
		</antcall>
	</target>

	<target name="logdoc-html-client" depends="-prepare-logdoc-client">
		<antcall target="-logdoc-html">
			<param name="side" value="client"/>
		</antcall>
	</target>

	<target name="logdoc-html-common" depends="-prepare-logdoc-common">
		<antcall target="-logdoc-html">
			<param name="side" value="common"/>
		</antcall>
	</target>

	<target name="logdoc-html" depends="-init, logdoc-html-server, logdoc-html-client, logdoc-html-common">
		<copy todir="docs/logdoc/server">
			<fileset dir="build/logdoc/server/html" />
		</copy>
		<copy todir="docs/logdoc/client">
			<fileset dir="build/logdoc/client/html" />
		</copy>
		<copy todir="docs/logdoc/common">
			<fileset dir="build/logdoc/common/html" />
		</copy>
	</target>

	<target name="-logdoc-html">
		<copy file="src/css/logdoc/style.css" todir="build/logdoc/${side}/html" />
		<ant dir="build/logdoc/${side}" target="html" inheritall="false" />
	</target>

	<target name="upload-logdoc" depends="logdoc-html">
		<echo message="Uploading ${title} ${version} logdoc report to ${www.host}" />
		<echo level="verbose" message="Creating directory ${www.dir}/logdoc/${version}/server on ${www.host}" />
		<sshexec host="${www.host}" username="${sf.user}" password="${sf.password}" trust="true"
		         command="mkdir -p ${www.dir}/logdoc/${version}/server" />
		<echo level="verbose" message="Copying files to directory ${www.dir}/logdoc/${version}/server on ${www.host}" />
		<scp todir="${www.target}/logdoc/${version}/server"
		     password="${sf.password}" trust="true">
			<fileset dir="build/logdoc/server/html" />
		</scp>
		<echo level="verbose" message="Creating directory ${www.dir}/logdoc/${version}/client on ${www.host}" />
		<sshexec host="${www.host}" username="${sf.user}" password="${sf.password}" trust="true"
		         command="mkdir -p ${www.dir}/logdoc/${version}/client" />
		<echo level="verbose" message="Copying files to directory ${www.dir}/logdoc/${version}/client on ${www.host}" />
		<scp todir="${www.target}/logdoc/${version}/client"
		     password="${sf.password}" trust="true">
			<fileset dir="build/logdoc/client/html" />
		</scp>
		<echo level="verbose" message="Creating directory ${www.dir}/logdoc/${version}/common on ${www.host}" />
		<sshexec host="${www.host}" username="${sf.user}" password="${sf.password}" trust="true"
		         command="mkdir -p ${www.dir}/logdoc/${version}/common" />
		<echo level="verbose" message="Copying files to directory ${www.dir}/logdoc/${version}/common on ${www.host}" />
		<scp todir="${www.target}/logdoc/${version}/common"
		     password="${sf.password}" trust="true">
			<fileset dir="build/logdoc/common/html" />
		</scp>
		<sshexec host="${www.host}" username="${sf.user}" password="${sf.password}" trust="true"
		         command="rm ${www.dir}/logdoc/latest" />
		<sshexec host="${www.host}" username="${sf.user}" password="${sf.password}" trust="true"
		         command="ln -s ${www.dir}/logdoc/${version} ${www.dir}/logdoc/latest" />
	</target>

	<target name="logdoc-java-server" depends="-prepare-logdoc-server">
		<antcall target="-logdoc-java">
			<param name="side" value="server"/>
		</antcall>
	</target>

	<target name="logdoc-java-client" depends="-prepare-logdoc-client">
		<antcall target="-logdoc-java">
			<param name="side" value="client"/>
		</antcall>
	</target>

	<target name="logdoc-java-common" depends="-prepare-logdoc-common">
		<ant dir="build/logdoc/common" target="java" inheritall="false">
			<property name="accesslevel" value="public" />
		</ant>
	</target>

	<target name="-logdoc-java">
		<ant dir="build/logdoc/${side}" target="java" inheritall="false">
			<property name="accesslevel" value="package" />
		</ant>
	</target>

	<target name="classes-tests" depends="-junit-task,java" description="Compiles the test cases">
		<mkdir dir="build/classes/tests" />
		<javac destdir="build/classes/tests" includes="**/*.java" debug="true" deprecation="false">
			<src path="src/tests" />
			<classpath>
				<pathelement location="build/xins-common.jar" />
				<pathelement location="build/xins-server.jar" />
				<pathelement location="build/xins-client.jar" />
				<fileset dir="lib" includes="*.jar" />
			</classpath>
		</javac>
	</target>

	<target name="do-tests" depends="classes-tests" description="Runs the unit tests">
		<mkdir dir="build/testresults" />
		<mkdir dir="build/testresults/xml" />
		<junit printsummary="true" failureproperty="tests.failed">
			<formatter type="xml" />
			<test name="org.xins.tests.AllTests" todir="build/testresults/xml" outfile="testresults"/>
			<classpath>
				<pathelement location="build/classes/tests" />
				<pathelement location="build/xins-common.jar" />
				<pathelement location="build/xins-server.jar" />
				<pathelement location="build/xins-client.jar" />
				<fileset dir="lib" includes="*.jar" />
			</classpath>
		</junit>
	</target>

	<target name="testreports" description="Generates the unit test reports">
		<mkdir dir="build/testresults/html" />
		<style
		in="build/testresults/xml/testresults.xml"
		out="build/testresults/html/index.html"
		style="src/xslt/tests/index.xslt" />
		<copy
		file="src/css/tests/stylesheet.css"
		todir="build/testresults/html" />
	</target>

	<target name="tests" depends="do-tests,testreports" description="Runs the unit tests and generates reports" />

	<target name="j2h" depends="-j2h-task,java" description="Generates pretty-printed Java code as HTML">
		<mkdir dir="build/j2h" />
		<java2html title="Source X-ref for ${title} ${version}" destination="build/j2h" footer="no">
			<fileset dir="build/src/java-common">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="build/src/java-server-framework">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="build/src/java-client-framework">
				<include name="**/*.java" />
			</fileset>
		</java2html>
		<copy file="src/j2h/front.html" todir="build/j2h" overwrite="true" />
		<copy file="src/css/j2h/style.css" tofile="build/j2h/stylesheet.css" overwrite="true" />
	</target>

	<target name="-jdksrc-avail">
		<available file="${javadoc.srcdir.j2se}" type="dir" property="jdksrc.available" />
	</target>

	<target name="-javadoc-sourcepath-nojdksrc" depends="-init,-jdksrc-avail" unless="jdksrc.available">
		<property name="javadoc.sourcepath" value="${javadoc.srcdir.xins}" />
		<echo level="verbose" message="JDK source code not available." />
	</target>

	<target name="-javadoc-sourcepath-jdksrc" depends="-jdksrc-avail" if="jdksrc.available">
		<property name="javadoc.sourcepath" value="${javadoc.srcdir.xins}:${javadoc.srcdir.j2se}" />
		<echo level="verbose" message="JDK source code available." />
	</target>

	<target name="-javadoc-sourcepath" depends="-javadoc-sourcepath-nojdksrc,-javadoc-sourcepath-jdksrc" />

	<target name="-do-javadoc" depends="java,-javadoc-sourcepath">
		<mkdir dir="${javadoc.destdir}" />
		<javadoc
		sourcepath="${javadoc.sourcepath}"
		destdir="${javadoc.destdir}"
		version="yes"
		use="yes"
		author="yes"
		private="${javadoc.private}"
		windowtitle="${javadoc.title}"
		doctitle="${javadoc.title}"
		bottom="${javadoc.footer}">
			<packageset dir="build/src/java-common" />
			<packageset dir="build/src/java-server-framework" />
			<packageset dir="build/src/java-client-framework" />
			<group title="XINS/Java Common Library"   packages="org.xins.logdoc*,org.xins.common*" />
			<group title="XINS/Java Server Framework" packages="org.xins.server*" />
			<group title="XINS/Java Client Framework" packages="org.xins.client*" />
			<classpath>
				<fileset dir="lib"             includes="*.jar" />
				<fileset dir="${ant.home}/lib" includes="*.jar" />
			</classpath>
			<link offline="true" packagelistloc="src/package-lists/servlet/"            href="http://java.sun.com/products/servlet/2.3/javadoc/"         />
			<link offline="true" packagelistloc="src/package-lists/j2se/"               href="http://java.sun.com/j2se/1.3/docs/api"                     />
			<link offline="true" packagelistloc="src/package-lists/log4j/"              href="http://jakarta.apache.org/log4j/docs/api/"                 />
			<link offline="true" packagelistloc="src/package-lists/commons-logging/"    href="http://jakarta.apache.org/commons/logging/api/"            />
			<link offline="true" packagelistloc="src/package-lists/commons-httpclient/" href="http://jakarta.apache.org/commons/httpclient/apidocs/"     />
			<link offline="true" packagelistloc="src/package-lists/oro/"                href="http://jakarta.apache.org/oro/api/"                        />
			<link offline="true" packagelistloc="src/package-lists/xmlenc/"             href="http://xmlenc.sourceforge.net/javadoc/0.43/"               />
			<link offline="true" packagelistloc="src/package-lists/jdom/"               href="http://www.jdom.org/docs/apidocs/"                         />
			<link offline="true" packagelistloc="src/package-lists/ant/"                href="http://nagoya.apache.org/gump/javadoc/ant/build/javadocs/" />
		</javadoc>
		<copy
		file="src/css/javadoc/style.css"
		tofile="${javadoc.destdir}/stylesheet.css"
		overwrite="true" />
	</target>

	<target name="javadoc" depends="javadoc-public,javadoc-private" description="Generates all Javadoc API documentation" />

	<target name="javadoc-public" depends="-init" description="Generates public Javadoc API documentation">
		<antcall target="-do-javadoc">
			<param name="javadoc.private" value="no" />
			<param name="javadoc.destdir" value="docs/javadoc" />
			<param name="javadoc.title"   value="${title} ${version}" />
			<param name="javadoc.footer"  value="See &lt;a target=&quot;_top&quot; href='${www.url}'&gt;${www.url}&lt;/a&gt;." />
		</antcall>
	</target>

	<target name="javadoc-private" depends="-init" description="Generates private Javadoc API documentation">
		<antcall target="-do-javadoc">
			<param name="javadoc.private" value="yes" />
			<param name="javadoc.destdir" value="docs/javadoc-private" />
			<param name="javadoc.title"   value="${title} ${version}" />
			<param name="javadoc.footer"  value="See &lt;a target=&quot;_top&quot; href='${www.url}'&gt;${www.url}&lt;/a&gt;.&lt;br /&gt;This Javadoc API documentation set contains private and package private members as well." />
		</antcall>
	</target>

	<target name="upload-javadoc" depends="-init,javadoc,javadoc-private" description="Uploads the Javadoc documentation to the webserver">
		<echo message="Uploading ${title} ${version} API docs to ${www.host}" />

		<echo level="verbose" message="Creating directory ${www.dir}/javadoc/${version} on ${www.host}" />
		<sshexec host="${www.host}" username="${sf.user}" password="${sf.password}" trust="true"
		         command="mkdir -p ${www.dir}/javadoc/${version}" />
		<echo level="verbose" message="Copying files to ${www.dir}/javadoc/${version} on ${www.host}" />
		<scp todir="${www.target}/javadoc/${version}"
		     password="${sf.password}" trust="true">
			<fileset dir="build/javadoc" />
		</scp>
		<sshexec host="${www.host}" username="${sf.user}" password="${sf.password}" trust="true"
		         command="rm ${www.dir}/javadoc/latest" />
		<sshexec host="${www.host}" username="${sf.user}" password="${sf.password}" trust="true"
		         command="ln -s ${www.dir}/javadoc/${version} ${www.dir}/javadoc/latest" />

		<echo level="verbose" message="Creating directory ${www.dir}/javadoc-private/${version} on ${www.host}" />
		<sshexec host="${www.host}" username="${sf.user}" password="${sf.password}" trust="true"
		         command="mkdir -p ${www.dir}/javadoc-private/${version}" />
		<echo level="verbose" message="Copying files to ${www.dir}/javadoc-private/${version} on ${www.host}" />
		<scp todir="${www.target}/javadoc-private/${version}"
		     password="${sf.password}" trust="true">
			<fileset dir="build/javadoc-private" />
		</scp>
		<sshexec host="${www.host}" username="${sf.user}" password="${sf.password}" trust="true"
		         command="rm ${www.dir}/javadoc-private/latest" />
		<sshexec host="${www.host}" username="${sf.user}" password="${sf.password}" trust="true"
		         command="ln -s ${www.dir}/javadoc-private/${version} ${www.dir}/javadoc-private/latest" />
	</target>

	<target name="-prepare-checkstyle" depends="-checkstyle-task" />

	<target name="checkstyle-text" depends="-prepare-checkstyle" description="Prints checkstyle errors">
		<checkstyle config="src/config/checkstyle/config.xml" failOnViolation="false">
			<fileset dir="src/java-common"           includes="**/*.java" />
			<fileset dir="src/java-server-framework" includes="**/*.java" />
			<fileset dir="src/java-client-framework" includes="**/*.java" />
			<formatter type="plain" />
		</checkstyle>
	</target>

	<target name="checkstyle-xml" depends="-prepare-checkstyle" description="Checks the style of the source code">
		<mkdir dir="build/checkstyle" />
		<mkdir dir="build/checkstyle/xml" />
		<checkstyle config="src/config/checkstyle/config.xml" failOnViolation="false">
			<fileset dir="src/java-common"           includes="**/*.java" />
			<fileset dir="src/java-server-framework" includes="**/*.java" />
			<fileset dir="src/java-client-framework" includes="**/*.java" />
			<formatter type="xml" tofile="build/checkstyle/xml/results.xml"/>
		</checkstyle>
	</target>

	<target name="checkstyle-report" description="Generates the checkstyle report">
		<mkdir dir="build/checkstyle/html" />
		<style
		in="build/checkstyle/xml/results.xml"
		out="build/checkstyle/html/index.html"
		style="src/xslt/checkstyle/index.xslt" />
		<copy
		file="src/css/checkstyle/style.css"
		tofile="build/checkstyle/html/stylesheet.css" />
	</target>

	<target name="checkstyle" depends="checkstyle-xml,checkstyle-report" description="Checks the style of the source code" />

	<target name="upload-checkstyle" depends="-init,checkstyle">
		<echo message="Uploading ${title} ${version} Checkstyle report to ${www.host}" />
		<echo level="verbose" message="Creating directory ${www.dir}/checkstyle/${version} on ${www.host}" />
		<sshexec host="${www.host}" username="${sf.user}" password="${sf.password}" trust="true"
		         command="mkdir -p ${www.dir}/checkstyle/${version}" />
		<echo level="verbose" message="Copying files to directory ${www.dir}/checkstyle/${version} on ${www.host}" />
		<scp todir="${www.target}/checkstyle/${version}"
		     password="${sf.password}" trust="true">
			<fileset dir="build/checkstyle/html" />
		</scp>
		<sshexec host="${www.host}" username="${sf.user}" password="${sf.password}" trust="true"
		         command="rm ${www.dir}/checkstyle/latest" />
		<sshexec host="${www.host}" username="${sf.user}" password="${sf.password}" trust="true"
		         command="ln -s ${www.dir}/checkstyle/${version} ${www.dir}/checkstyle/latest" />
	</target>

	<target name="upload-j2h" depends="-init,j2h">
		<echo message="Uploading ${title} ${version} Java2HTML documentation to ${www.host}" />
		<echo level="verbose" message="Creating directory ${www.dir}/j2h/${version} on ${www.host}" />
		<sshexec host="${www.host}" username="${sf.user}" password="${sf.password}" trust="true"
		         command="mkdir -p ${www.dir}/j2h/${version}" />
		<echo level="verbose" message="Copying files to directory ${www.dir}/j2h/${version} on ${www.host}" />
		<scp todir="${www.target}/j2h/${version}"
		     password="${sf.password}" trust="true">
			<fileset dir="build/j2h" />
		</scp>
		<sshexec host="${www.host}" username="${sf.user}" password="${sf.password}" trust="true"
		         command="rm ${www.dir}/j2h/latest" />
		<sshexec host="${www.host}" username="${sf.user}" password="${sf.password}" trust="true"
		         command="ln -s ${www.dir}/j2h/${version} ${www.dir}/j2h/latest" />
	</target>

	<target name="copy-docs-demo" depends="-init">
		<!-- Copy the examples in the release -->
		<mkdir dir="demo" />
		<copy todir="demo">
			<fileset dir="../${name}-examples">
				<include name="build.xml" />
				<include name="xins.properties" />
				<include name="capis/**/*.xml" />
				<include name="capis/**/*.java" />
				<include name="xins-project/**/*.xml" />
				<include name="xins-project/**/*.fnc" />
				<include name="xins-project/**/*.typ" />
				<include name="xins-project/**/*.rcd" />
				<include name="xins-project/**/*.java" />
				<exclude name="build" />
			</fileset>
		</copy>
		<!-- Create and copy the documentation -->
		<ant dir="../${name}-docs" target="guide" inheritall="false">
			<property name="version" value="${version.major}.${version.minor}" />
		</ant>
		<mkdir dir="docs" />
		<copy todir="docs">
			<fileset dir="../${name}-docs/build/guide">
				<exclude name="*.fo" />
				<exclude name="XINSGuide.html" />
			</fileset>
		</copy>
	</target>

	<target name="package" depends="javadoc,java-server,java-client,html-logdoc,copy-docs-demo" description="Builds a complete distribution archive">
		<!-- convert all text files to Unix LF -->
		<patternset id="release.text.files">
			<include name="src/ant/**/*"                   />
			<include name="src/css/javadoc/*"              />
			<include name="src/css/logdoc/*"               />
			<include name="src/css/specdocs/*"             />
			<include name="src/dtd/**/*"                   />
			<include name="src/java-client-framework/**/*" />
			<include name="src/java-common/**/*"           />
			<include name="src/java-server-framework/**/*" />
			<include name="src/logdoc/client/*"            />
			<include name="src/logdoc/common/*"            />
			<include name="src/logdoc/server/*"            />
			<include name="src/package-lists/**/*"         />
			<include name="src/xml/**/*"                   />
			<include name="src/xslt/**/*"                  />
			<include name="lib/*.LICENSE"                  />
			<include name="docs/**/*.html"                 />
			<include name="docs/**/*.css"                  />
			<include name="demo/**/*"                      />
			<include name="build.xml"                      />
			<include name=".version.properties"            />
			<include name="CHANGES"                        />
			<include name="COPYRIGHT"                      />
			<include name="README"                         />
			<include name="TODO"                           />
			<exclude name="src/xslt/checkstyle/*"          />
			<exclude name="src/xslt/tests/*"               />
		</patternset>
		<copy todir="build" includeEmptyDirs="false">
			<fileset dir=".">
				<patternset refid="release.text.files" />
				<include name="src/bin/*" />
			</fileset>
		</copy>
		<fixcrlf srcdir="build" eol="unix" eof="remove">
			<patternset refid="release.text.files" />
			<include name="src/bin/xins" />
		</fixcrlf>
		<fixcrlf srcdir="build/src/bin" eol="dos" eof="asis">
			<include name="xins.bat" />
		</fixcrlf>

		<!-- Tar the release file -->
		<tar tarfile="build/${package-basename}.tar">
			<tarfileset
			dir="${basedir}"
			prefix="${name}-${version}"
			mode="644">
				<include name="build/javadoc/**/*"             />
				<include name="build/*.jar"                    />
				<include name="demo/**/*"                      />
				<include name="docs/**/*"                      />
				<include name="lib/apache.LICENSE"             />
				<include name="lib/commons-httpclient.*"       />
				<include name="lib/commons-logging.*"          />
				<include name="lib/jakarta-oro.*"              />
				<include name="lib/jdom.*"                     />
				<include name="lib/log4j.*"                    />
				<include name="lib/xmlenc.*"                   />
				<include name="lib/servlet.jar"                />
			</tarfileset>
			<tarfileset
			dir="${basedir}/build"
			prefix="${name}-${version}"
			mode="644">
				<patternset refid="release.text.files"/>
				<include name="src/bin/xins.bat" />
			</tarfileset>
			<tarfileset
			dir="${basedir}/build"
			prefix="${name}-${version}"
			mode="755">
				<include name="src/bin/xins" />
			</tarfileset>
		</tar>
		<gzip src="build/${package-basename}.tar" zipfile="build/${package-basename}.tgz" />
		<delete file="build/${package-basename}.tar" />
	</target>

	<target name="sfaddrelease" depends="java-common" description="Adds a release to the SourceForge package [BROKEN]">
		<taskdef name="sfaddrelease" classname="org.xins.common.ant.sourceforge.AddReleaseTask">
			<classpath>
				<fileset dir="build"   includes="xins-common.jar"                        />
				<fileset dir="lib"     includes="commons-net.jar commons-httpclient.jar" />
			</classpath>
		</taskdef>

		<sfaddrelease
		file="build/${name}-${version}.tgz"
		user="${sf.user}"
		password="${sf.password}"
		group="${sf.group}"
		package="${sf.package}"
		release="${version}"
		keystore="src/certificates/sourceforge.net.cert" />
	</target>

	<target name="do-upload-package" depends="-init" description="Uploads the package to the web server">
		<echo message="Uploading ${title} ${version} package to ${www.host}" />
		<scp file="build/${package-basename}.tgz"
		     todir="${www.target}/"
		     password="${sf.password}" trust="true" />
		<ftp server="upload.sf.net" remotedir="incoming"
		     userid="anonymous" password="${sf.user}@users.sourceforge.net">
			<fileset dir="build" includes="${package-basename}.tgz" />
		</ftp>
	</target>

	<target name="upload-package" depends="package,do-upload-package" description="Creates and uploads package to the web server" />

	<target name="-check-version-suffix" depends="-init">
		<condition property="version.suffix.set">
			<equals arg1="${version.suffix}" arg2="-dev" />
		</condition>
	</target>

	<target name="-check-release-version" depends="-check-version-suffix" unless="force">
		<fail unless="version.suffix.set" message="Version suffix is not set to -dev. If you do want to release, please set 'force'." />
		<propertyfile file="${version.file}" comment=" Version number for XINS.&#10;">
			<entry key="version.prev.minor" type="int" operation="+" value="1" />
			<entry key="version.suffix" operation="=" value="" />
		</propertyfile>
		<cvs cvsRoot=":ext:${sf.user}@cvs.sourceforge.net:/cvsroot/xins"
		     failonerror="true">
			<commandline>
				<argument value="commit" />
				<argument value="-m" />
				<argument value="Unmarked -dev." />
				<argument value="${version.file}" />
			</commandline>
		</cvs>
	</target>

	<target name="-nodiffs-check" depends="clean">
		<tempfile destdir="${java.io.tmpdir}" prefix="${name}-release-diff." property="diff-file" suffix=".diff" />
		<cvs cvsRoot=":ext:${sf.user}@cvs.sourceforge.net:/cvsroot/xins"
		     failonerror="true" command="diff" output="${diff-file}" quiet="true" />
		<loadfile srcfile="${diff-file}" property="diff-contents" />
		<property name="diff-contents" value="" />
		<echo message="Diff contents: &quot;${diff-contents}&quot;." />
		<condition property="diff-contents-empty">
			<equals arg1="${diff-contents}" arg2="" />
		</condition>
		<fail unless="diff-contents-empty" message="There are differences with the CVS repository (result of 'cvs diff' is non-empty). See: ${diff-file}" />
		<delete file="${diff-file}" />
	</target>

	<target
	name="-pre-release-checks"
	depends="-init-release,-check-release-version,-nodiffs-check,tests">
		<fail if="tests.failed" message="All tests should run" />
	</target>

	<target
	name="-prepare-release"
	depends="-pre-release-checks">
		<property name="tagname" value="RELEASE_${version.major}_${version.minor}" />
		<echo message="Tagging ${tagname}" />
		<cvs cvsRoot=":ext:${sf.user}@cvs.sourceforge.net:/cvsroot/xins"
		     failonerror="true" command="tag -F ${tagname}" quiet="true" />
	</target>

	<target name="upload-changes" depends="-init">
		<echo message="Uploading ${title} ${version} change log to ${www.host}" />
		<copy file="CHANGES" tofile="build/changes-${version}.txt" />
		<scp file="build/changes-${version}.txt"
		     todir="${www.target}"
		     password="${sf.password}" trust="true" />
	</target>

	<target name="upload-homepage" depends="-init">
		<property name="docs.dir" value="../${name}-docs/" />
		<available property="docs.avail" file="${docs.dir}/build.xml" type="file" />
		<fail unless="docs.avail" message="Unable to find build.xml in ${docs.dir}. Unable to upload homepage." />
		<ant dir="../${name}-docs" target="upload-homepage" inheritall="false">
			<property name="version" value="${version.major}.${version.minor}" />
			<property name="sf.user" value="${sf.user}" />
			<property name="sf.password" value="${sf.password}" />
		</ant>
	</target>

	<target
	name="release"
	depends="-junit-task,-checkstyle-task,-j2h-task,-prepare-release,upload-changes,upload-package,upload-javadoc,upload-checkstyle,upload-j2h,upload-logdoc"
	description="Performs a release">
		<propertyfile file="${version.file}" comment=" Version number for XINS.&#10;">
			<entry key="version.minor"      type="int" operation="+" value="1"      />
			<entry key="version.suffix"                operation="=" value="-dev"   />
		</propertyfile>
		<cvs cvsRoot=":ext:${sf.user}@cvs.sourceforge.net:/cvsroot/xins" failonerror="true">
			<commandline>
				<argument value="commit" />
				<argument value="-m" />
				<argument value="Bumped version, marked -dev." />
				<argument value="${version.file}" />
			</commandline>
		</cvs>
		<antcall target="upload-homepage" />
		<delete>
			<fileset dir="build/src" />
		</delete>
	</target>

	<target name="all" depends="java-server,javadoc" description="Generates everything" />
</project>
