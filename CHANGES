This file contains a detailed explanation of the changes between individual
versions of XINS.

$Id$

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.4.0 ALPHA 2:

* XINS/Java Common Library:
  - The HTTPServiceCaller logs the URL as it is sent to the server.
  - Implemented a web server with the HTTP Servlet container in order to
    return the web pages included in the WAR file.
  - Adapted ServletRequestPropertyReader to decode the URL parameters
    correctly with Unicode characters.
  - URL decoding will now fails if you try to decode a character that should
    have been encoded.
  - HTTPServiceCaller sends parameters encoded using the URLEncoding class.
  - Added a method to provide the possibility to set a prefix when logging the
    parameters.

* XINS/Java Server Framework:
  - Fixed SF.net bug #1382394: CustomCallingConvention ignored. This bug was
	 introduced in XINS 1.4.0-alpha1.
  - Fixed SF.net bug #1380246: XSLT cache not used in XSLT calling convention.
  - Fixed SF.net bug #1382438: XMLCallingConvention does not match the 
    specifications.
  - The parsing of the parameters is done in the calling convention itself
    in order to handle the Unicode characters correctly.

* Generation of server-side Java code:
  - The generation of the result code doesn't check for the result code
    uniqueness anymore as the value attribute of the result code is 
    deprecated since XINS 1.0.0.

* Generation of client-side Java code:
  - The generation of the result code doesn't check for the result code
    uniqueness anymore as the value attribute of the result code is 
    deprecated since XINS 1.0.0.

* Generated tests:
  - If the servlet.port property is set, then the Servlet container will 
    start on the specified port.
  - The error returned if the tests failed to start, is now shown in the HTML.

* Generated build file:
  - Avoid to have a double slash in the endpoint location in the generated 
    WSDL file.
  - Added Open Document and WSDL to the Zip file created by the client target.

* XSLT:
  - Renamed hungarianPropertyUpper to hungarianUpper and
    hungarianPropertyLower to hungarianLower.
  - Removed unused template "hungarian".

* Libraries:
  - Upgraded Log4J from 1.2.12 to 1.2.13.
  - Upgraded Jakarta Commons HttpClient from 3.0-rc4 to 3.0 (final).
  - Upgraded xmlenc from 0.51 to 0.52.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.4.0 ALPHA 1:

NOTE: This release is based on XINS 1.3.0-rc2.

* XINS/Java Common Library:
  - Fixed so-called 'dead local stores', reported by FindBugs, in classes
    HTTPServiceCaller and ElementParser.
  - Marked the following non-public inner classes as static:
    ChainedMap$ChainedSet, ChainedMap$EntrySet and ElementParser$Handler.
  - Removed unused field _withCentury from class DateConverter.
  - Implemented RFE #1359749: Added support for Unicode in URLEncoding.
    . The NonASCIIException is no longer thrown by encode() and decode() and
      is marked as depreceated.
    . Marked the WhislEncoding as deprecated. URLEnconding should be used
      instead.
  - Modified PropertyReaderUtils to use the URLEncoding instead of the 
    WhislEncoding.
  - Fixed a minor bug in the InitializationException class, method
    createMessage. If the message for the cause exception is null, then an
    IllegalArgumentException would be triggered in FastStringBuffer, method
    append(String).
  - Fixed the Javadoc documentation for the logIgnoredException methods in
    class Utils.
  - Implemented RFE#1359786: Added getUniqueChildElement() method to 
    org.xins.common.xml.Element.

* XINS/Java Server Framework:
  - Fixed two issues in the AccessRuleFile class:
    - The interval was never stored, was lost during re-initialization and the
      file was consequently never re-read again.
    - The object was never internally marked as disposed.
  - Implemented SF.net RFE #1359962: Automatic CallingConvention detection:
    . Added log messages 3508-3511.
    . Implemented an algorithm in CallingConventionManager to detect the most
      appropriate matching calling convention for a request that does not
      specify any.
    . Added a parseXMLRequest method to class CallingConvention that only
      accepts an HttpServletRequest (and not also a boolean that indicates
      whether the content type should be checked). The content type will
      always be cheched. This method is added for convenience and to avoid
      confusion by potential CustomCallingConvention implementors. The
      CustomCallingConvention class documentation has been updated.
    . Added the package-private method 'matchesRequest(HttpServletRequest)'
      and a delegate for it, the protected method
      'matches(HttpServletRequest)' to class CallingConvention. These methods
      are used to determine whether the calling convention is expected to be
      able to handle the specified request successfully.
    . Changed some constants in the XSLTCallingConvention from private to
      package-private.
  - Added caching to the parseXMLRequest methods in class CallingConvention.
    Added DEBUG-level log messages 3512-3515 so it can be traced how this
    cache behaves.
  - Made the constructors of classes SOAPCallingConvention and
    XMLRPCCallingConvention throw an IllegalArgumentException if the API
    argument is null.
  - Marked XSLTCallingConvention$URIResolver as a static inner class.
  - Applied some minor refactorings to several classes.
  - Modified FormattedParameters to use the URLEncoding instead of the 
    WhislEncoding.

* Logdoc:
  - Fixed SF.net bug #1351055: Incorrect code generated for exception message.
  - Minor refactoring in class LogCentral.
  - Changed the private AbstractLog$CustomLevel class to final.
  - Implemented the toString() method on the AbstractLog$Controller class.
  - Printing error message to System.err if a locale is not supported by one
    of the Logdoc-generated Log classes
  - Fixed Bug #1374150: Multiple Logdoc with multiple implementations 
    does not work.
  - Implemented RFE #1359758: Log the request with URL.
  - Implemented RFE #1359772: Added the possibility to write the stack trace
    at the same logging level as the message.

* Calling convention requirements definitions:
  - Added a format description of the XINS standard calling convention in a
    new src/xml/cc-spec/xins-std/cc-spec.xml file.

* Generatation of specdocs:
  - Moved header.xslt and footer.xslt from src/xslt to src/xslt/specdocs.
  - Started work on SF.net RFE #1345859 ("Document specification/example
    interpretation rules"): Added 'Help' page, with link in header. The page
    contains a list of the requirements for the XINS standard calling
    convention (from the cc-spec.xml file).
  - Changed the CSS so that thin borders are now 1px instead of 1pt. That
	 fixes a minor visual glitch.
  - Implemented RFE #1189392: Generate Logdoc HTML for API.

* Generation of server-side Java code:
  - Implemented RFE #1359780: The modifier of the get methods of the generated
    RuntimeProperties has changed from package only to public.
  - Added support for hyphens and dots in the parameter names, attribute names
    and element names.
  - Adapted the code generated for checking the parameters in order to avoid
    variable name conflict when the same element is used inside other 
    element at different XML levels.

* Generation of client-side Java code:
  - Improved the generation of the CAPI [Function]Request classes:
    . Fixed SF.net bug #1362875: Overriding Request input value with empty
      string ignored.
    . Implemented SF.net RFE #1359740: Add get methods for CAPI Request
      objects.
    . Implemented SF.net RFE #1362836: [Type].toString is called twice in CAPI
      Request set methods.
  - Added support for hyphens and dots in the parameter names, attribute names
    and element names.
  - Adapted the code generated for checking the parameters in order to avoid
    variable name conflict when the same element is used inside other 
    element at different XML levels.

* Generated JUnit test:
  - Implemented RFE #1359778: Added if the build properties test.start.server 
    is set to true the test target will also start the API Servlet.

* Generated test forms:
  - Implemented RFE #1359804: A textarea is used to enter the data section 
    value.

* Generation of Open Document Format:
  - Started the implementation of RFE #1189420: Generate specdocs in 
    OpenDocument format. New xins command 'opendoc' added.

* Generation of the WAR file:
  - Implemented RFE #1182932: Set bootstrap properties in impl.xml.
  - Implemented RFE #1359742: Add html/js files to the generated WAR file.

* XSLT:
  - Implemented RFE #1359799: XSLT improved by passing nodes instead of
    file location.
  - Parameters not used are not passed to the templates anymore.
  - Removed unused included templates in some templates.

* DTD:
  - Copied all 1.3 DTDs to 1.4 DTDs.
  - Introduced the 1.4 DTDs, where appropriate.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.3.0 FINAL:

* Logdoc:
  - Fixed SF.net bug #1351055: Incorrect code generated for exception message.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.3.0 RELEASE CANDIDATE 2:

* XINS/Java Common Library:
  - Fixed SF.net bug #1343520: French translation for log message 1308 is
    English.
  - Return 404 on requests of the /favicon.ico file in the internal Servlet
    container.
  - Fixed SF.net bug #1344993: Possible null pointer dereference in
    Element.setAttribute.
  - Fixed SF.net bug #1344989: Potential null pointer dereference in
    EnumItem.equals.
  - Fixed SF.net bug #1344991: Element.clone() does not call super.clone().
  - Fixed SF.net bug #1344979: DataElement#clone() does not call
    super.clone().
  - Fixed SF.net bug #1344985: Inconsistent locking of FileWatcher fields.

* XINS/Java Client Framework:
  - Fixed SF.net bug #1343520: Potential NPE in DataElement#setAttribute.
  - Removed unused variables in XINSServiceCaller.

* XINS/Java Server Framework:
  - Fixed SF.net bug #1343470: NPE in APIServlet.
  - Fixed SF.net bug #1343968: Potential NPE in AccessRuleFile, method
    parseAndApply(String,int).
  - Fixed SF.net bug #1343980: ConfigManager does not close constructed
    FileInputStream.
  - Fixed SF.net bug #1343973: AccessRuleFile does not close constructed
    FileReader stream.
  - Removed an unused variable from class API, method handleCall.

* Generatation of specdocs:
  - Fixed SF.net bug #1345831: Examples incorrect if default convention is not
    _xins-std.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.3.0 RELEASE CANDIDATE 1:

* XINS/Java Server Framework:
  - Fixed SF.net bug #1263832: No unique call ID for meta-functions.
  - Refactored CallingConventionManager. Fixed SF.net bug #1336471 (Failed
    creation of a calling convention fails the server) in the process.
  - No longer logging the associated exception when logging message 3301. This
    message is logged when the runtime properties file exists at start-up, but
    cannot be opened.
  - Removed unused log messages 3201, 3204 and 3611.
  - If the calling convention throws an IOException when converting the
    result, the exception is logged and a '500 Internal Server Error' is
    returned.
  - Fixed a bug in all CallingConvention instances. The
    HttpServletResponse.setEncoding(String) method was called _after_ calling
    getWriter(), which is invalid according to the Java Servlet 2.4
    Specification.
  - Moved log messages 3237-3241 three IDs up (to 3240-3244). These log
    messages are new since XINS 1.3.0. Added log messages 3237-3239 in
    between:
    . 3237: Creating calling convention
    . 3238: Created calling convention
    . 3239: Error while creating calling convention
  - Replaced log message 3560 with 3239.
  - Added log messages:
    . 3245: Determined default calling convention
    . 3246: No custom calling convention specified
    . 3247: Custom calling convention is specified
    . 3507: Unable to retrieve calling convention
  - Implemented SF.net RFE #1263809 ("Refactor: init(ServletConfig) should not
    throw ServletExc.") The servlet initialization now always fails silently,
    meaning that the servlet container is not notified by means of an
    exception.  This is done to avoid re-initialization by the servlet
    container.
  - Removed log messages 3000, 3001 and 3002, about the initialization of the
    servlet. These log messages are considered irrelevant and possibly even
    confusing. See SF.net bug report #1263768: "Log: Servlet init succeeded
    while framework init failed."
  - Changed level of log message 3231 from INFO to DEBUG.
  - Added support for an optional 'detail' parameter to the following log
    messages: 3209, 3215, 3222, 3242, 3411, 3418, 3423 and 3437.
  - Quoting reason parameter in translations for message 3210.

* XINS/Java Common Library:
  - Fixed bug #1334039: FastStringBuffer#append(char[] ch, int off, int len) 
    now accepts ch.length == off if len == 0.
  - Added support for content types in the local servlet container.
  - Improved the Javadoc comments for the ServiceCaller class.
  - Added constructor to class MissingRequiredPropertyException that accepts a
    detail message. Added an associated getDetail() method.
  - If an exception is thrown when handling a request with the internal 
    Servlet container, this exception is logged and ignored.

* Generated build file:
  - If no directory exists for the implementation, the stub target will
    create the directory.
  - If the implementation directory is not created, the generation of the
    stub will create it.

* Logdoc:
  - In the generated HTML index page (titled "Log documentation") now only
    listing the groups that actually have associated entries.

* Libraries:
  - Upgraded xmlenc from 0.49 to 0.51. This fixes a bug regarding the escaping
    of quote characters in attribute values.

* Shell script / batch file:
  - Fixed SF.net bug #1329335. A descriptive error is now shown when the
    script cannot determine the XINS home directory.

* Build- and release-process:
  - Removed the generated stub files and generated tests of the allinone API
    from the release.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.3.0 BETA 4:

* Logdoc:
  - Added public static method useDefaultLocale() to LogCentral.
  - Fixed the encoding of all Logdoc XML files (under src/logdoc) from UTF-8
    to ISO-8859-1.
  - Improved performance and memory footprint to generate the translation
    bundle files.

* XINS/Java Common Library:
  - Rewrote the MandatoryArgumentChecker class in org.xins.common. If the
    passed argument name is null, then a programming error is logged and a
    ProgrammingException is thrown. Improved the unit tests.
  - Changed the interface of the DateConverter class. Replaced the class
    function toDateString(long,boolean) with an instance method format(long).
  - Improved logging in HostnameTask.
  - Removed unused method 'log' from class org.xins.common.Utils.
  - Improved the message for a ProgrammingException.
  - Improved the implementation of the HTTPCallConfig class. Implemented the
    describe() method and made the HTTP method required in setMethod. This
    solves an inconsistency in the Javadoc comments.
  - Changed the copy method of the ExpiryFolder so it can be executed even if
    the strategy is stopped.
  - Changed the HTTPCallResult constructor to check all mandatory arguments at
    once.
  - Improved the message for an InitializationException, added a unit test,
    and fixed a bug (a NullPointerException) in the creating of the message.
  - Logging unsupported protocol as message 1308 (in the DescriptorBuilder).
  - Added getters for detecting class/method, subject class/method and detail
    in class ProgrammingException.
  - Added getCallingClass(int) and getClassMethod(int) methods in class Utils.
  - Slightly changed Utils.logProgrammingError(String). The caller is assumed
    to be the detecting class/method, while the caller of the caller is now
    expected to be the subject class/method.
  - Added missing toHexString(FastStringBuffer,char) method in class
    HexConverter. Unit tests for this new method are in place.
  - Added TextUtils.trim(String,String) that returns the trimmed version of
    the first argument, or the second argument if the first argument is either
    null or empty (after trimming).
  - Changed Utils.logIgnoredException to have the same order of arguments as
    the corresponding logProgrammingError method.
  - Added a version of Utils.logIgnoredException that accepts a detail
    message.
  - Made the HTTPServiceCaller class compatible with HTTPClient 2.0.2.
  - Implemented the getScheme(), getRequestURI() and getRequestURL() method 
    in the internal Servlet container.
  - Added method isUsable() in class Manageable.
  - Removed the unused log messages 1000-1005.
  - Improved Javadoc comments and formatting.

* XINS/Java Client Framework:
  - Improved the implementation of the XINSCallConfig class. Implemented the
    describe() method and made the HTTP method required in setHTTPMethod. This
    solves an inconsistency in the Javadoc comments.
  - Changed the XINSCallResult constructor to check all mandatory arguments at
    once.
  - Printing max 1024 bytes of the received HTTP data in the exception message
    in case of an invalid XINS call result (i.e. parse error).
  - Improved Javadoc comments and formatting.
  - Unit tests added for unicode charcters in prameters.

* XINS/Java Server Framework:
  - Fixed SF.net bug #1323689: AccessRuleFile not printed correctly in log
    message 3429.
  - Fixed SF.net bug #1328702 ("Removing log locale setting does not reset
    locale"): When a log locale is first specified in the runtime
    configuration and then later on remove from the runtime configuration, the
    framework now switches back to the default locale. This problem was
    probably in XINS since release 1.0.0.
  - Fixed SF.net bug #1326533: Incorrect MIME type support.
  - Fixed SF.net bug #1263829. If a meta-function now throws an exception,
    then transaction logging will still be performed.
  - Fixed bug: Now actually allowing the reload interval to be 0 in the
    AccessRuleFile.
  - Fixed bug: Now correctly reporting a negative reload interval instead of
    logging an IllegalArgumentException (in class API).
  - Stored the name of the parsed ACL file in case of re-initialization. This
    fixes a bug in the AccessRuleFile that caused an issue at
    re-initialization.
  - Improved performance of log messages 3540 and 3541 by making FormattedDate
    use the performance-optimized method in DateConverter.
  - Only logging unused properties (message 3434) if the framework
    (re-)initialized successfully.
  - Improved the logging of an I/O error in the AccessRuleFile constructor,
    especially when the file is not found. Also now correctly setting the
    cause of the ParseException to the related IOException.
  - Improved the translations for log message 3522. Previously the message was
    vague and misleading.
  - Fixed minor typos in the description of log messages 3540 and 3541.
  - Removed log messages 3430 and 3601. Instead of any of these, message 1050
    (programming error detected) is logged.
  - Removed log message 3236 (API build version is not set). Instead, message
    3232 (Expected bootstrap property to be set) is logged.
  - Consequently using the term 'API-manageable' instead of 'Manageable
    object' in log messages.
  - Applied more improvements to various log messages.
  - Improved state checking in CallingConvention class.
  - Improved XSLTCallingConvention. Now throwing an
    InvalidPropertyValueException if the cache setting is neither "false" nor
    "true". If the property is not set, then by default the cache is enabled.
    Logging whether the cache is enabled using messages 3440 (enabled) and
    3441 (disabled).
  - Added more comments in the XSLTCallingConvention.
  - Fixed if a calling convention fails at the initialization, it can
    be re-initialized.
  - Made the _CheckLinks meta function also compatible with HTTPClient 2.0.2.
  - Simplified reading of the XML request in class CallingConvention. This
    should speed-up the handling of incoming XML documents and it should
    reduce object churn.
  - Fixed bug: Now correctly reporting an invalid reload interval instead of
    logging an NumberFormatException (in class API).
  - Rewrote the CallingConventionManager. Added a significant amount of
    logging for CallingConventions.
  - Improved Javadoc comments and formatting.
    
* Generation of server-side Java code:
  - Fixed possibility of conflict in generated code between variables.
  - Improved performance and memory footprint by storing the root node of the
    API file in a variable.

* Generation of client-side Java code:
  - Fixed possibility of conflict in generated code between variables.

* Generation of the specific documentation:
  - Improved performance and memory by storing document nodes in a variable.
  - Added test for the category.

* Generated WSDL:
  - Fixed: defined base64 types were not detected correctly.

* Generated build file:
  - The WSDL files are generated in the build/wsdl directory.
  - Improved performance and memory by storing the node of the API file
    in a variable.

* Build- and release-process:
  - Fixed incorrect directory name for package target.

* Libraries:
  - Upgraded Jakarta Commons HttpClient from 3.0-rc3 to 3.0-rc4.

* Other:
  - Improved the Checkstyle config. Now also checking things like a maximum
    method line count (100), @author tag format, @version tag format, etc.
  - The script xins.bat displays an error when XINS_HOME is not set and it is
    not run from the XINS bin directory.
  - Configured the encoding of Java source files to ISO-8859-1.
  - Changed the encoding of build.xml and build-dev.xml from US-ASCII to
    ISO-8859-1.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.3.0 BETA 3:

* XINS/Java Common Library:
  - Fixed SF.net bug #1301078: WhislEncoding encodes as "$0000xxxx" instead of
    "$xxxx". This bug was probably in XINS since release 1.0.0.
  - Fixed SF.net bug #1301221: HexConverter.toHexString(short) fails on
    negative values. This bug was probably in XINS since release 1.0.0.
  - Configure the Log4J fallback only when no Log4J settings are already set.
  - Added toHexString(FastStringBuffer,short) and
    toHexString(FastStringBuffer,byte) to class HexConverter.
  - Added new and extended existing unit tests for package
    org.xins.common.text.
  - Improved performances for the internal servlet container.
  - Setting the thread name for the FileWatcher thread, in the constructor.
  - Improved performances of WhislEncoding.encode() by a factor up to 10.
  - Improved performances of URLEncoding.decode().
  - If the length of the char[] to add to the FastStringBuffer is 0 then
    nothing is done.
  - Optimized IPAddressUtils.ipPartToInt() by using a char[].
  - Added SAXParserProvider class in org.xins.common.xml, with unit tests.
  - Disabled the validation of the SAX parser created by the
    SAXParserProvider.
  - Added a method to get the current time as a String in the DateConverter.
  - Set a proper name for the Thread of the servlet container.
  - Setting the name for the HTTP call executor thread to something
    meaningful.
  - If an empty HTTP user-agent string is specified, then it is not sent in
    the request sent by an HTTPServiceCaller.
  - Set serialVersionUID on some classes to fix serialization-compatibility
    with XINS 1.2.5.
  - The classes FastStringBuffer and LogdocStringBuffer
    check the mandatory arguments in the code instead of using the
    MandatoryArgumentChecker.
  - Slightly improved performance of FastStringWriter by inlining the private
    assertOpen() method and by inlining the calls to MandatoryArgumentChecker.
  - Methods in class Manageable (for bootstrapping and initialization) allow
    passing null as a PropertyReader. In this case an empty PropertyReader
    will be used.
  - The classes of the spec package now check the mandatory parameters.
  - Added more details in some exception thrown by classes in the spec
    package.
  - The internal Servlet container returns 404 for the /favicon.ico request.

* XINS/Java Server Framework:
  - Fixed SF.net bug #1307026: Context ID generation not thread-safe.
  - Set the default level for logs starting with "org.xins." to INFO.
  - Implemented SF.net RFE #1282935. All calling conventions are initialized
    when the API is started.
  - Quoting servlet container, JVM and OS info in log message 3200.
  - Optimized the Engine by getting the error information only when the
    exception is thrown.
  - Improved performance of the ContextIDGenerator.
  - There were still some checks in the code that required the watch interval
    to be at least 1. Changed these to allow 0, in case no automatic reloading
    should be performed.
  - Added exception to log message 3413.
  - Logging 3415 ("XINS/Java Server Framework has been (re-)initialized") only
    after the other related log messages, such as 3434.
  - Changed CallResultOutputter code to improve performance.

* Generated types:
  - The enum type now accepts more special characters in the name and in the
    value.

* Generation of server-side Java code:
  - Fixed bug which caused the generation of function files to fail with a
    NullPointerException on Java 1.4.1.

* Generation of the specific documentation:
  - Removed the link to the environment on the API page as it does not point
    to any HTML page.

* Generated test forms:
  - Fixed the environment did not match the destination when the back
    and forward button was used.

* Unit tests:
  - Removed unused imports and unused variables.
  - Removed underscores from method names.

* Performance tests:
  - Added performance tests for DateConverter.
  - Allowing performance test class to be set in variable 'perftestclass'.

* DTD:
  - Added 1.3 DTD's for author, environment, impl, resultcode and type XML
    files.

* Other:
  - The script xins.bat no longer creates a __XINS_HOME environment variable.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.3.0 BETA 2:

* XINS/Java Common Library:
  - Fixed SF.net bug #1280644: Change in runtime props file does not trigger
    re-init. This problem was introduced in 1.3.0 beta 1.
  - Improved logging for the FileWatcher. Added instance ID in all log
    messages. Also new is the logging of an INFO message when the FileWatcher
    thread dies.
  - Improved the HostnameTask (for Apache Ant) so it now attempts calling the
    'hostname' command on UNIX/Linux systems, if no information can be
    retrieved from the JDK.
  - Added log messages for the Servlet container.
  - Removed unused imports and unused variables.

* XINS/Java Server Framework:
  - Fixed the statistics locking. This resolves SF.net bug #1263827.
  - Fixed SF.net bug #1290992: NPE if runtime config file is not specified.
  - Applied some minor changes to APIServlet to make this class binary
    backwards compatible with XINS 1.2.5. Validated with Japitools from
    http://www.kaffe.org/~stuart/japi/.
  - Added parseAccessRuleList(String) method in class AccessRuleList to fix
    backwards compatibility with XINS 1.0.x.
  - Added missing add(org.xins.server.Element) method in class FunctionResult
    for backwards compatibility with XINS 1.0.x.
  - Deprecated dispose() method in class AccessRule. The method is unused and
    has an empty implementation.
  - Improved test coverage by adding new tests and extending existing ones.
  - Explicitly supporting the upcoming Java Servlet 2.5 specification in the
    APIServlet class. See:
    http://jcp.org/aboutJava/communityprocess/maintenance/jsr154/index3.html
  - Removed log #3219 which is similar to log #3218.
  - All calling conventions return the same "Server" HTTP header.
  - Removed unused imports and unused variables.

* XINS/Java Client Framework:
  - Removed unused imports and unused variables.

* Generated types:
  - Fixed SF.net bug #1292025:  The == operator does not always work for
    EnumItem.

* Generation of server-side Java code:
  - Fixed SF.net bug #1297833: Input data section element with an _date
    attribute does not compile.

* Generation of client-side Java code:
  - Fixed the fact that more than one addDataSection method was created in the
    request if the input data section had more than one element.

* Generated test forms:
  - The content of the iframe is removed before any request.

* Generated build file:
  - If no impl.xml exists when the stub files are created, then a default one
    is generated.

* Build- and release-process:
  - No longer including the private Javadoc in the package.
  - Added the release notes file to the release.

* Libraries
  - Upgraded Log4J from 1.2.9 to 1.2.12.
  - Upgraded xmlenc from 0.48 to 0.49.

* Tests:
  - Added a link to an ACL file from the runtime properties used for the unit
    tests.
  - Added a unit test for the SOAP calling convention.
  - Added a unit test for the CustomCallingConvention. This test is not
    executed as conflicts with other unit tests.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.3.0 BETA 1:

* XINS/Java Common Library:
  - Added the StatsPropertyReader with a corresponding test.

* XINS/Java Server Framework:
  - Fixed SF.net bug #1259976: OtherIOError instead of SocketTimeout on Java
    1.3.
  - Implemented SF.net RFE #1189417: Message 3434 is now logged if a runtime
    property appears to be unused.
  - Implemented SF.net RFE #1263773. JVM and OS-info have been added to log
    message 3200.
  - Refactored the classes related to the Engine in order to reduce the
    dependencies between classes.
  - Renamed CallingConventionFactory to CallingConventionManager. The code
    related to the calling convention in Engine has been moved to the
    CallingConventionManager class.
  - Moved the Object containing the runtime properties from the Engine class
    to the ConfigManager class.
  - Improved _CheckLinks metafunction, which now gives a connection timeout
    exception if a thread is active after the timeout. Also added some log
    messages.

* Generated specification documentation:
  - The link to the test form on the function page is now at the top of the
    page.

* Generated test forms:
  - Refactored the layout so that the request and the result is visible on the
    same page.
  - Added the possibility to choose the environment on the test form page.
    This means that only one test form is generated per function.

* Build- and release-process:
  - Added images associated with the primer.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.3.0 ALPHA 4:

* Logdoc:
  - Implemented SF.net RFE #1060631: Allow @since tags on generated Logdoc
    classes.

* XINS/Java Common Library:
  - Fixed return type error for SimplePatternParser and WhislEncoding.
  - Fixed SF.net bug #1240240. XINSServletContext is incompatible with
    Java 1.3.
  - Implemented SF.net RFE #1242308: Extend log msg 1109 to include exception
    class and message.
  - Implemented SF.net RFE #1255596: Distinguish NoRouteToHost in
    ServiceCaller. No unit test could be added, though, since there is no
    obvious way to reproduce this situation.
  - Added new methods to get the specification of the API based on the name
    of the entity.
  - EntityNotFoundException is thrown if the entity is not found in the
    classes of the spec package.
  - Changed methods used to get the API specification return a Map or a List
    instead of an array.
  - Renamed the classes in the spec package by adding "Spec" at the end of
    the class name.
  - Added logIgnorableException methods to the Utils class.
  - Slightly improved internal state checking in FileWatcher class.
  - Added the possibility set the user agent in the HTTPCallConfig.
  - Improved the servlet container to return custom HTTP headers.
  - Added ChainedMap in the collection package. This class returns the
    values in the same order that they were added.
  - Adapted the spec package classes to use the ChainedMap instead of the
    HashMap.
  - Implemented SF.net RFE #1198237: Accept XML string in ElementBuilder.
  - Increased the default capacity of some FastStringBuffer.

* XINS/Java Client Framework:
  - Implemented SF.net RFE #1115233: Show _InvalidRequest details in exception
    message.
  - Added a new method to convert a org.xins.client.DataElement object to a
    org.xins.common.xml.Element object.
  - Implemented SF.net RFE #1247370: A user agent is sent when calling a
    XINS API with XINSCallRequest.
  - Fixed SF.net bug #1277256: the data element specified in the generated
    CAPI request class was not forwarded to the XINSCallRequest object.
  - Increased the default capacity of some FastStringBuffer.

* XINS/Java Server Framework:
  - Fixed SF.net bug #1256466: Exception in meta-function should generate
    _InternalError.
  - Fixed SF.net bug #1187894. Duplicate 3305 message after re-init for change
    of xins.properties.
  - Implemented SF.net RFE #1224680. Added _CheckLinks meta-function.
  - Implemented SF.net RFE #1078843. The runtime-property
    org.xins.server.contextID.filter specifies which diagnostic context
    identifiers are considered valid. If a request specifies one that does not
    match this filter, then a message is logged and a new diagnostic context
    identifier is generated. Added log messages 3431-3433 for the
    initialization and 3580-3583 for the runtime logging.
  - Implemented SF.net RFE #1259918: Include path in log message 3521.
  - Implemented SF.net RFE #1259926. The servlet container info is now
    included in log message 3200 (bootstrapping server framework).
  - The value of the data section attributes are changed, if needed, to the
    correct format in the SOAPCallingConvention.
  - Applied some refactorings.
  - Improved logging.
  - Implemented SF.net RFE #1247369: The Server header is sent back. Note that
    it applies only for a limited set of calling conventions.
  - Added XML-RPC calling convention.
  - Added a method in CallingConvention to parse XML input.
  - Increased the default capacity of some FastStringBuffer.

* Generated CAPI classes:
  - Implemented SF.net RFE #1252557: Support wrapper values in generated
    Request.
  - Fixed SF.net bug #1237539: Attribute values not checked.
  - Implemented SF.net RFE #1203644: Generate method for data section.

* Generation of server-side Java code:
  - Fixed SF.net bug #1277255: Incorrect generated method if the request had a
    data section element that could contain PCDATA.

* Generated WSDL:
  - The defined types are declared as types in the generated WSDL file.
  - If the command line property wsdl.endpoint has been set, use its value
    as the endpoint for the generated WSDL.

* Generated build file:
  - Fixed SF.net bug #1250043: No filtering on specification files.
  - Implemented SF.net RFE #1242139: Max width for xins help should be 79
    chars.

* Libraries:
  - Updated xmlenc from 0.47 to 0.48. This fixes SF.net bug #1201368:
    NoSuchFieldError for xmlenc on IBM Java 1.3/Linux.

* Build- and release-process:
  - Fixed the incorrect classpath for the "coverage" target.
  - Added the primer in the release.
  - The WSDL file is generated when running the unit tests.

* Other:
  - Implemented SF.net RFE #1189408: Enforce that errorcode value is unique.
    This only applies to pre-XINS 1.0 errorcodes. Since XINS 1.0, it is not
    possible to define a value for an error code.
  - Implemented SF.net RFE #1190166: Make XINS_HOME environment variable
    optional.
  - Implemented second half of SF.net RFE #1190166: Make XINS_HOME environment
    variable optional. This part involved making the change to the batch file.
    The shell script was already adapted in XINS 1.3.0-alpha3.
  - Replaced jcoverage tool with cobertura.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.3.0 ALPHA 3:

* XINS/Java Common Library:
  - Improved Javadoc of the spec package.
  - Improved the parsing of HTTP POST requests for the internal servlet
    container.
  - Added methods to retreive the specification of a parameter given its name.
  - Added a method in IPAddressUtils to get the local IP address.
  - Implemented the methods getResource() and getResourceAsStream() in the
    XINSServletContext class.
  - Fixed bug #1238197. The _float32 and _float64 types now properly support
    non-positive numbers.

* XINS/Java Client Framework:
  - The API specification is stored in a static variable. This way the
    specifications are only parsed once.

* XINS/Java Server Framework:
  - Implemented SF.net RFE #1236690. Logging message 3236 if the build version
    is not set on the API package.
  - An InvalidRequestException is thrown if the request does not contain any
    content-type in the _xins-xml calling convention.
  - No specific namespace is returned in the SOAP response.
  - The _boolean, _date and _timestamp types are converted from XINS format
    to SOAP format and vice versa.
  - Calling conventions other than the default one are cached.
  - If no org.xins.server.config is not set or there is no org.xins.server.acl
    property, only localhost is allowed to access the API.
  - The returned MIME type for the SOAP calling convention has been changed
    from application/soap+xml to text/xml.
  - The SOAP calling convention now handles the input and output data
    sections.
  - The returned <FunctionName>Response element for the SOAP calling
    convention has now a diffenrent namespace.
  - Added a test for the SOAP calling convention.
  - Added a test for the _InvalidResponse error code.
  - Refactoring of the Engine class: factored out: new classes
    ContextIDGenerator, EngineStarter, ContextIDGenerator,
    CallingConventionFactory and ConfigManager.Changed references in API and
    APIServlet to the refactored classes.

* Generation of server-side Java code:
  - Fixed bug #1238721: Error when sub-elements in input data.
  - Fixed bug #1203659: Element add method generated even if not needed.
  - Fixed bug #1238249: Error when input data element attribute is not _text
    type.
  - Fixed bug #1238762: Element list method generated even if not needed.

* Generated specification documentation:
  - Added to possibility to have categories in functions. RFE #1029268.

* Generated WSDL:
  - Changed the SOAP binding style from rpc to document.
  - Changed target name space to urn:<apiname>
  - The input and output data sections are now taken into account in the WSDL.

* Generated build file:
  - Fixed SF.net bug #1143791: Sometimes incorrect XINS version displayed on
    Linux.
  - Implemented RFE #1235979: "xins all" now generates everything.
  - Removed the source attribute for the javac task, as not needed.

* Build- and release-process:
  - The tar.gz release file is downloaded to create the Windows installer
    only when needed.
  - The build file has been splitted in 2. The file build.xml contains the
    targets that also work in the release while build-dev.xml contains
    the development targets. Note that you don't need to specify the file
    name for the development targets (e.g. "ant -lib lib tests").
  - The Windows installer now creates a program group with icons to run
    the demo or look at the documentation.
  - Added some of the new 1.3 features in the allinone demo.

* XINS shell script:
  - Fixed SF.net bug #1237446. The script now works correctly with Cygwin.
    This has been tested with Cygwin 1.5.12 on Windows 2000.
  - Implemented SF.net RFE #1234788: Allow quotes, double quotes and commas in
    shell script.
  - Implemented first half of SF.net RFE #1190166: Make XINS_HOME environment
    variable optional. The other half of the RFE involves makes an equivalent
    change to the batch file.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.3.0 ALPHA 2:

* XINS/Java Common Library:
  - Added tests for the spec package.
  - Renamed some functions in spec package.
  - Fixed SF.net bug #1215611: Unmappable character for encoding UTF8.
  - The Perl5Matcher objects are no longer static as this class is not
    thread safe.
  - Added the spec package.
  - Extended ElementParserTests. This unit test covers both the ElementParser
    class and the Element class.

* XINS/Java Server Framework:
  - Added SOAP calling convention.
  - The Perl5Matcher objects are no longer static as this class is not
    thread safe.
  - Added log entry 3003, an error message logged when the doService method
    throws an exception.
  - Continued work on SF.net RFE #1203640, which pertains to refactoring of
    the APIServlet class.
  - Implemented SF.net RFE #1188054: _InvalidResponse should generate ERROR on
    server side. Added log entry 3501 for this.
  - Fixed SF.net bug #1222681: Transaction logging logs the API name instead
    of the function name for meta-functions.
  - Implemented SF.net RFE #1189399: Return lastReset from _GetStatistics.
  - Added log 3522 that logs an error when an invalid request is received.

* XINS/Java Client Framework:
  - Fixed SF.net bug #1215589: Parameter name does not match pattern.

* Generation of server-side Java code:
  - Added generation of the stub from the examples.
  - Implemented SF.net RFE #1173121. Now generating a Javadoc comment for
    the call method in <Function>Impl class. While at it, improved the Javadoc
    comment for the call method in the superclass <Function>.
  - Implemented SF.net RFE #1172476. All generated skeletons for the function
    implementation classes (<Function>Impl.java) are now marked final.
  - Implemented SF.net RFE #1172503. Now generating a package.html file for
    the package with server-side implementation classes.
  - Fixed bug #1231030: getParameters in FunctionResult can return null.

* Generation of client-side Java code:
  - Fixed SF.net bug #1211447: Presence of mandatory Result Items not checked.

* Generated specification documentation:
  - Added support for multiple implementation for the runtime properties.

* Generation of tests:
  - Added generation of the test cases from the examples.

* Generated build file:
  - Added support for multiple implementation.
  - Added the test-<api> target.
  - Added wsdl-<api> targets that generated the WSDL file for the given API.
  - Reduced generated file size by putting XINS classpath in a reference.
  - Fixed bug #1225433: Cannot find shared instance classes.
  - Fixed bug #1225478: Cannot use 1.4 or 1.5 code in xins.

* Build- and release-process:
  - Added target that creates the Windows installer.
  - Added support for 'testclass' property, which indicates which class
    defines the unit tests to run. By default the value is
    'org.xins.tests.AllTests'.

* Libraries:
  - Upgraded Jakarta Commons HttpClient from 3.0-rc2 to 3.0-rc3.

* Other:
  - The debug and profile targets in the NetBeans build script do not require
    Jetty anymore.
  - Implemented SF.net RFE #1189407. All XSLT files that transform a
    resultcode XML file now warn if the name differs from the value.
  - Implemented SF.net RFE #1146195: New param-combo type 'not-all'.
  - Small refactoring in the XSLT files: Created warning.xslt with 'warn'
    template and using that for all warnings.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.3.0 ALPHA 1:

NOTE: This release is based on XINS 1.2.0.

* XINS/Java Common Library:
  - Made tests for type classes Date and Timestamp compatible with Java 1.3.
    Previously they used Java 1.4-specific functionality.
  - Fixed SF.net bug #1201270, so that the 'run' target now works, even if the
    computer is not connected to the Internet.
  - Removed trace logs from the code.
  - Fixed bug #1211277: XINS does not work with proxies.

* XINS/Java Server Framework:
  - Changed the MetaFunctionsTests to properly detect the Java version and
    omit certain checks on Java versions prior to 1.4.
  - Removed the trace methods in the APIServlet class.
  - Refactored the APIServlet class. The APIServlet is now only a small
    servlet class, that delegates completely to the newly-introduced Engine
    class. The inner class APIServlet.State has been replaced by the
    EngineState class. This is in the scope of RFE #1203640, which pertains to
    simplification of the APIServlet class.
  - Fixed bug #1208936: Erroneous non-assignments in XSLTCallingConvention
    class.

* XINS/Java Client Framework:
  - Removed trace logs from the code.

* Generation of server-side Java code:
  - Fixed: NullPointerException thrown when generated the Java class with
    Java 1.4.1.

* Generation of client-side Java code:
  - Disabled CAPI compatibility test on Java 1.3, since it uses a CAPI JAR
    file generated with XINS 1.1.0, which generates Java 1.4-specific byte
    code.
  - Implemented SF.net RFE #1206997: No Javadoc for generated
    checkParameters(). The generated checkParameters() method now has proper
    documentation.

* Generation of server-side Java code:
  - Fixed: Incorrect value for _descriptor in the runtime properties.

* Generated build file:
  - Fixed bug #1205102: The API does not compile created with 1.2 DTDs if the
    computer is offline.
  - Classpath element added to locate DTDs if XINS is installed in a directory
    that contain spaces.

* Build- and release-process:
  - Fixed SF.net bug #1201267: Added the XML libraries needed to run XINS with
    Java 1.3.1.
  - Added the licence files for the XML libraries.
  - Fixed the rundemo.bat was in the Unix line feed.
  - Removed xalan and xml-apis from the release.

* General:
  - Fixed SF.net bug #1199691: Calling 'xins' shell script should default to
    target 'help'. Tested with bash 2.05 on Linux 2.4 and 2.6, with
    bash 2.03 on Solaris 8 and with bash 2.05 on OS/X.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.2.5 FINAL:

* XINS/Java Client Framework:
  - Fixed SF.net bug #1277256: the data element specified in the generated
    CAPI request class was not forwarded to the XINSCallRequest object.

* Generation of server-side Java code:
  - Fixed SF.net bug #1277255: Incorrect generated method if the request had a
    data section element that could contain PCDATA.

_____________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.2.4 FINAL:

* Libraries:
  - Updated xmlenc from 0.47 to 0.48. This fixes SF.net bug #1201368:
    NoSuchFieldError for xmlenc on IBM Java 1.3/Linux.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.2.3 FINAL:

* XINS/Java Common Library:
  - Fixed bug #1238197. The _float32 and _float64 types now properly support
    non-positive numbers.

* Generation of server-side Java code:
  - Fixed bug #1238721: Error when sub-elements in input data.
  - Fixed bug #1203659: Element add method generated even if not needed.
  - Fixed bug #1238249: Error when input data element attribute is not _text
    type.
  - Fixed bug #1238762: Element list method generated even if not needed.

* XINS/Java Server Framework:
  - Implemented SF.net RFE #1236690. Logging message 3236 if the build version
    is not set on the API package.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.2.2 FINAL:

* XINS/Java Server Framework:
  - Implemented SF.net RFE #1188054: _InvalidResponse should generate ERROR on
    server side. Added log entry 3501 for this.
    Note that this SF.net RFE #1237524 is a duplicate of this RFE.

* XINS shell script:
  - Fixed SF.net bug #1237446. The script now works correctly with Cygwin.
    This has been tested with Cygwin 1.5.12 on Windows 2000.
  - Implemented SF.net RFE #1234788: Allow quotes, double quotes and commas in
    shell script.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.2.1 FINAL:

* XINS/Java Common Library:
  - Fixed bug #1211277: XINS does not work with proxies.
  - Fixed bug #1215589. The Perl5Matcher objects are no longer static as this
    class is not thread safe.

* XINS/Java Server Framework:
  - Fixed bug #1215589. The Perl5Matcher objects are no longer static as this
    class is not thread safe.

* XINS/Java Client Framework:
  - Fixed bug #1215589: Parameter name does not match pattern.

* Generation of client-side Java code:
  - Fixed bug #1211447: Presence of mandatory Result Items not checked.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.2.0 FINAL:

* XINS/Java Common Library:
  - Removed trace logs from the code.

* XINS/Java Server Framework:
  - Removed the trace methods in the APIServlet class.

* XINS/Java Client Framework:
  - Removed trace logs from the code.

* Generation of server-side Java code:
  - Fixed: NullPointerException thrown when generated the Java class with
    Java 1.4.1.
  - Fixed bug #1208936: Erroneous non-assignments in XSLTCallingConvention
    class.

* Generated build file:
  - Fixed bug #1205102: The API does not compile created with 1.2 DTDs if the
    computer is offline.
  - Classpath element added to locate DTDs if XINS is installed in a directory
    that contain spaces.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.2.0 RELEASE CANDIDATE 2:

* XINS/Java Common Library:
  - Made tests for type classes Date and Timestamp compatible with Java 1.3.
    Previously they used Java 1.4-specific functionality.
  - Fixed SF.net bug #1201270: the run target works also if the computer is
    not connected to Internet.

* XINS/Java Server Framework:
  - Changed the MetaFunctionsTests to properly detect the Java version and
    omit certain checks on Java versions prior to 1.4.
  - Removed the trace methods in the APIServlet class.

* Generation of client-side Java code:
  - Disabled CAPI compatibility test on Java 1.3, since it uses a CAPI JAR
    file generated with XINS 1.1.0, which generates Java 1.4-specific byte
    code.

* Generation of server-side Java code:
  - Fixed: Incorrect value for _descriptor in the runtime properties.

* Build- and release-process:
  - Fixed the rundemo.bat was in the Unix line feed.

* Documentation:
  - Added release notes file in the release and linked it from the readme
    file.

* General:
  - Fixed SF.net bug #1199691: Calling 'xins' shell script should default to
    target 'help'. Tested with bash 2.05 on Linux 2.4 and 2.6, with
    bash 2.03 on Solaris 8 and with bash 2.05 on OS/X.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.2.0 RELEASE CANDIDATE 1:

* XINS/Java Common Library:
  - Fixed SF.net bug #1195309: The Date format returned by Timestamp.value()
    is incorrect. Improved the unit tests for the Timestamp class in the
    process.
  - Fixed various issues in the Date and Timestamp classes. Added several new
    unit tests. Made the 'Value' inner classes implement Cloneable.

* XINS/Java Client Framework:
  - Cleaned up some code in the InvalidRequestException class. Removed unused
    private inner classes.

* Generation of server-side Java code:
  - Fixed bug #1198829: Defined Types in Runtime properties behave
    incorrectly.

* Build- and release-process:
  - Fixed missing rundemo script files in the release.
  - The xins-examples and xins-docs directory are now tagged when a release
    is created.

* General:
  - Fixed some Javadoc- and style-issues. Most were reported by Checkstyle.
  - Fixed SF.net bug #1198372: XINS script fails on Solaris. Tested with bash
    2.05 on Linux 2.4 and with bash 2.03 on Solaris 8.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.2.0 BETA 4:

* XINS/Java Common Library:
  - Removed unused imports and unused variables.
  - The size is no longer computed every tick() in the ExpiryFolder.
  - Fixed bug in the HTTPServletContainer. It now correctly returns \r\n
    instead of \n after the HTTP headers.
  - Removed unused imports and variables.
  - Refactored the ExpiryFolder to improve performance and remove some memory
    leaks.

* XINS/Java Client Framework:
  - Fixed SF.net bug #1194486: CAPI compatibility problem.
  - Implemented RFE #1188052: Log message 2114 should be logged only once.
  - Added getAPIName() to class AbstractCAPI.
  - Implemented SF.net RFE #1188021: Log message 2114 should include API name.
  - Removed unused imports and variables.
  - Added a test that fails with an invalid result code.

* XINS/Java Server Framework:
  - Fixed SF.net bug #1176211: WARN No appenders could be found for logger.
  - Removed unused imports and variables.
  - Improved trace logging in class APIServlet.

* Generated specification documentation:
  - Implemented SF.net RFE #1190778: Link to detailed statistics from API
    specdocs.

* Generated build file:
  - Implemented RFE #1190978: Added the possibility to specify the port
    for the server with the servlet.port parameter.
  - Remove the generated file if any file in the specification has changed.

* Build- and release-process:
  - Fixed missing build.properties for the demos.
  - Improved Windows installer (including fix for bug #1189532.)
  - Added rundemo script.
  - Added JavaScript/AJAX example.

* Other:
  - Fixed SF.net bug #1187914: Cannot pass arguments with the XINS command on
    Unix. Changed the shell script to differentiate options and target
    arguments.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.2.0 BETA 3:

* XINS/Java Common Library:
  - Fixed incorrect path detection for HTTP GET requests in the
    HTTPServletHandler.
  - Fixed SF.net bug #1106065: Warning regarding response buffering.
  - Added constructors to create a Date.value from a java.util.Date or a long.
  - When an ExpiryStrategy is stopped, then all associated ExpiryFolder
    objects are notified, so they may deinitialize. If an ExpiryFolder is used
    after that, it throws an IllegalStateException on almost all operations.
  - Added missing @since tags to Timestamp class and made some minor changes,
    which should not affect the behavior.

* XINS/Java Client Framework:
  - Added partial unit test for SF.net RFE #1115233: Show _InvalidRequest
    details in exception message.

* XINS/Java Server Framework:
  - Fixed SF.net bug #1187660: State change failed in APIServlet. This bug was
    introduced after XINS 1.1.0.
  - Minor improvements in APIServlet class. Mostly style.
  - Fixed translations for log message 3403 so they are appropriate even if
    the new number of seconds is 1.
  - Logging API name in log message 3212.
  - Changed level of log message 3235 (determined API name) from INFO to
    DEBUG, the API name is already in message 3212.
  - Changed level of log messages 3233 and 3234 (API does or does not use
    Logdoc) from INFO to DEBUG.

* Generated build file:
  - Fixed bug #1187658: The run-<api> target will fail nicely if no
    org.xins.server.config property is set.

* Build- and release-process:
  - Fixed missing perl and php examples in the release.

* DTDs:
  - Added 1.2 DTDs.

* Documentation:
  - Improved README.html file.

* Tools:
  - Various improvements for the Windows installer.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.2.0 BETA 2:

* XINS/Java Common Library:
  - The HTTPServletHandler can contain several servlets.
  - Fixed incorrect call to the HTTPServletHandler for the run target.

* XINS/Java Client Framework:
  - Class UnsuccessfulXINSCallException now implements XINSCallResultData.
  - Class UnacceptableResultXINSCallException is no longer final.
  - Added class UnacceptableErrorCodeXINSCallException, derived from
    UnacceptableErrorCodeXINSCallException.
  - If an error code is received that starts with an underscore, but which is
    unrecognized, then an UnacceptableErrorCodeXINSCallException is thrown,
    instead of an UnsuccessfulXINSCallException.

* XINS/Java Server Framework:
  - Translated some new logdoc messages to French.

* Generation of client-side Java code:
  - Fixed SF.net bug #1183640: Detect unacceptable error code in CAPI. If the
    server-side returns an error code that is not recognized as a result code
    for the function, then an UnacceptableErrorCodeXINSCallException is
    thrown.
    Added a unit test case to check this.
  - Fixed SF.net bug #1060861: IllegalArgumentException if output param is
    required but null. Now if an output parameter is required but not set,
    then the generated client-side code throws an
    UnacceptableResultXINSCallException.
    Added a unit test case to check this.
    Bug #1182928 was a duplicate of this one.

* Logdoc:
  - Fixed Logdoc DTDs were not loaded locally if the XINS directory contains
    spaces.
  - Fixed link to the local DTD for Log 1.1 was missing.

* Generated build file:
  - Fixed a dependency problem. Now the java files for the server are not
    regenerated if not needed.

* Build- and release-process:
  - Added common-codec to the release.

* General:
  - All Javadoc now links to the Java 1.4.2 API docs again, instead of to the
    Java 1.3.1 API docs.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.2.0 BETA 1:

* XINS/Java Logdoc:
  - Storing locale in UnsupportedLocaleException.
  - Added UnsupportedLocaleError class. An instance of this class is now
    thrown in case a required locale is unsupported, instead of a plain
    java.lang.Error.

* XINS/Java Common Library:
  - Removed the constraint package as it is no longer used.
  - Slightly improved log message 1506: Quoting the response, but not the HTTP
    status code.
  - Implemented SF.net RFE #1145386: ProtectedList class should throw
    IncorrectSecretKeyException. Adapted unit test cases.
  - Improved Javadoc documentation for ProtectedPropertyReader class.
  - The HTTPServletHandler now loads the external libraries that are not in
    the ClassPath.
  - The main method for the HTTPServletHandler is now in HTTPServletStarter.
  - The Servlet hanlders can also load a Servlet by just passing the name of
    the class.

* XINS/Java Client Framework:
  - Improved logged message in case that an _InvalidRequest is returned.
  - Improved Javadoc here and there.

* XINS/Java Server Framework:
  - Improved error detection, logging and recovery in class APIServlet. Fixed
    SF.net bug #1146371 "Distinguish caught exceptions", among other things.

* Generation of client-side Java code:
  - Implemented SF.net RFE #1054504: One constant or class per error code.
  - The parameters set in the generated Request object are now checked the
    same way as they are in the generated code on the server side.
  - Improved Javadoc here and there.

* Generation of server-side Java code:
  - More sanity checking and logging of programming errors in the generated
    <Function>.java file. Tested part of this with unit tests, too.

* Build- and release-process:
  - The tests-ui, checkstyle and j2h targets no longer need the -lib lib
    command-line option.
  - Removed the certificate as it is not used.

* Libraries:
  - Upgraded Jakarta Commons HttpClient from 3.0-rc1 to 3.0-rc2.

* Added Windows installer script.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.2.0 ALPHA 3:

* XINS/Java Common Library:
  - Fixed SF.net bug #1063649 in class FileWatcher ("Change properties file
    un- to readable: no effect.")
  - Removed the org.xins.common.specs package, for now. It will probably be
    re-introduced later.
  - Added _url standard type.
  - Added a toDate() method for the Date and Timestamp types.
  - If the main() method is used to start the servlet container, the thread
    accepting connections is not a daemon thread.
  - Added new logProprammingError methods.
  - The Java version returned has been changed from an object to a double
    number.
  - Added _descriptor type.
  - Changed translations for log messages 1200 and 1201 to be correct for the
    case where the number of seconds is 1.
  - Changed the HttpServiceCaller to use the new common-net 1.3.0.
  - Added a new mode for the servlet container.
  - Implemented SF.net RFE #1176248. Timestamp.Value objects can now be
    created from long values, Date objects and Calendar objects.

* XINS/Java Server Framework:
  - Fixed SF.net bug #1163559: _InvalidResponse is not returned when the
    response is invalid.
  - Fixed SF.net bug #1181594: Error on change state in APIServlet.
  - Added support for param-combo in the output section.
  - The CallingConvention class now extends the Manageable class.
  - Added a template cache system for the XSLT calling convention.
  - The config file name is now path separator independent.
  - Fixed problems related to the URIResolver of the XSLTCallingConvention.
  - Added the possibility to disable the template cache for the
    XSLTCallingConvention.

* Generation of server-side Java code:
  - Code generated to check input and output parameters is now merged in a
    single file.
  - The generated code now checks also the attributes passed to the data
    sections for the required parameters and for the invalid parameters.
  - The xsl:variable and xsl:with-param element now uses the select
    attribute whenever possible.
  - Replaced some string variable with boolean variables.
  - Fixed bug #1176265: NPE in generated <Function>.java when no elements
    were passed to the data section.
  - Fixed bug #1176214: Changing watch interval does not work.
  - Fixed bug #1172457: The spedocs will fail if two elements have the same
    name.

* Generation of client-side Java code:
  - The xsl:variable and xsl:with-param element now uses the select
    attribute whenever possible.
  - Replaced some string variable with boolean variables.
  - RFE #1146073 Warn if CAPI was built with different XINS version.
  - The check that the Result class does not have an error code is done now
    in the abstract class.

* Generated specification documentation:
  - The multiplicity attribute is no longer supported.
  - Fixed SF.net bug #1165828: Required parameters are not checked in the
    examples.
  - Fixed SF.net bug #1064480: Name for input/output-example is not checked.
  - Required attributes are now check in the examples.
  - Name for attribute-example is now checked.
  - Checking that the corresponding file exists for each function, type and
    result code defined in api.xml.
  - Changed output slightly.
  - The xsl:variable and xsl:with-param element now uses the select
    attribute whenever possible.
  - Replaced some string variable with boolean variables.

* Generated build file:
  - Fixed a bug that prevented APIs using the old directory structure to
    compile.
  - Fixed a DTD caching problem.
  - Fixed incompatibility with Java 1.4.0 and Java 1.5. XINS is now only
    runtime-compatible with Java 1.3 and not compile-time.
  - Added the possibility to have a build.properties for compilation
    properties. The properties supported are: build.compiler,
    build.deprecation and org.xins.server.config.
  - Added support for the jikes compiler.
  - Added run-<api> target that runs your API implementation.
  - Replace the "for-each api" loop with an apply-template.
  - Fixed SF.net bug #1168317: Used another method to load local DTD files
    that also works with directories containing spaces.

* DTD:
  - RFE #1146131: Restrict param-combo types in 1.2 DTDs.

* Examples:
  - Added .version.properties in the demo directory of the release.
  - Added PHP and Perl examples for the client side. Contribution from
    Janwillem Borleffs.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.2.0 ALPHA 2:

* General:
  - Executed all unit tests on the Blackdown 1.4.1_01 JVM for Linux/x86. The
    tests did NOT succeed. In fact, at least 2 problems were found:
    . SF.net bug #1113862: IPAddressUtils.getLocalHost gets NPE on Blackdown
      JVM 1.4.1. This problem was worked around since this was very easy to
      implement.
    . SF.net bug #1113881: 'ant -lib lib tests' hangs on Blackdown JVM 1.4.1
    Then the tests were rerun using the Blackdown 1.4.2_01 for Linux/x86. On
    this JVM the tests did succeed. No more time is spent on supporting the
    Blackdown 1.4.1 JVM and this JVM is considered incompatible with XINS.
  - Successfully ran all unit tests on the Sun 1.4.2_07 JVM for Linux/x86.

* Logdoc:
  - Fixed bug 1109942: Added missing translation for log messages 1404-1407.

* XINS/Java Common Library:
  - Fixed SF.net bug #1113843: Utils.getJavaVersion() does not work with
    Blackdown JVM. It now properly recognizes the major Java version on
    Blackdown JVMs. Tested this successfully on both 1.4.1_01 and 1.4.2_01.
  - Fixed SF.net bug #1113862: IPAddressUtils.getLocalHost gets NPE on
    Blackdown JVM 1.4.1. This problem was not really fixed, since the source
    of the problem is in the Blackdown JVM self. It was worked around though.
  - Implemented SF.net RE #1124698: Added isProtocolSupported(String) method
    to class ServiceCaller.
  - Changed the internal names of the standard types to start with an
    underscore. E.g. "int32" is now "_int32".
  - Changed HTTPServiceCaller to work with HttpClient 3.0 only. HttpClient 2.0
    is now no longer supported.
  - Added 'copyFrom' method to class ProtectedPropertyReader.
  - Introduced IncorrectSecretKeyException class to be used by the
    ProtectedPropertyReader and the ProtectedList classes so clients can
    distinguish between secret key mismatches and other illegal argument
    exceptions. The class is derived from class IllegalArgumentException to
    retain backwards compatibility.
  - Added tests for class ProtectedPropertyReader.
  - Added crop(int) to class FastStringBuffer.
  - Added class function list(String,Object[],int) to class CollectionUtils,
    with unit tests.
  - Added 2 additional constructors to class ProtectedList and improved the
    Javadoc API documentation.
  - Added getter for additional detailed information (called 'getDetail()') in
    class TypeValueException.
  - Added package org.xins.common.specs which provides an abstraction of a
    XINS API specification.
  - Added getClassName(Object) and getNameOfClass(Class) functions to class
    Utils.
  - Fixed the method fromString() of the _base64 standard type.
  - Fixed the method toString(Object) of the _base64 standard type.
  - Removed the org.xins.common.text.Base64 class. It was introduced in XINS
    1.1.0 but already marked as deprecated and it had a note stating that it
    could be removed at anytime.
  - Added getProtocol() method to class TargetDescriptor (with unit tests).
  - Changed ServiceCaller to support that the descriptor is null.
  - Added no-arg HTTPServiceCaller constructor.
  - Do not throw an exception if the buffer and the offset are nil in the
    FastStringBuffer.
  - Moved the Servlet container classes used for test directory to the
    org.xins.common.servlet.container package.
  - Added Logdoc to the servlet container.
  - Improved handling of exception in the servlet container.
  - Added the possibility to load the servlet from the WAR file even if
    the classes and libraries are not in the classpath.
  - Added the possibility to start the Servlet container from the command
    line.
  - Implemented SF.net RFE #1107386: Support HTTP/S in HTTPServiceCaller.

* XINS/Java Client Framework:
  - Implemented SF.net RFE #1114846: Error code in
    UnsuccessfulXINSCallException message.
  - Reworked the framework around the UnsuccessfulXINSCallException class.
    Removed the UnsuccessfulXINSCallExceptionFactory class and added quite a
    few UnsuccessfulXINSCallException subclasses.
  - Added no-arg XINSServiceCaller constructor.
  - If available the version of the API is set in the manifest of the JAR
    file.
  - Implemented SF.net RFE #1107386: Support HTTP/S in XINSServiceCaller.

* XINS/Java Server Framework:
  - Improved documentation and some small aspects of the implementation of
    class FunctionRequest.
  - Added CustomCallingConvention class.
  - Made methods and classes that could be used by a custom calling convention
    public.
  - Added the HttpServletRequest as a parameter when creating the result
    in the calling convention.
  - If the function has not output parameters, getParameter() will return null.
  - If available the version of the API is set in the manifest of the WAR file
    and in the web.xml file. The _GetVersion meta function now returns the
    version of the API.
  - Added possibility to have comma separated list of functions for the
    ACL permissions.
  - Added the possibility to define the properties in the impl.xml file.
    If defined a class is created. This class checks the properties and
    provides methods to access the value of the properties.
  - Added the init method for the CallingConvention. This method can be used
    to initialize the calling convention with the data stored in the build
    properties or the runtime properties.
  - If the calling convention passed as parameter is the same as the default
    one, do not create a new CallingConvention object.
  - Added Java Servlet API version 2.4 to the supported implementation.
  - Added XSLT calling convention.

* Generation of CAPI classes:
  - Fixed SF.net bug #1110747: CAPI class Javadoc links to non-existent online
    specs.
  - Implemented SF.net RFE #1119902: CAPI Javadoc should only contain public
    members.
  - Implemented SF.net RFE #1120017: Generated Type class should include
    Javadoc comments
  - Completed implementation of RFE #1110484 (make CAPI call with request
    object).

* Generated specification documentation:
  - Added "Result code" in the header of the HTML pages.
  - Activated the link to the API for types and result codes.
  - Added the possibility to define the properties in the impl.xml file.
    If defined a page containing the description of the properties is created.

* Generated build file:
  - Added common-codec.jar to the classpath and in the generated war file.
  - Slightly improved output of 'help' target.
  - Added target 'javadoc-capis'.

* Generic XSLT files:
  - Added 'javaclass_for_javatype' template to types.xslt. For a Java primary
    data type it returns the fully-qualified name of the corresponding wrapper
    class. E.g. for 'int' it returns 'java.lang.Integer'.
  - Added two method in hungarian.xslt to translate a property name to
    a well written Java variable name.

* Build- and release-process:
  - Fixed SF.net bug #1113838: CAPI Javadoc does not link to XINS Javadoc
    (package).

* Libraries:
  - Updated Apache Jakarta Commons HttpClient from 3.0-beta1 to 3.0-rc1.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.2.0 ALPHA 1:

NOTE: This release is based on XINS 1.1.0-rc1.

* General:
  - Changed all Java code and the tests so that the XINS code now executes on
    Java 1.3 as well (SF.net RFE #1108205). All unit tests were tested
    successfully on the following Java VMs:
    . Sun Java 1.3.1_15 (Linux 2.6/x86)
    . Sun Java 1.4.2_06 (Linux 2.6/x86)
    . Sun Java 1.4.2_06 (Windows 2000/x86)
    . Sun Java 1.5.0_01 (Linux 2.6/x86)
    . Sun Java 1.6.0 Early Access, Jan 20 2005 (Linux 2.6/x86)
  - Changed the xins shell script and the xins.bat batch file to pass the -lib
    option to Ant to pass the XINS lib directory. This is required when using
    Java 1.3. Otherwise it may not be able to find the proper XML/XSLT
    libraries.
  - Linking to Java 1.3 API docs instead of the Java 1.4 API docs.

* Logdoc:
  - Deprecated the LogdocExceptionUtils class in favor of a new ExceptionUtils
    class.

* XINS/Java Common Library:
  - Fixed SF.net bug #1105761: ExpiryFolder constructor log message incorrect.
  - The Base64 class has been deprecated and may be removed in coming
    releases.
  - Improved the accuracy and stability of the ExpiryFolder and ExpiryStrategy
    classes. The tests have been extended a lot. They now also test the
    addListener and removeListener methods and the listener callback. Improved
    the logging in the ExpiryStrategy; added log messages 1404-1407.
  - Changed ExceptionUtils class to be compatible with Java 1.3 (part of
    SF.net RFE #1108205). Used the unit tests to confirm it still works
    correctly under Java 1.4.  Although it indeed compiles with Java 1.3 now,
    the unit tests cannot be run with Java 1.3 yet.
  - Replaced all reference to the Base64 class of the XINS Common library to
    the Base64 class of the Apache Common Codec library.
  - Deprecated the org.xins.common.ExceptionUtils class in favor of the
    org.xins.logdoc.ExceptionUtils class.
    correctly under Java 1.4.
  - Added a Java version retrieval function to the Utils class.
  - Implemented SF.net RFE #1107376: Added a unit test for socket time-outs in
    the HTTPServiceCaller class.
  - Added clear(Object) method to the ProtectedPropertyReader class.
  - Added 'protected final void setCallConfig(CallConfig)' to the
    ServiceCaller class. This allows the fallback call configuration on a
    service caller to be set after construction.
  - Added 'public final void setHTTPCallConfig(HTTPCallConfig)' and
    'public final HTTPCallConfig getHTTPCallConfig()' methods to the
    HTTPServiceCaller class.

* XINS/Java Client Framework:
  - Fixed SF.net bug #1109810: Incorrect parsing of the returned XML.
  - Changed access level of the setUnsuccessfulXINSCallExceptionFactory and
    getUnsuccessfulXINSCallExceptionFactory methods in class XINSCallRequest
    from public to package-private.
  - Added methods to the AbstractCAPI class:
    . public final XINSCallConfig configuration()
    . public final void configure(XINSCallConfig)
  - Added 'public final void setXINSCallConfig(XINSCallConfig)' and
    'public final XINSCallConfig getXINSCallConfig()' methods to the
    XINSServiceCaller class.

* XINS/Java Server Framework:
  - Added support for custom calling conventions.

* Generated build file:
  - Removed the dependencies from the classpath when compiling the types.

* Build and release process:
  - Added -init-release in the dependencies to facilitate the making of a
    release if a target fails.
  - The build/testresults/log4j.log file is now created when executing the
    test-ui target.
  - Fixed the script to upload the Javadoc when creating a release.
    This bug has been in XINS since XINS 1.1.0-alpha8.
  - Set the target VM as 1.3 instead of 1.4 as part of the implementation of
    Java 1.3 support (SF.net RFE #1108205).
  - Set the tar task to handle long file names as GNU tar.
  - Fixed SF.net bug #1109858: The source code is no longer copied to the
    build directory for the javadoc or the j2h command. Only the package
    target will copy the files to a new build/lf directory to unify the
    newline characters.
  - The clean target does not delete the file that are not regenerated in
    the release anymore.

* Tests:
  - Improved performance of tests. Starting server before any of the tests.
    After all tests are run, the server is stopped.
  - Showing standard output and standard error in the generated HTML page.
  - Now logging the output to the console (so it is displayed in the HTML
    page) instead of to a file.

* Libraries:
  - Updated Apache Jakarta Commons HttpClient from 2.0.2 to 3.0-beta1.
  - Updated Apache Jakarta Commons Net from 1.1.0 to 1.3.0.
  - Added Apache Jakarta Commons Codec 1.3 (because it is a dependency for
    HttpClient 3.0-beta1).
  - Added xml-apis.jar and xercesImpl.jar from Xerces 2.6.2 (for use with Java
    1.3)
  - Added Xalan 2.6.0 (for use with Java 1.3).

* Generation of CAPI classes:
  - Added proper @since tag (for XINS 1.1.0) on the generated create methods.
  - Implemented RFE #1080066 (allow HTTP method to be specified for CAPI call)
    and RFE #1080065 (allow unconditional fail-over to be specified for CAPI
    call) and started implementation of RFE #1110484 (make CAPI call with
    request object):
    . Renamed function_to_java.xslt to function_to_result_java.xslt.
    . Added function_to_request_java.xslt which produces a <Function>Request
      object.
    . Generating one call(<Function>Request) method per function in the
      generated CAPI class.
    . Generating one call(<Function>Request,XINSCallConfig) method per
      function in the generated CAPI class.
  - Implemented RFE #1110691: Deprecate create methods in CAPI class. These
    have been replaced by equivalent constructors.

* Generated build file:
  - Fixed SF.net bug #1110726: Invalid generated build.xml can't be removed
    with 'xins clean'.
______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.1.0 FINAL:

* Generation of CAPI classes:
  - Added proper @since tag on the generated create methods.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.1.0 RELEASE CANDIDATE 2:

* XINS/Java Common Library:
  - The Base64 class has been deprecated and may be removed in coming
    releases.

* Build and release process:
  - Fixed the script to upload the Javadoc when creating a release.
    This bug has been in XINS since XINS 1.1.0-alpha8.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.1.0 RELEASE CANDIDATE 1:

* XINS/Java Server Framework:
  - Implemented SF.net RFE #1102205: Let Server use Common log messages.
    Removed all logdoc entries in the range 30xx.

* XINS/Java Client Framework:
  - Implemented SF.net RFE #1093174: Let Client use Common log messages.
    Removed all logdoc entries in the range 20xx.

* XINS/Java Common Library:
  - Fixed SF.net bug #1103793: ExpiryFolder accuracy low.
  - Added a toHexString(char) method to the HexConverter class.
  - Fixed various Checkstyle-reported issues.

* Logdoc:
  - Improved transformation of XML to a Java String object for foreign
    languages.

* Generated build file:
  - Fixed SF.net bug #1102205: Directories with spaces are now supported
    for Windows.
  - Renamed property name for creating a new file to avoid conflict.
  - Added an input example when creating a new function.
  - Fixed missing DTD declaration for the 1.1 DTDs.

* Tests:
  - All IPs are granted to access all functions, so that the the test
    can run everywhere.

* DTD:
  - Added missing DTD files for the 1.1 version.

* Changed "Copyright 2004" to "Copyright 2003-2005".

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.1.0 BETA 2:

* XINS/Java Common Library:
  - Fixed SF.net bug #1101582: ElementParser parses bytes instead of chars.
    The parse method in the ElementParser now accepts a Reader instead of a
    byte[] array.
  - Fixed SF.net bug #1099358: Num of descriptors in GroupDescriptor. A
    GroupDescriptor now always contains at least 2 other descriptors.
  - Added a ProtectedList class which implements a java.util.List where
    elements can be added or removed only using the key passed in the
    constructor.
    This object is now used in the org.xins.common.xml.Element.
    Typical impact on performance: Small.

* XINS/Java Client Framework:
  - Hid some classes by changing the access level from public to
    package-private:
    . AbstractCAPICallRequest
    . AbstractCAPIErrorCodeException
    . BasicUnsuccessfulXINSCallExceptionFactory
    . InternalErrorException
    . InvalidRequestException
    . InvalidResponseException
    . UnsuccessfulXINSCallExceptionFactory

* XINS/Java Server Framework:
  - Fixed SF.net bug #1100765: The API name is no longer mandatory.
    It is scheduled for re-introduction in XINS 2.0.0.
  - Fixed SF.net bug #1100805: Standard calling convention does not check
    whether function name is null.
  - Small style improvements.
  - Added constructor to class InvalidRequestException that only accepts a
    message and no cause exception.

* Generation of server-side Java code:
  - Fixed SF.net bug #1100792: Conflicting duplicate names for input param
    'ip'.

* Logdoc:
  - Translated some English logs to French.

* Tests:
  - Added performance tests. Execute the "perftests" ant target to execute the
    test.
  - Changed references to "localhost" to the IP address "127.0.0.1".

* Examples:
  - Fixed incorrect DTD declaration.

* Build and release process:
  - Added property "tests.deprecation" that controls whether deprecation
    warnings should be displayed when compiling the unit tests.

* DTD:
  - Restricted Logdoc translations file DTD to only allow exception-property
    to refer to the class or the message.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.1.0 BETA 1:

* XINS/Java Common Library:
  - Fixed SF.net bug #1099406: ProgrammingError should be RuntimeException.
    Replaced class ProgrammingError with class ProgrammingException and
    changed code accordingly.

* XINS/Java Client Framework:
  - Impact of fix for SF.net bug #1099406: Class ProgrammingError was replaced
    with class ProgrammingException. Changed the code accordingly.
  - Implemented simple constraint validation framework.

* XINS/Java Server Framework:
  - Fixed SF.net bug #1099473: Pattern for incoming parameters breaks
    compatibility. The change has been reverted. It is scheduled for
    re-introduction in XINS 2.0.0.
  - Impact of fix for SF.net bug #1099406: Class ProgrammingError was replaced
    with class ProgrammingException. Changed the code accordingly.
  - Only the "_function" parameter is supported when using either the standard
    or the XML calling convention. The "function" parameter is treated as a
    normal parameter.
  - The XML is first generated on a StringWriter and its content is sent to
    the Servlet PrintWriter afterwards.
    Typical impact on performance: Small to Medium.

* Build and release process:
  - The Java2HTML pages are now uploaded in a TAR GZ file.

* Generated build file:
  - Improved the create-api and create-function targets.
  - The create-api target invokes the create-function target as APIs must have
    at least one function.

* Build and release process:
  - Added the target "tests-ui" to run the unit tests in a graphical
    environment.
  - Fixed: The XINS protocol documentation was not included in the release.
  - Added the Ant script for NetBeans 4 to the demo directory.

* Libraries:
  - Updated xmlenc from 0.45 to 0.47, which should result in a performance
    improvement.
    Typical impact on performance: Small.

* Documentation:
  - Added chapter about the integration of XINS in NetBeans 4.0.

* Examples:
  - Fixed TestMyFunction example.
  - The build.xml is to compile and run the examples, an appart script file
    nbbuild.xml has been created for using XINS with NetBeans 4.0.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.1.0 ALPHA 8:

* Logdoc:
  - The missing accesslevel variable problem has been fixed. This bug has been
    in XINS since version 1.1.0 alpha 6.

* XINS/Java Common Library:
  - Added tests for class PropertyReaderUtils.
  - Added toString class function in PropertyReaderUtils.
  - Added class CollectionUtils with one class function called "list". This
    function converts an Iterator to an ArrayList.
  - Improved tests for class HTTPServiceCaller.
  - Set the unused values to null in the HTTPServiceCaller after poping the
    diagnotisc context identifier.
  - Dispose the variables of the CallExecutor after getting the HTTP result.

* XINS/Java Server Framework:
  - Changed some classes to use the Common log messages for programming
    errors.
  - Moved some common functionality from the CallingConvention subclasses up
    to class CallingConvention self. The calling conventions now behave the
    same with regard to the determination of the function name. If the
    function name is specified both in the paramter "_function" and in the
    parameter "function", then both must be the same. Otherwise the request is
    considered invalid.
    All incoming parameters that do not match the pattern "[a-z][a-z0-9_]*"
    (without the quotes) are considered ignorable and will not be sent down to
    the function.
  - If an access rule file contains itself, the parsing will fail.

* Generated build file:
  - Added the type_1_1.dtd file to the DTD catalog.

* Documentation:
  - Added the documentation about the XINS protocol to the release.
  - Added the new features of XINS 1.1 to the User Guide.

* Tests:
  - Added new tests for the base64 type, the param combos and the input data
    sections.
  - Adapted the framework to facilitate the testing of the XML calling
    convention.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.1.0 ALPHA 7:

* XINS/Java Common Library:
  - Added tests for the ExpiryStrategy class. This revealed a bug which caused
    the slot count to be incorrect if the time-out is not a multiple of the
    precision.
  - Changed the ExpiryStrategy to use weak references to the ExpiryFolder
    instances instead of strong references.
  - Marked class Doorman as deprecated. The ExpiryFolder implementation no
    longer uses a Doorman but uses synchronized sections instead. Effictively,
    this fixes the following SF.net bugs:
    . #1089007: Memory leak in Doorman
    . #1089086: Programming error in ExpiryStrategy / Doorman
    . #1089597: Time-outs while calling Doorman.enterAsWriter()
    . #1089600: Time-outs while calling Doorman.enterAsReader()
  - ExpiryFolder now has a constructor that just takes a name and an
    ExpiryStrategy. The old constructor (which accepted a 'strict' flag and a
    maximum queue wait time) has been deprecated.
  - Fixed various Checkstyle-reported issues.
  - Added EMPTY_PROPERTY_READER class field in class PropertyReaderUtils.
  - Changed HTTPCallRequest.getParameters() so it never returns null anymore.
    This helps to avoid NullPointerExceptions.

* XINS/Java Client Framework:
  - Fixed various Checkstyle-reported issues.

* XINS/Java Server Framework:
  - Fixed various Checkstyle-reported issues.
  - Slightly improved the exception handling in class APIServlet.

* Build and release process:
  - Generated Javadoc API docs now link to Servlet 2.4 API docs at
    xins.sourceforge.net. Previously they linked to Servlet 2.3 API docs at
    java.sun.com.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.1.0 ALPHA 6:

* Logdoc:
  - Fixed en_US translation of log 3210, 3216, 3223, 3412, 3419 and 3424 to
    include the reason.
  - Fixed bug #1088500: the logdoc element set in impl.xml has now an
    accesslevel attribute.
  - Added support for exception-property elements in translation definition
    documents. Had to add a new version of the DTD for this.

* XINS/Java Common Library:
  - Fixed SF.net bug #1089602: Message for programming error in Perl5Matcher
    incorrect.
  - The diagnostic context identifier is removed after being poped
    otherwise the thread stays in memory.
  - Reset some variables after the HTTP call, so that the variables can be
    garbage collected.
  - Improved log entries 1050, 1051 and 1052. Including much more information
    for the reporting programming errors and unexpected exceptions.
  - Added Utils class.

* XINS/Java Client Framework:
  - Sending down _convention=_xins-std with each call.

* XINS/Java Server Framework:
  - Applied a lot of small improvements to the APIServlet class in terms of
    documentation, exception handling, logging, etc.
  - Fixed SF.net bug #1091683: Log message 3213 now correctly logs the class
    name of the Manageable object that is bootstrapping.
  - Added support for the XINS XML calling convention (_xins-xml).
  - Changed NoSuchFunctionException so it no longer supports the function name
    to be null, since this is now handled in the CallingConvention.

* Libraries:
  - Updated xmlenc from 0.45 to 0.46.

* Generation of server-side Java code:
  - Fixed the parameter name set in the web.xml file used for the calling
    convention to the correct value.

* Generated test forms:
  - Sending down _convention=_xins-std with each call.

* Generated specification documentation:
  - Sending down _convention=_xins-std with calls to _GetVersion,
    _GetStatistics and _GetSettings.

* Generation of server-side Java code:
  - Fixed bug #1089121: The exclusive-or param-combo did not work properly.

* Build and release process:
  - Supporting 'no-upload' property. See 'ant help'.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.1.0 ALPHA 5:

* XINS/Java Common Library:
  - Fixed SF.net bug #1065083: No fatal errors at init for malformed URLs.
  - Fixed SF.net bug #1079069. The first line of the class description was:
    "Abstractgion of a manageanble object". Fixed those 2 typos.
  - Changed some classes to throw a ProgrammingError instead of an Error, if
    appropriate.
  - Extended tests in ServiceCaller class to make sure the implementation is
    implementing the correct methods.
  - Moved some unit tests for org.xins.common packages from
    org.xins.tests.common.util to org.xins.tests.common.
  - Extended test set for class TargetDescriptor.
  - Changed pattern: removed obsolete escapes; changed 0-9 range into \d;
    changed [a-zA-Z] range into [a-z], using the
    Perl5Compiler.CASE_INSENSITIVE_MASK in the call to the
    Perl5Compiler.compile() method instead to enable case-insensitive matches.

* XINS/Java Client Framework:
  - Changed some classes to throw a ProgrammingError instead of an Error, if
    appropriate.
  - Made some preparations for implementing SF.net RFE #1054504:
    - changed class UnsuccessfulXINSCallException to non-final, although all
      methods remain final;
    - added UnsuccessfulXINSCallException subclasses:
      . AbstractCAPIErrorCodeException;
      . InternalErrorException;
      . InvalidRequestException;
      . InvalidResponseException.
    - added UnsuccessfulXINSCallExceptionFactory class.
    - added BasicUnsuccessfulXINSCallExceptionFactory class, extends
      UnsuccessfulXINSCallExceptionFactory.
    - changed XINSServiceCaller to use an UnsuccessfulXINSCallExceptionFactory
      to create UnsuccessfulXINSCallException instances, added a getter and a
      setter for this;
    [ work in progress, one AbstractCAPIErrorCodeException subclass needs to
      be generated per error code, an UnsuccessfulXINSCallExceptionFactory
      subclass needs to be generated and the CAPI class needs to create the
      factory and set it on the XINSServiceCaller ]

* XINS/Java Server Framework:
  - If the org.xins.server.config is not set as a system property, the server
    will also try to get the org.xins.server.config from the bootstrap
    properties.
  - Fixed bug #1076638: The generated context ID was not conform to the
    architect group recommendation.
  - The server classes now use the org.xins.common.xml.Element class instead
    of the deprecated org.xins.server.Element class.
  - Added calling convention which allows to specify in which format the data
    should be received and returned. Two implementation are provided,
    "xins-std" and "xins-old".

* Logdoc:
  - The parameter types are now defined in the DTD.
  - Optimized performance: the Logger object is looked up only once, the first
    time that the entry is logged.
    Typical impact on performance: Major.

* Build and release process:
  - Fixed bug #1078313: Compilation and Javadoc is done from the source code.
    Compilation and Javadoc generation will be faster.

* Generated build file:
  - Fixed bug #1078317: Compilation and Javadoc of the API is now done using
    the files of the impl directory without copying them to the build
    directory. This will increase compilation and javadoc generation
    performances.

* Generation of server-side Java code:
  - An object is created for the data input parameter.

* Generation of CAPI classes:
  - Optimized performance: Made SECRET_KEY a class field.
    Typical impact on performance: Mimimal.

* Build and release process:
  - Fixed bug #1078313: Compilation and Javadoc is done from the source code.
    Compilation and Javadoc generation will be faster.
  - Fixed netbeans-debug target.

* Libraries
  - Updated xmlenc from 0.44 to 0.45, which should result in a performance
    improvement.
    Typical impact on performance: Medium.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.1.0 ALPHA 4:

* XINS/Java Common Library:
  - Added class CallConfig in package org.xins.common.service. Objects of this
    type specify certain aspects of how a call is executed. For example, for
    an HTTP service caller, a CallConfig object could specify what HTTP method
    (GET, POST, etc.) to use.
  - Added HTTPCallConfig class (derives from CallConfig).
  - Changed ServiceCaller to work with CallConfig objects. Some members have
    been deprecated in favour of newer ones that work with CallConfig objects.
    Greatly improved the documentation in the ServiceCaller class [work in
    progress].
  - Added UnsupportedProtocolException in org.xins.common.service package.
    Documented in ServiceCaller class that this exception should be thrown by
    ServiceCaller subclasses if a TargetDescriptor with an unsupported
    protocol is passed.
  - Changed TargetDescriptor to support capitals in the protocol part of the
    URL. This fixes SF.net bug #1075248.
  - Added ProgrammingError class. An instance of this class should be thrown
    when appropriate, especially after any of the log messages 1050, 1052,
    2050, 2052, 3050 and 3052 [work in progress].

* XINS/Java Client Framework:
  - Fixed SF.net bug #1071731: UnacceptableResultXINSCallException constructor
    threw a NullPointerException instead of the documented
    IllegalArgumentException.
  - The AbstractCAPICallResult class adds the following methods:
    . long duration()                    -- Returns the call duration, in
                                            milliseconds.
    . CallExceptionList exceptions()     -- Returns the list of
                                            CallException instances.
    . TargetDescriptor succeededTarget() -- Returns the target for which the
                                            call succeeded.
  - Refactored the XINSCallRequest and added new setter methods.
  - Added possibility to have a data element as input.
  - Removed the constructor that accepts a XINSServiceCaller from the
    AbstractCAPI class. This constructor was added in XINS 1.1.0-alpha3. Added
    a new constructor that accepts a Descriptor and a XINSCallConfig object
    instead. The other constructor (which accepts a Descriptor only) remains
    deprecated. There should still be no effect, since the constructors are
    considered internal to XINS.
  - Added XINSCallConfig class (derives from CallConfig).
  - Removed the XINSServiceCaller constructor that accepts an HTTPMethod and
    replaced it by one that accepts a XINSCallConfig object. The removed
    constructor was added in XINS 1.1.0-alpha3.

* XINS/Java Server Framework:
  - The _GetStatistics meta-function now supports statistics per error code.
    To retrieve these details, pass "detailed=true" to this function.
  - If the bootstrap of the API failed, then the APIServlet now throws a
    ServletException that contains a reference to the cause exception, for
    improved exception handling. Also, if an InvalidPropertyValueException is
    thrown during this bootstrap process, the reason is now logged as well.
  - Added the possibility to have a data element as input.

* Generated CAPI classes:
  - All call methods now return a function result object, never void. This
    change is backwards compatible with XINS 1.0.
  - All function result objects now contain the call duration, the exceptions
    (if any) and a link to the succeeded target. See the changes for the
    AbstractCAPICallResult class for details.
  - Implemented SF.net RFE #1071756: The MANIFEST.MF file in generated CAPI
    JAR file now contains the version of XINS used to generate the JAR file.
  - Added the possibility to have a data element as input.
  - The generated CAPI classes now no longer offers a constructor that takes a
    XINSServiceCaller. This constructor was introduced in XINS 1.1.0-alpha3.
    Instead, a factory method is introduced. There are 2 forms:
    . public static final CAPI create(PropertyReader, String, XINSCallConfig)
    . public static final CAPI create(PropertyReader, String)
    These methods construct a CAPI instance based on a set of properties and
    the name of an API. The optional XINSCallConfig object can be used to
    configure the XINS service caller.

* Generation of server-side Java code:
  - The MANIFEST.MF file in generated WAR file now contains the version of
    XINS used to generate the WAR file.
  - Added the possibility to have a data element as input.

* Generated Javadoc now lists the groups of packages in the following order:
  - Logdoc, Common, Client and finally Server. This should now generally be
    applied as the preferred order.

* Generation of specification documentation:
  - The num attribute for the examples is now optional.
  - Added the possibility to have a data element as input.
  - Added the input-data-example element to specify a data section example
    in the input.
  - Renamed data-example element to output-data-example element. The old
    data-example is still supported for compatibility issues.

* DTD:
  - Remove element or attribute checking already done by the DTD.
  - Added type_1_1.dtd that contains the new types float32, float64, and
    base64.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.1.0 ALPHA 3:

* XINS/Java Common Library
  - Added class function quote(Object) to class TextUtils.

* XINS/Java Client Framework:
  - Fixed SF.net bug #1069436: No function name included in the description of
    a XINSCallRequest object and consequently in the message for
    CallExceptions for a XINS call request. Improved the XINSCallRequest
    description string.
  - The AbstractCAPI class now adds a constructor that accepts a
    XINSServiceCaller. The other constructor, which accepts a Descriptor, has
    been deprecated. The effect is minimal, since the constructors are
    considered internal to XINS.
  - A XINSCallRequest does not have to specify an HTTP method anymore. If it
    is not specified, then the XINSServiceCaller determines what HTTP method
    to use. Consequently, an XINSServiceCaller object now has an HTTPMethod
    object associated with it.
  - Added tests for class XINSCallRequest.

* XINS/Java Server Framework:
  - Added the possibility to point to an ACL file in the ACL runtime property.

* Generated CAPI classes:
  - The generated CAPI classes now offer a constructor that takes a
    XINSServiceCaller.

* Other:
  - Removed src/ant/transform.xml which was no longer used since XINS 0.165.
  - Slightly improved and cleaned the 'xins' shell script. Now the '-version'
    and the 'version' argument both work the same. Also, the shell script now
    calls Ant only once. Then Ant first does the transformation from
    xins-project.xml to build.xml and then executes the generated build.xml
    directly.
    Note that the xins.bat batch file has not been changed yet.
  - Linking to Apache Ant 1.6.2 API docs at xins.sourceforge.net, since they
    are not available at apache.org.
  - Improved performance of release process greatly. Biggest gain is made by
    sending a compressed archive of files to the web server instead of all
    individual files separately.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.1.0 ALPHA 2:

* XINS/Java Server Framework:
  - If no build version is provided, just set a warning in the log instead of
    throwing a exception.

* XINS/Java Client Framework:
  - Improved XINSCallResultParser with regard to logging, documentation,
    memory use and performance.
  - Changed DataElement class to support namespaces. Some methods have been
    deprecated in favor of new ones.

* Generation of server-side Java code:
  - Import type classes for the generated implementation class.

* Generation of specification documentation:
  - Added support for multiple elements in the output data section.

* Logdoc:
  - Added French locale.
  - XML files are now in UTF-8 encoding format.
  - Fixed small error on the English translation of the server side logdoc.
  - Translation bundle are now possible on multiple lines.

* Libraries
  - Upgraded Log4J from 1.2.6 to 1.2.9.
  - Upgraded Jakarta Commons Logging from 1.0.3 to 1.0.4.
  - Upgraded xmlenc from 0.43 to 0.44.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.1.0 ALPHA 1:

NOTE: This release is based on XINS 1.0.0-beta11.

* XINS/Java Client Framework:
  - Fixed SF.net bug #1063699: Log if call fails on error code. The log
    message 2112 was already defined for this purpose, but it was just not
    used in the code.
  - Fixed SF.net bug #1063672 (XINS call logging: Only first failure is
    logged). Each individual failure is now logged, per target.
  - Fixed bug #1063818: XINSResultParser fails if spaces exist between XML
    elements.
  - Fixed SF.net bug #1063785: Double spaces in description of a
    XINSCallRequest.
  - Removed deprecated methods from class DataElement:
    . public Iterator getChildren()
    . public Iterator getChildren(String name)
    Changed the tests accordingly.
  - Removed class field SERVICE_DESCRIPTOR_TYPE that was deprecated since XINS
    1.0.0-beta6.
  - Removed log message which previously had the ID 2101, since it did not add
    any information. Previously it was logged right after a call was
    performed, whether it was successful or not. Replaced it by a log message
    that indicates that a successful XINS result was received. This message
    previously had ID 2111, but it was never actually logged. Now it is, but
    on 2101. The ID 2111 is now used for a new log message for unexpected
    exceptions caught while calling the XINS service.
  - Removed log message with ID 2107 (XINS result received, status code is
    considered acceptable) since it not considered useful.
  - Now actually logging message 2109 (Unrecognized I/O error while calling
    XINS service).
  - Unified translations in the 21xx range.
  - Changed level of the following log messages to WARNING:
    . 2102 (was INFO);
    . 2103 (was INFO);
    . 2104 (was INFO);
    . 2105 (was INFO);
    . 2106 (was INFO);
    . 2108 (was INFO);
    . 2109 (was NOTICE);
    . 2110 (was NOTICE);
    . 2111 (was INFO);
    . 2112 (was INFO).
  - Added log message 2113: XINS call request completely failed.
  - Changed log messages 2200 and 2206 to include namespace.
  - Improved XINSCallResultParser behavior. Logging is improved and the parser
    is now XML Namespaces-aware.

* XINS/Java Server Framework:
  - Fixed bug #1036854: Reset logging subsystem when reloading.
  - If the "org.xins.server.config.reload" is zero the FileWatcher won't be
    started.
  - Added _ReloadProperties meta function.
  - Changed the way the _GetSettings meta-function retrieves the system
    properties. It now succeeds without throwing an exception even if a
    SecurityManager denies access to system properties.
    This fixes an issue with the integration with NetBeans 4.0-beta2.
  - Slightly changed exception handling in bootstrapping code in API class.
    The behavior should remain the same, though.

* XINS/Java Common Library:
  - Added new types Float32 and Float64.
  - Added new type Base64.
  - Added a new Base64 class that perform base 64 encoding and decoding.
  - Changed the level of all Logdoc messages in the 'service' group to DEBUG.
    Proper logging is the responsibility of the ServiceCaller subclass and
    corresponding classes.
  - Changed UnexpectedExceptionCallException constructor: The 'cause' argument
    is now mandatory.
  - Changed FileWatcher class: Logging message 1052 each time a callback
    method throws an exception. The exception is still ignored, as before.
  - Changed HTTPServiceCaller class: Logging message 1052 when
    HttpMethod.releaseConnection() throws an exception. The exception is still
    ignored, as before.
  - Changed TimeOutController class: Logging message 1052 when
    Thread.join(int) throws an InterruptedException. The exception is still
    ignored, as before.

* Generated CAPI classes:
  - Fixed bug #1061692: A NullPointerException was thrown when using
    Java 1.4.0 or Java 1.4.1.

* Generation of specification documentation:
  - Fixed bug #1061692: A NullPointerException was thrown when using
    Java 1.4.0 or Java 1.4.1.
  - Fixed bug #1064487: The function name is not written in the examples.

* Generation of server-side Java code:
  - Fixed bug #1061692: A NullPointerException was thrown when using
    Java 1.4.0 or Java 1.4.1.
  - Fixed bug #1063006: log.xml with alpha DTD fails if no server reachable.
  - The xins-client.jar file is now also included in the generated war file.

* Generation of types Java code:
  - Fixed bug #1061692: A NullPointerException was thrown when using
    Java 1.4.0 or Java 1.4.1.
  - Added new types float32 and float64.
  - Added new type base64.
  - If the type is not specified '_text' is used as default.

* Logdoc:
  - Added new types float32 and float64.

* Javadoc
  - Changed URL at the bottom of the pages to http://www.xins.org.

* Build and release process:
  - Adapted the release process to the new XINS version format.
  - Added netbeans-debug task.
  - Disabled optimization for javac.

* Libraries:
  - Updated Apache Jakarta Commons HttpClient from 2.0.1 to 2.0.2.

* Added support for the -version argument for the xins commands.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.0.1 FINAL:

* Tests
  - The unknownFunction and unknownMetaFunction tests used to take 5 seconds.
    This is fixed.

* XINS/Java Common Library:
  - Set the unused values to null in the HTTPServiceCaller after popping the
    diagnostic context identifier.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.0.1 RELEASE CANDIDATE 3:

* XINS/Java Common Library:
  - Fixed a bug in the ExpiryStrategy class, which caused the slot count to be
    incorrect if the time-out is not a multiple of the precision.
  - Changed the ExpiryStrategy to use weak references to the ExpiryFolder
    instances instead of strong references.
  - Marked class Doorman as deprecated. The ExpiryFolder implementation no
    longer uses a Doorman but uses synchronized sections instead. Effectively,
    this fixes the following SF.net bugs:
    . #1089007: Memory leak in Doorman
    . #1089086: Programming error in ExpiryStrategy / Doorman
    . #1089597: Time-outs while calling Doorman.enterAsWriter()
    . #1089600: Time-outs while calling Doorman.enterAsReader()
  - ExpiryFolder now has a constructor that just takes a name and an
    ExpiryStrategy. The old constructor (which accepted a 'strict' flag and a
    maximum queue wait time) has been deprecated.

* Build and release process:
  - Added 'netbeans-debug' target in build.xml file

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.0.1 RELEASE CANDIDATE 2:

* XINS/Java Server Framework:
  - No longer determining function name in API class _again_, but rather
    pasing the FunctionRequest object from the APIServlet to the API. This
    fixes the problem that XINS 1.0.1-rc1 only accepts a call if both
    _function and function are specified.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.0.1 RELEASE CANDIDATE 1:

* XINS/Java Common:
  - The diagnostic context identifier is removed after being popped
    otherwise the thread stays in memory.
  - Reset some variables after the HTTP call, so that the variables can be
    garbage collected. This should reduce the suspected memory leak.

* XINS/Java Server Framework:
  - Added NDC.remove() after popping the diagnostic context identifier for the
    servlet.

* Generated specification documentation:
  - Sending down _convention=_xins-std with calls to _GetVersion,
    _GetStatistics and _GetSettings.

* Generation of server-side Java code:
  - Fixed the parameter name set in the web.xml file used for the calling
    convention to the correct value.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.0.1 BETA 2:

* XINS/Java Server Framework:
  - Added support for calling conventions. By default the "_xins-std" calling
    convention (which is compatible with XINS 1.0.0) is used. However it can
    be overridden in the impl.xml file by setting the property
    org.xins.server.calling.convention to "_xins-old". And this one can again
    be overridden by passing "_convention=_xins-std" with a call request.
  - Improved logdoc:
    - changed entry 3210, added the reason for an invalid property value at
      bootstrap;
    - changed entry 3412, added the reason for an invalid property value at
      initialization;
    - added entry 3230, regarding a security exception while retrieving the
      runtime properties file location;
    - changed entry 3300, regarding initializing the logging subsystem, now
      including the config file name.
  - Some minor improvements in the API servlet regarding state handling,
    exception reporting, logging, etc.

* XINS/Java Client Framework:
  - Sending down "_convention=_xins-std" with each call request.

* Generated test forms:
  - Sending down "_convention=_xins-std" with each call request.

* Libraries:
  - Updated xmlenc from 0.43 to 0.46 to improve performance.
    Typical impact on performance: Medium.
  - Updated Apache Jakarta Commons HttpClient from 2.0.1 to 2.0.2.
    Typical impact on performance: Unknown.

* Logdoc:
  - Optimized performance: the Logger object is looked up only once, the first
    time that the entry is logged.
    Typical impact on performance: Major.

* DTD:
  - Added the calling-convention element to api_1_0_alpha.dtd and
    impl_1_0.dtd.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 1.0.1 BETA 1:

* XINS/Java Server Framework:
  - Fixed SF.net bug #1076638: The generated diagnostic context ID did not
    conform to the Wanadoo NL Architect Group recommendation. It does now.
  - When a function is called, the <result/> element now contains a "success"
    attribute which is set to "false" if there is an error code and to "true"
    if there is none.
    Also, if there is an error code, it is not only put in the "errorcode"
    attribute, but also in the "code" attribute.
    This is to improve compatibility with XINS 0.130 and XINS 0.168, which are
    still used in production systems.
