______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.137:

* XINS/Java Client Framework:
  - Improved ActualFunctionCaller class:
    . If a parameter key is null or empty string, it is ignored.
    . Parameter keys cannot start with an underscore.
    . Parameter keys are now properly URL-encoded.
    . If a parameter value, converted to a string is null or empty string,
      then it is ignored.
    . Storing CRC32 in an int.
    . Added method ping()
    . Added method getRemoteXINSVersion()
    . Never calling _NoOp in constructor. The application can use ping() if
      appropriate.

* Generated CAPI classes:
  - Generating package.html.

* Generated type classes:
  - Generating package.html.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.136:

* XINS/Java Client Framework:
  - Copied all getter methods from CallResult to UnsuccessfulCallException,
    except isSuccess(). Deprecated getCallResult() in the latter class.
  - Added class CallIOException that extends CallException and wraps around an
    IOException.
  - Added class UnacceptableCallResultException that extends CallException and
    accepts an optional reason only.

* Generated CAPI classes:
  - Call methods now only throw CallException.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.135:

* XINS/Java Client Framework:
  - By default not calling _NoOp at construction of ActualFunctionCaller.

* Generation of test forms:
  - Using 'function' parameter instead of '_function' parameter again. This is
    due to the fact that old APIs may not have switched to '_function' yet,
    while the newer APIs still support 'function.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.134:

* XINS/Java Client Framework:
  - Fixed bug. Now correctly URL encoding parameter values.

* XINS/Java Common Library:
  - Fixed bug in the toString() method in the Properties class, in the types
    package. Previously it did not include any ampersands.

* Generated CAPI classes:
  - Fixed bug. Not throwing NPE if an optional parameter for a function call
    is not provided.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.133:

* Generated build file:
  - Printing timestamp after WAR creation.

* Slightly improved urlencode.xslt. Added '^' symbol.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.132:

* XINS/Java Client Framework:
  - Sending 'function=FunctionName' instead of '_function=FunctionName' for
    backwards compatibility.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.131:

* XINS/Java Common Library:
  - Added PropertyReaderConverter class.

* XINS/Java Client Framework:
  - Added AbstractCAPI class.

* Generated CAPI classes:
  - CAPI classes now extend org.xins.client.AbstractCAPI

* The xins -version command now prints Java and Ant version directly from the
  XINS build file.

* Generated build file:
  - Previously, the generated build file would assume that an API defines at
    least one type. Otherwise the build would abort in an unexpected way.
    Fixed that.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.130:

* XINS/Java Server Framework:
  - Fixed a bug that caused the _GetSettings function to fail.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.129:

* XINS/Java Server Framework:
  - Starting the configuration file watch thread only after the API has been
    initialized, during servlet initialization.
  - Reading the configuration file check interval from the configuration file
    self, at servlet initialization and at reinitialization.

* XINS/Java Common Library:
  - Changed FileWatcher class to add end() method that stops the thread.

* Building XINS:
  - Simplified target names by removing '-framework' suffixes.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.128:

* XINS/Java Server Framework:
  - Made Function.getAPI() public.
  - Renamed CallContext.getSuccess() to isSuccess() and made it public.

* Generation of Java Fundament classes:
  - Fixed bug that caused CallContext.createSession() to be called, even if
    the function failed.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.127:

* XINS/Java Server Framework:
  - Re-initialization fixed and tested. It now positively works.

* XINS/Java Common Library:
  - Introducing SourceForge AddRelease task that automates the procedure of
    uploading a distribution file, adding a release to the SourceForge package
    and then adding the distribution file to this release.
    This is work in progress.

* Dependencies:
  - Added Jakarta Commons Net 1.0.0 to compile-time dependencies, for the
    SourceForge AddRelease task.

* Building XINS:
  - File .sourceforge.properties is now expected to be in the user home
    directory. It should contain the properties 'sf.user' and 'sf.password'.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.126:

* Updated xmlenc to 0.39.

* Added TODO file.

* There is now only a single package: xins-VERSION.tar.gz, which contains
  source code, Javadoc, JAR files, etc.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.125:

* XINS/Java Server Framework:
  - Rewrote the initialization procedure. Introduced more states and split up
    between build-time configuration (called 'bootstrapping') and
    runtime-configuration ('initialization'). There is now no principal
    difference between initialization and re-initialization anymore.
  - Response validation is now a runtime configuration setting.
  - Changed the output format of _GetSettings.
  - Changed LifespanManager from interface to abstract class. This will
    break existing code that is based on the LifespanManager interface
    introduced in XINS 0.120.
  - Changed Log4J categories. There is now one category for the bootstrap
    phase, one for the initialization and re-initialization and one for the
    shutdown.
  - Consistenly using the following terms for different kinds of configuration
    settings in Javadoc comments, inline comments, log messages and the output
    of _GetSettings:
    . System properties:  Set by passing arguments to the JVM when starting it.
                          Retrieved using System.getProperty().
    . Build properties:   Stored in the web.xml file and retrieved from the
                          ServletConfig object using
                          ServletConfig.getInitParameter(String).
    . Runtime properties: Stored in the XINS configuration file.
  - Fixed some Checkstyle-reported issues.

* XINS/Java Client Framework:
  - Simplified implementation of CallResultParser slightly.`
  - Fixed some Checkstyle-reported issues.

* XINS/Java Common Library:
  - Changed FileWatcher class: A null listener is now declined by the
    constructor. This fixes the issue that a null listener would cause
    NullPointerExceptions at runtime.
  - Fixed some Checkstyle-reported issues.

* Generated test forms:
  - Parameter specifying function name has been renamed from 'function' to
    '_function'. One step closer to completely switching to '_function'.

* Generated specification documentation:
  - Function specifications: No longer showing success column in result code
    table.
  - Function specifications: Simplified algorithm to determine if an example
    is successful. If a result code is specified, then the example is not
    successful.

* Changed README file to explicitly state that Apache Ant 1.5.3 is required.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.124:

* Generation of Java fundament classes:
  - Fixed a bug that kept the APIImpl class from being initialized properly.

* XINS/Java Server Framework:
  - Not completely failing if the API could not be initialized at startup.
    Instead of a 'fatal' message, an 'error' message is logged. The
    configuration file is still checked every 10 seconds.

* XINS/Java Client Framework:
  - Exception class UnsuccessfulCallException now constructs a message. If
    there is a result code, it will be in the message.
  - Improved exception message for ParseException in CallRequestParser class.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.123:

* Generation of Java fundament classes:
  - Fixed problem in api_to_java.xslt, introduced in XINS 0.122.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.122:

* Generation of Java classes for types:
  - Fixed bug in generated getItemByValue(String) method.

* XINS/Java Server Framework:
  - Improved Javadoc documentation of a few classes, like APIServlet and API.
  - Improved error-checking and logging.
  - Removed Singleton interface. Warning: This may break existing code.
  - Changed the interface of LifespanManager in an incompatible way. Warning:
    This may break existing code.
  - Supporting re-initialization of a LifespanManager.
  - Successful result codes are no longer supported. Removed the corresponding
    constructors and methods from the ResultCode class. This may break
    existing code.

* XINS/Java Client Framework:
  - Improved Javadoc for MultipleIPAddressesException class.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.121:

* The XINS JAR file is now built to run on Java 1.3+ VMs. Java 1.2 is no
  longer supported.

* XINS/Java Server Framework:
  - Rewrote the initialization procedure and most of the log messages.
  - Added sensibility checks.
  - Soft requirement is now that the Java VM be started with a property
    "org.xins.server.config" pointing to a configuration file. This
    configuration file is automatically reloaded every 10 seconds.
  - The _NoOp function now also works if the API is in the process of shutting
    down.

* XINS/Java Common Library:
  - Added class org.xins.util.io.FileWatcher.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.120:

* XINS/Java Server Framework:
  - Changed and improved logging. All classes in org.xins.server now log to
    only 2 categories: org.xins.server.LIFESPAN and org.xins.server.RUNTIME.
    Logging the build-time XINS version now, too. Using the log level FATAL if
    the servlet fails to initialize. Logging the location of the Log4J
    configuration file using the INFO instead of the DEBUG level.
  - Responder interface now extends Log interface too. Use this for logging.
  - Replaced Singleton interface with LifespanManager interface. The Singleton
    interface and all methods that accept a Singleton instance are marked as
    deprecated.

* XINS/Java Client Framework:
  - Fixed a typo in the Javadoc comment for parse(Reader) in class
    FunctionCallerParser.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.119:

* XINS/Java Server Framework:
  - Added CallResult, CallResultBuilder, BasicCallResult and
    CallResultOutputter classes.
  - Refactored the core. Including APIServlet, API, CallContext and Function
    classes. Now using a CallResult-based approach.
  - Removed ResponseValidator class.
  - Removed UNININITIALIZED state in class ResponderStates.
  - None of the methods in the Responder interface now throws an IOException
    anymore.
  - Improved accuracy of the duration in the function statistics.
  - In the past MissingSessionID, InvalidSessionID and UnknownSessionID were
    ignored in the logging and function statistics keeping. This is now fixed.
  - Removed InvalidSessionIDException, MissingSessionIDException and
    UnknownSessionIDException classes.
  - Improved logging. Always including call ID.

* Generation of specification documentation:
  - Fixed link to API owner mail address.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.118:

* XINS/Java Common Library:
  - Changed the ServiceDescriptor class. Improved the URL pattern to accept
    hyphens.

* Generation of specification documentation:
  - Added session-related result codes. Only displaying appropriate result
    codes.

* Generation of test forms:
  - Displaying input field for session identifier for session-based functions.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.117:

* XINS/Java Common Library:
  - Refactored MandatoryArgumentChecker. Simplified. No longer using
    MissingArgumentException.
  - Removed MissingArgumentException class.
  - Catching unexpected Perl5Matcher exceptions. If such an unexpected
    exception is caught, the concerning string is considered to be invalid for
    the type. An error will be logged.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.116:

* XINS/Java Common Library:
  - GroupDescriptor: Now correctly iterating over services randomly. Ordered
    iterating has been implemented but is yet untested.
  - ServiceCaller: Improved logging.
  - ServiceDescriptor: Improved (fixed) URL matching pattern.
  - DescriptorBuilder: Logging exception if ServiceDescriptor cannot be
    constructed.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.115:

* Added Jakarta Commons HttpClient JAR file (commons-httpclient.jar) to
  dependencies (compile- and runtime).

* XINS/Java Common Library:
  - Added class NonASCIIException to class org.xins.util.text.
  - Added decode(String) method to org.xins.util.net.URLEncoding.
  - Changed encode(String) method in org.xins.util.net.URLEncoding to throw a
    NonASCIIException when appropriate.
  - Moved service descriptor classes from package org.xins.util.sd to package
    org.xins.util.service.
  - Property 'timeOut' in class ServiceDescriptor is now an int instead of a
    long.
  - Added Service class and friends in org.xins.util.service, meant to easen
    and standardize implementations of service calling functionality that
    supports load-balancing, failover and time-outs.
  - Added HTTPService class in org.xins.util.service.http, as the first
    implementation of a Service, new-style. In time, this class will replace
    the HTTPRequester class and part of the FunctionCaller /
    ActualFunctionCaller / CallTargetGroup hierarchy.
  - Added LDAPService class in org.xins.util.service.ldap, another
    implementation of a Service, new-style.
  - Class TypeValueException now properly generates an exception message when
    it is constructed.
  - Added a TypeValueException constructor that takes an additional argument:
    'additionalInfo'.

* XINS/Java Client Framework:
  - UnsuccessfulCallException and InvalidCallResultException now both derive
    from a new exception class CallException.

* All Java classes:
  - No longer throwing InternalError, but throwing Error instead. The
    description of the InternalError class clearly states the error pertains
    to a Java Virtual Machine internal error. So InternalError is not
    appropriate here.

* Generation of Java type classes:
  - Set reloadstylesheet='true' for the type_to_java conversions.
    This is to work around a bug in Java 1.4.1.
    Note that this doesn't work in Ant versions prior to 1.5.2.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.114:

* XINS/Java Server Framework:
  - Added method getName() to API class.
  - ResultCode constructor now logs a warning if it is marked as successful.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.113:

* Generated Java type classes:
  - Moved type_to_java.xslt from src/xslt/java-fundament to
    src/xslt/java-types.

* Generated CAPI classes:
  - Refactored some of the XSLT.
  - Fixed some small issues in the Javadoc comments of the generated CAPI
    classes.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.112:

* Generated CAPI classes:
  - Changed the contract of the generated getItemByValue(String) methods for
    enum types to behave like the Type.fromString(String) method. A null
    argument will cause null to be returned. An unrecognized value will cause
    a TypeValueException.
  - Applied some type-related fixes and improvements in the XSLT. Output
    parameters now also support enumeration types.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.111:

* Generated CAPI classes:
  - The Javadoc for the generated Item classes for enum types now link to
    their instances.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.110:

* Generated CAPI classes:
  - If a function returns only a data section and no output parameters, then
    the generated calling method for that function will return an
    org.jdom.Element object directly.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.109: (based on XINS 0.108)

* Generated CAPI classes:
  - Main class is now called 'CAPI' instead of 'API' to reduce confusion with
    other classes named 'RemoteAPI', 'API' or 'APIImpl'.
  - Applied some refactorings to make the XSLT easier to read and maintain.
  - Now using <enumtype>.Item classes as the type for input parameters that
    denote enumeration types. This may break existing code that expects a
    java.lang.String object instead.
  - Result classes generated for functions that return a data element now
    define a method getDataElement() that returns an org.jdom.Element object
    instead of a list of the contained elements. This may break existing code
    that expects a List instead.

* Generated fundament classes:
  - Now using <enumtype>.Item classes as the type for input parameters that
    denote enumeration types. This may break existing implementation code that
    expects that the signature of the call method accepts a java.lang.String
    instead.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.108.1:

* Fixed XINS build.xml file: The 'bin-package' target now correctly depends on
  'java-client-framework' target.

* Generation of Java type classes:
  - Set reloadstylesheet='true' for the type_to_java conversions.
    This is to work around a bug in Java 1.4.1.
    Note that this doesn't work in Ant versions prior to 1.5.2.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.108:

* Improved performance of Java type class generation.

* Now including type classes in CAPI JAR files.

* Generated CAPI: Return output parameter value directly if there is only one
  output parameter.

* Refactored quite some XSLT.

* Generated specification documentation:
  - Footer now contains XINS version.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.107:

* Generated specification documentation:
  - Improved URL encoding of the links to the test forms.

* Generated API classes:
  - Now supporting properties types.

* Generated CAPI classes:
  - Fixed bug so that Result classes are now properly generated for functions
    that only return a data section and no output parameters.

* Fixed Javadoc generation for both generated API classes and CAPI classes.
  Both now include the generated classes for the types in a separate package
  per API.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.106:

* Added standard type _properties.

* XINS/Java Common Library:
  - Added class Properties to represent new type _properties.
  - Added class PropertiesPropertyReader.
  - Added fast URL encoding/decoding functions in new class
    org.xins.util.net.URLEncoding.
  - Added method checkValue(String) to class Type.

* Generated specification documentation:
  - Improved generated specifications for types.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.105:

* XINS/Java Client Framework:
  - Class ActualFunctionCaller: Added static setCallAtConstruction(boolean)
    method that controls if an ActualFunctionCaller that is being constructed
    actually checks if the API is up or not. Default remains true.

* XINS/Java Common Library:
  - Added org.xins.util.sd package.

* Generated specification documentation:
  - Function parameter in examples is now called '_function' instead of
    'function'.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.104:

* Updated xmlenc to 0.37.

* XINS/Java Client Framework:
  - MultipleIPAddressesException: Improved message. Storing host name and
    addresses.
  - At construction time, ActualFunctionCaller checks if the API is actually
    up or not, and logs this. It does this by calling the _NoOp function on
    it.
  - Improved stability of ExpiryFolder. Fixed bug in counting of members.

* Generated API docs and XINS API docs now correctly link to Apache Ant API
  docs at nagoya.apache.org.

  *** NOTE ***
  The memory leak reported about in the XINS 0.97 release notes has probably
  been fixed in 0.98.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.103:

* Generated Java CAPI classes: Supporting data sections.

* Generated Ant buildfile now set window and document title for generated
  Javadoc documentation for both API implementation and call interface
  classes.

* Fixed generated Javadoc documentation so that XINS version is correct again.
  This was probably erroneous since XINS 0.85.

* Linking generated Javadoc to xmlenc 0.36.

* XINS/Java Common Library:
  - Added class field EMPTY_LIST to class CollectionUtils.

* Linking XINS API documentation to xmlenc 0.36 API documentation.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.102:

* XINS/Java Server Framework:
  - Added getAttributes() to class Session.
  - Added standard function _PerformGC that calls System.gc(). See:
    http://java.sun.com/j2se/1.3/docs/api/java/lang/System.html#gc()

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.101:

* XINS/Java Common Library:
  - Fixed bug in FastStack class: Changed clear() method so it unlinks all
    objects so they can be garbage collected.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.100:

* XINS/Java Server Framework:
  - No longer failing at initialization if build time and host are not set.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.99:

* Fixed bug that caused XINS projects that had deployment-required set to
  false fail when no deployment was defined.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.98:

* XINS/Java Server Framework:
  - Statistics collection for functions: Creating a new FastStringBuffer every
    time, not synchronizing on shared buffers anymore. Used to have one
    FastStringBuffer for successful, and one for unsuccessful calls.
  - Recreating CallContext object each time, not caching per thread.
  - Added property for en-/disabling response validation. Default is now
    disabled. To enable it, add the following to the <impl-java> section in
    api.xml:

    <param name="org.xins.server.responseValidation">true</param>

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.97:

* XINS/Java Common Library:
  - Class Doorman: Changed the way failed thread synchronization checks are
    dealt with if strict thread synchronization checking is disabled (i.e. set
    to loose).
    When the current writer attempts to enterAsReader(), then
    leaveAsWriter() is first called. It is assumed that for some reason it was
    not called, although it should have been.
    Vice versa, when a current reader attempts to enterAsWriter(), then
    leaveAsReader() is first called.
    Furthermore, now resetting the interrupted state in enterAsReader() and
    enterAsWriter(), since the thread may have been interrupted between the
    Thread.sleep(long) call and the acquiry of the _currentActorLock lock.
    Hopefully this decreases the error sensitivity.
    Also: Throwing Error instead of IllegalStateException.

* XINS/Java Server Framework:
  - Added method reinit(PropertyReader) to interface Singleton. Could
    potentially breaks existing code.

  *** WARNING ***
  There may be a 'memory leak' in this release. It is expected that this issue
  exists at least since release 0.65.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.96:

* XINS/Java Common Library:
  - ExpiryStrategy now allows explicit stopping of timer thread.

* XINS/Java Server Framework:
  - API.destroy() now explicitly stops ExpiryStrategy timer thread.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.95:

* XINS/Java Server Framework:
  - Class CallContext: Changed log level from ERROR to DEBUG for invalid
    session ID.
  - Class API: Added getTimeZone() and getCurrentSessions().
  - Class Function: Made field _api protected.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.94:

* XINS/Java Common Library
  - Explicitly marked ExpiryStrategy.TimerThread as daemon thread. This may
    fix a shutdown issue on Solaris.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.93:

* XINS/Java Commons Library:
  - Added logging of expired entries in class ExpiryFolder.
  - Fixed 4 bugs in class Doorman.
  - Improved logging in class Doorman.
  - Allowing strict thread synchronization checking to be enabled or disabled
    in class Doorman. If disabled, some checks will result in a warning being
    logged instead of an exception being thrown.
  - Made class org.xins.util.text.DateConverter Java 1.3-compliant.

* XINS/Java Server Framework:
  - Fixed API class so it runs under Java 1.3. Needs Java 1.4+ to compile,
    though.
  - Fixed queue time-out for the collection of sessions to 5 seconds.

* This release must still be compiled with Java 1.4+, but at runtime this
  release is compatible with Java 1.3+.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.92:

* Improved stability of Doorman.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.91:

* XINS/Java Server Framework:
  - More output from _GetStatistics:
    . number of available processors
    . free heap memory, see:
    . total allocated heap memory
    . maximum heap memory
  - Improved logging output and exception messages in class Doorman.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.90:

* XINS/Java Common Library:
  - Doorman: Fixed bug. Improved logging.
  - ExpiryFolder: Improved stability in case of out-of-memory errors.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.89:

* XINS/Java Server Framework:
  - Added 'startup' attribute to 'initialization' tag in output of function
    _GetSettings.
  - Function _GetStatistics returns "N/A" instead of "NA" if certain
    information is not available.
  - Function _GetSettings no longer returnes the startup time. That is now
    returned from _GetStatistics.

* XINS/Java Common Library:
  - Added DateConverter that produces a human-readable date.

* Printing time stamps in format 'yyyy.MM.dd HH:mm:ss.SS' everywhere. Not
  displaying milliseconds since Epoch anymore. This applies to _GetStatistics
  and to the build time returned by _GetSettings.

* This release must be compiled with Java 1.4+.

* At runtime this release is compatible with Java 1.4+ only.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.88:

* XINS/Java Server Framework:
  - Fixed the class description for MissingSessionIDException and
    UnknownSessionIDException.
  - Expecting Log4J config file to be specified in property
    'org.apache.log4j.config'.
  - Replacement strings should now be between square brackets ('[' and ']')
    instead of curly ones ('{' and '}').
  - Added a default function _NoOp that does nothing but return
    <result success="true" />.
  - Function _GetSettings no longer returns a <build /> section, since all the
    properties are already in the <initialization /> section.
  - Fixed bug in logging of deployment ID.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.87:

* XINS/Java Server Framework:
  - Changes to function _GetSettings:
    - All properties are returned as a <property /> elements.
    - New section <build /> added, containing deployment identifier, build
      host and build time stamp.
    - Renamed section <init-settings /> to <initialization />.
    - Renamed section <system-properties /> to <runtime />.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.86:

* Added support for _xslt parameter. When specified, the returned XML will
  contain a processing instruction in the form:

     <?xml-stylesheet type="text/xsl" href="{URL}"?>

  in browsers like Internet Explorer and Mozilla this will result in the
  specified XSLT to be applied to the result XML, client-side. Note that the
  appropriate Security settings need to be applied if the XSLT is from a
  different source than the source XML.

* XINS/Java Server Framework:
  - Fixed bug in CallContext.fail(ResultCode).
  - Added CallContext.fail(ResultCode,String). The seconds parameter is the
    message to include in the output.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.85:

* Improved the automatic release process. Introduced .version.properties.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.84:

* Generated test forms:
  - Fixed a bug in the generated SELECTs for enums.

* Supporting deployment-required="true" in api.xml, in the element
  api/impl-java.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.83:

* Generated CAPI classes:
  - Fixed bug. All generated function calling methods now correctly check
    result.isSuccess(). If it returns false, then an UnsuccessfulCallException
    is thrown.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.82:

* XINS/Java Common Library:
  - Added class Replacer to package org.xins.util.text.

* XINS/Java Server Framework:
  - Supporting replacements in servlet initialization settings.
  - Supporting setting 'log4j.configFile' in api.xml. Will trigger a
    PropertyConfigurator.configureAndWatch().

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.81:

* XINS/Java Server Framework:
  - Class APIServlet: Improved logging and applied some small improvements.
  - Function _GetSettings now returns system properties as well, not just the
    initialization settings.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.80:

* Fix minor typo in Javadoc comment (class FunctionCallerParser).

* Simplified and improved logging in class APIServlet.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.79:

* Shell script 'xins' has been improved. These changes have not been applied
  to xins.bat (yet):
  - support added for -deployment option
  - supports for -bypass option that disables the regeneration of the Ant
    buildfile. The buildfile must already exist.

* Shell script 'xins' now distinguishes between SystemV and BSD systems. Based
  on this, either 'echo -n "text"' or 'echo "text" \c' is used when no newline
  should be output.

* XINS/Java Server Framework:
  - Logging deployment ID if any was specified at build time.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.78:

* XINS/Java Server Framework:
  - Added support for default functions.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.77:

* Generated web.xml file now has indentation enabled.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.76:

* Supporting the attribute 'mapping' in the impl-java tag in the api.xml file.
  This results in a custom url-pattern being set in the generated web.xml
  file.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.75:

* XINS/Java Server Framework:
  - Displaying XINS version when initializing.
  - Session-based methods now check if the API is really session-based. If it
    is not, then they throw an IllegalStateException.
  - A warning is logged if APIServlet has to initialize Log4J without
    initialization settings.

* Upgraded xmlenc from 0.34 to 0.36.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.74:

* XINS/Java Common Library:
  - Added class BooleanConstants.

* XINS/Java Client Framework:
  - Added class SessionIDSplitter.
  - Added method getActualFunctionCallers() to interface
    CompositeFunctionCaller and to CallTargetGroup (which implements that
    interface.)
  - Added method getActualFunctionCallerByCRC32(String) to interface
    FunctionCaller and to classes CallTargetGroup and ActualFunctionCaller.

* Generated CAPI classes now support sticky sessions, based on splitting
  client session ID in identifier for target API and server-side session
  identifier.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.73:

* Resolved some Checkstyle warnings.

* Generated Javadoc API documentation for XINS projects can no longer link to
  -dev versions of XINS. When determining the version of the online XINS API
  documentation to link to, the -dev part is removed.

* XINS/Java Common Library:
  - Renamed class org.xins.util.LongUtils to org.xins.util.text.HexConverter.
    Extended functionality of HexConverter to support converting ints to hex
    strings.

* XINS/Java Server Framework:
  - Small performance improvements by switching to using FastStringBuffer in
    some occasions (instead of the String append operator +).

* XINS/Java Client Framework:
  - CallResult now has a link to an optional ActualFunctionCaller instead of a
    FunctionCaller. This could theoretically break existing code.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.72:

* Format of api.xml: Added boolean attribute 'shared-sessions' to
  'session-based' tag. Default value is 'false'.

* XINS/Java Client Framework:
  - Added getActualFunctionCaller(long) to class CallTargetGroup that
    retrieves an ActualFunctionCaller by CRC-32 checksum of its URL.
  - Added class NonSharedSession.

* Generated CAPI classes:
  - Returning NonSharedSession from functions that create a session within
    APIs that do not have 'shared-sessions' set to 'true'.

* Small Javadoc improvements.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.71:

* Added missing Javadoc comments for some private members.

* Configuration of time-out duration and precision is now done in api.xml.

* XINS/Java Common Library:
  - No longer allowing initial queue size to be set for ExpiryFolder. This is
    overkill.
  - ExpiryStrategy class now logs a debug message at construction.

* XINS/Java Server Framework:
  - API class now gets and interprets session time-out duration and precision.
  - Maximum queue wait time (for the ExpiryFolder containing the sessions) is
    automatically set to half of the session time-out duration.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.70:

* Added session-based tag to api.xml. Needs to be set for session-based APIs.
  A session-based API is defined as an API that contains at least one
  session-based function.
  The specification documentation now marks session-based APIs and functions.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.69:

* Fixed 22 Checkstyle warnings.

* XINS/Java Client Framework:
  - Removed call(String,String,String,Map). from class CallTargetGroup.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.68:

* Improved Javadoc comments.

* XINS/Java Common Library:
  - Removed unused class NoSuchEntryException.
  - Added package.html for package org.xins.util.threads.
  - Fixed bug in standard type classes Int8, Int16, Int32 and Int64, method
    fromStringForOptional(String).

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.67:

* XINS/Java Server Framework:
  - Including Java version in output of _GetVersion.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.66:

* XINS/Java Server Framework:
  - Slightly improved logging for session-based functions.
  - Added InvalidSessionIDException.
  - Removed Session.touch(). It is not needed, since the ExpiryFolder will
    take care of this.
  - Added some missing Javadoc comments to class API.

* XINS/Java Common Library:
  - Added ArrayIterator class.
  - Added FixedArraySet class.
  - Added IndexedMap interface.
  - Added Doorman class.
  - Rewrote ExpiryFolder, based on Doorman class.
  - Removed ExpiryValidator, it was never used.
  - Added ExpiryListener interface.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.65:

* Improved descriptions for Library classes.

* XINS/Java Common Library:
  - Made ExpiryFolder class final instead of abstract.
  - Made ExpiryStrategy constructor public.
  - Fixed bug in LongUtils that cause all session-based functions to fail.
    This bug was introduced in release 0.63 (performance of session ID
    parsing).

* XINS/Java Server Framework
  - Now using ExpiryFolder for storage of sessions. They still don't expiry
    yet, though.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.64:

* Added Library class to both XINS/Java Client Framework and to the XINS/Java
  Common Library

* XINS/Java Servlet Framework:
  - Initializing at startup.
  - Extra state checks in API class.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.63:

* XINS/Java Server Framework:
  - Optimized generated java-fundament classes.
  - Improved performance of session ID parsing.
  - Deprecated NoSuchActualFunctionCallerException.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.62:

* Removed deprecated class org.xins.server.RemoteAPI.

* Fixed bug in output of _GetStatistics that caused total unsuccessful
  duration to be displayed as last unsuccessful duration.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.61:

* Improved generated CAPI classes. This includes a fix for unsuccessful call
  results. These now actually cause an UnsuccessfulCallException.

* XINS/Java Server Framework:
  - Synchronizing on sessions so a single session cannot be used in 2
    functions in parallel.
  - Improved logging.

* Fixed bug in XSLT for generating CAPI classes.

* Improved output with result code MissingParameters.
  Instead of outputting the following (pre-0.61):

     <result success="false" code="MissingParameters" />

  the output would now be, for example:

     <result success="false" code="MissingParameters">
        <data>
           <missing-param name="account"/>
           <missing-param name="password"/>
        </data>
     </result>

* Improved output with result code InvalidParameters.
  Instead of outputting for example the following (pre-0.61):

     <result success="false" code="InvalidParameters" />

  the output would now be, for example:

     <result success="false" code="InvalidParameters">
        <data>
           <invalid-value-for-type param="password" type="password"/>
        </data>
     </result>

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.60:

* Improved automatic generation of session identifiers in API implementation.
  Now marking functions that create session IDs with the attribute
  createsSession='true'.

* Automatically determining XINS version when generating Javadoc API docs.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.59:

* Replaced 'classes-capi-XXX' targets with 'jar-capi-XXX' targets.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.58:

* Fixed bug in generated Java CAPI classes. Now correctly sending session ID
  with session-based function calls.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.57:

* Introduced quite some changes in the type classes in XINS/Java Common
  Library.

* Improved session ID generation in XINS/Java Server Framework. Session ID now
  has the following format: xxxx:yyyy, where xxxx is a 16-digit hex string
  representing the startup time of the API, and yyyy is a 16-digit hex string
  representing a counter. Example value: "000000f622238ca6:0000000000000000".

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.56:

* Slightly improved logging in XINS/Java Server Framework:

* Improved generated CAPI classes, now support sessions.

* Test forms now display a SELECT box for booleans with the options: empty,
  'true' and 'false'.

* In generated specified documentation: No longer displaying standard result
  code as acronym.

* Removed (unused) support for 'dependson' tags in the function
  specifications.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.55:

* XINS/Java Server Framework:
  - Improved logging.
  - Improved initialization and shutdown of XINS/Java Server Framework. Added
    Singleton interface and InitializationException.
  - Slightly improved performance of detection of missing or unknown session
    ID in XINS/Java Server Framework.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.54:

* XINS/Java Server Framework:
  - Fixed bug in CallContext.getSession().
  - Relying on APIServlet.destroy() to call API.destroy() at shutdown. Removed
    shutdown handler from API class.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.53:

* Upgraded to JDOM 1.0b9.

* XINS/Java Server Framework:
  - Added getAttribute(String), setAttribute(String,String) and touch() to
    class Session.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.52:

* XINS/Java Server Framework: Added session support.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.51:

* XINS/Java Common Library: Added class FastStack.

* XINS/Java Server Framework:
  - Performing initialization in a compiler-safe method. If an instance has
    not init(Properties) method, this will be logged and ignored.
  - Performing deinitialization at shutdown using a destroy() method in the
    instances registered with an API.
  - Duplicate attributes per element are now checked.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.50:

* Added ResponseValidator to XINS/Java Server Framework. Duplicate parameters
  are now detected and properly cause a failure.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.49:

* Fixed bug in link to pattern test form (for pattern types).

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.48:

* Hid some of the protected interface of CallTargetGroup, because only classes
  in the same package can derive from this class.

* Fixed bug in statistics output, produced by function _GetStatistics.
  Previously the output was like this (incorrect):

     <function name="Login">
        <successful count="1" average="351">
           <min start="351" duration="351"/>
           <max start="1056118455354" duration="351"/>
           <last start="1056118455354" duration="351"/>
        </successful>
        <unsuccessful count="1" average="6">
           <min duration="6"/>
           <max duration="6"/>
           <last start="1056119178887" duration="6"/>
        </unsuccessful>
     </function>

  Now the output will be like this (correct):

     <function name="Login">
        <successful count="1" average="351">
           <min start="1056118455354" duration="351"/>
           <max start="1056118455354" duration="351"/>
           <last start="1056118455354" duration="351"/>
        </successful>
        <unsuccessful count="1" average="6">
           <min start="1056119178887" duration="6"/>
           <max start="1056119178887" duration="6"/>
           <last start="1056119178887" duration="6"/>
        </unsuccessful>
     </function>

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.47:

* Added 'Caller' demo program. Use target 'demo-caller' to execute it, specify
* the request file and the config file, for example:

     $ ant demo-caller -Drequest=request.xml -Dconfig=config.xml

  with config.xml for example as follows:

     <group type="ordered">
        <group type="random">
           <api url="http://127.0.0.1:22/"    />
           <api url="http://127.0.0.1:80/"    />
           <api url="http://127.0.0.1:30002/api" />
        </group>
        <group type="random">
           <api url="http://localhost:30004/api" />
           <api url="http://localhost:30005/api" />
        </group>
     </group>

  and request.xml for example as follows:

     <request function="_GetFunctionList" />

* XINS/Java Client Framework:
  - Introduced CallRequest and CallRequestParser.
  - Changed FunctionCaller interface to accept a CallRequest.
  - Implementated RandomCallTargetGroup and OrderedCallTargetGroup.
  - Removed RoundRobinCallTargetGroup, it is not used.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.46:

* Added first (limited) set of unit tests.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.45:

* XINS/Java Client Framework: Introduced FunctionCallerParser that parses an
  XML configuration document that defines CallTargetGroups and
  ActualFunctionCallers. An example of such a configuration is:

      <group type="ordered">
         <group type="round robin">
            <api url="http://apihost0.company.com:2087/auth.pl" />
            <api url="http://apihost1.company.com:2087/auth.pl" />
         </group>
         <api url="http://ext-apihost1.company.com:2088/auth.pl" />
      </group>

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.44:

* Major change to the way ActualFunctionCaller works: DNS lookups are now
  performed at construction time. No longer are DNS names accepted that
  resolve to multiple IP addresses. Use CallTargetGroups for this.

* Fixed problem in specdocs/type_to_html.xslt. It used the template
  'urlencode' without including urlencode.xslt.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.43:

* AbstractCompositeFunctionCaller now actually implements
  CompositeFunctionCaller. This fixes a bug in CallTargetGroup, method
  getActualCallTarget(String).

* Added RandomCallTargetGroup and RoundRobinCallTargetGroup classes (no-op).

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.42:

(none)

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.41:

* Fixed the 'xins' shell script to work on non-FreeBSD operating systems. Only
  using 'mktemp' on FreeBSD, using an unsafer method of creating temporary
  files on other unices.

* Fixed XSLT error in src/xslt/specdocs/type_to_html.xslt.

* Slightly improved 'javadoc' target in XINS build file

* Extended XINS/Java Client Framework:
  - Added support for sessions.
  - Renamed class RemoteAPI to ActualFunctionCaller. Deprecated RemoteAPI.
  - Added class AbstractFunctionCaller.
  - ActualFunctionCaller now extends AbstractFunctionCaller.
  - Added class AbstractCompositeFunctionCaller (extends
    AbstractFunctionCaller).
  - Added class CallTargetGroup (extends AbstractCompositeFunctionCaller).

* Improved performance of HTTPRequester (used by RemoteAPI /
  ActualFunctionCaller) by switching to using an unsynchronized
  FastStringBuffer instead of the normal synchronized StringBuffer.

* Improved performance of MandatoryArgumentChecker by letting
  MissingArgumentException use FastStringBuffer instead of StringBuffer.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.40:

* Properly encoding plus characters ('+') while URL encoding the link to the
  test form for a type.

* Storing (un)successful min/maximum start timestamp and displaying it in the
  result of _GetStatistics. In the old situation, the output was similar to
  this:

      <data>
         <function name="MyFunction">
            <successful count="124" average="132" min="13" max="830">
               <last start="1055333674847" duration="196" />
            </successful>
            <unsuccessful count="9" average="244" min="94" max="340">
               <last start="1055333620172" duration="250" />
            </successful>
         </function>
      </data>

  In the new situation the output is similar to this:

      <data>
         <function name="MyFunction">
            <successful count="124" average="132">
               <min start="1055332820374" duration="13" />
               <max start="1055330282035" duration="830" />
               <last start="1055333674847" duration="196" />
            </successful>
            <unsuccessful count="9" average="244">
               <min start="1055200307218" duration="94" />
               <max start="1055231843442" duration="340">
               <last start="1055333620172" duration="250" />
            </successful>
         </function>
      </data>

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.39:

* Made shell script 'xins' executable.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.38:

* Removed DataUnavailableException from XINS/Java Client Framework.

* Added standard types: _text, _boolean, _int8, _int16, _int32, _int64.

* Refactored some of the function_to_html.xslt files.

* Moved org.xins.types package to XINS/Java Common.

* The generated java-fundament classes now support Java data types other than
  String. This may break existing function ...Impl classes.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.37:

* Worked around the problem with Ant when calling 'xins -version'.

* Fixed 'xins -version' on Windows systems.

* Fixed problem: Included JAR files in bin package again.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.36:

* Renamed xins.sh to xins.

* Added CAPI targets for projects. CAPI stands for Client-side Application
  Programming Interface. Data sections are not supported yet though.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.35:

* Fixed some Checkstyle warnings.

* Added ExpiryValidator interface to xins-common.

* Added RemoteAPI to xins-client-framework.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.34:

* Fixed XINS-based project build problems introduced in 0.33.

* Generating separate xins-common.jar.

* Introduced ExpiryFolder (untested).

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.33:

* Renamed xins.jar to xins-server.jar.

* Added XINS/Java Client Framework. Translates into a xins-client.jar.

* Having groups in the Javadoc API documentation set.

* Added JDOM 1.0b8 to dependencies.

* Added HTTPRequester CollectionUtils classes in java-common.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.32:

* If a value for an input parameter is empty, then don't check the type for
  that parameter.

* Added shutdown hook. If the JVM is being shut down, then all request to
  regular functions will get an InternalError result code.

* Changed the names of the responder states to match the field names.

* Added support for generating Javadoc API docs per XINS API.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.31:

* Fixed bug in CallContext.endResponse(). If it was called more than once,
  then it would throw an exception.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.30:

* Fixed bug in CallContext.fail(ResultCode).

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.29:

* Responder: Added method fail(ResultCode).

* Upgraded xmlenc to release 0.33.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.28:

* FastStringBuffer: Supporting appending byte, short, int, long, float and
  double numbers.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.27:

* Disabled deprecation warnings and debug info when building a release.

* Enabled javac optimizations.

* Switched from Checkstyle 2.x to Checkstyle 3.0.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.26:

* Storing links to result codes in API instance.

* Code cleanup.

* In function specification documentation:
  - Only displaying result code in example if there is one.
  - Showing and linking to API result codes.
  - Renamed 'code' attribute to 'name' in resultcode-ref element type.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.25:

* Fixed bug introduced in 0.23 that causes all functions declared in the API
  to be invisible.

* Code cleanup.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.24:

* Separating words with an underscore in generated name of result code in API
  class.

* Removed class DefaultReturnCodes (deprecated since 0.15).

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.23:

* Generating static final fields for result codes in API class.

* Using Singleton pattern for API subclasses.

* ResultCode class is now public.

* Cleaned up generated code in the API class.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.22:

* Improved message when logging succeeded calls.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.21:

* Fixed bug in successful call logging.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.20:

* Cleaned up fallback initialization of Log4J.

* Class APIServlet directly implements Servlet interface, no longer derives
  from HttpServlet class.

* Fixed bug: Also logging successful calls again.

* Result codes are now in external .rcd files.

* Changed term 'return code' to 'result code' in quite some locations.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.19:

* Fixed NPE in CallContext.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.18:

* Logging different types of InvalidParameters errors.

* Linking to Jakarta Commons Logging API documentation.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.17:

* Greatly improved logging. Using Jakarta Commons library. Added it to the
  dependencies.

* Moved handleCall(CallContext) from API class to
  Function class.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.16:

* Fixed problem introduced in 0.15 that keeps the generated java-fundament
  code from compiling.

* Made _log field in the Function class available to subclasses.

* Logging missing parameters.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.15:

* Javadoc API documentation now links to Log4J API documentation.

* Added startResponse(boolean) and startResponse(ResultCode) to replace the
  now deprectated startResponse(boolean,String).

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.14:

* The files CHANGES, COPYRIGHT and README are now in both distribution files.

* Supporting associating returncodes with an API.

* Refactored parameter getting and checking: Moved the functionality from API
  class to Function class, to the handleCall(CallContext) method.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.13:

* Added function _GetSettings that returns the initialization settings.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.12:

* Putting dependencies in source distro.

* Refactored statistics-related code.

* Putting current time in function _GetStatistics output.

* Fixed bug, now resetting success indication and return code.

* Logging function calls.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.11:

* Supporting _function as the parameter specifying the function name.

* Version of xmlenc now in _GetVersion function output.

* Configuring Log4J to print to the console if no configuration is specified
  in the servlet inititialization properties

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.10:

* Generating private Javadoc API documentation.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.9:

* Improved Javadoc documentation.

* Added support for Checkstyle 2.x. See: http://checkstyle.sourceforge.net/

* Returning XINS version from function _GetVersion, not from _GetStatistics
  anymore.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.8:

* Pooling CallContext instances per thread.

* Using custom FastStringWriter for improved performance.

* Including XINS version in output of generic function _GetStatistics.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.7:

* Refactorings applied to create less objects during a function call.

* Flushing output stream in APIServlet instead of API class.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.6:

* Keeping track of last successful and last unsuccessful call start and
  duration times. Returning these from _GetStatistics.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.5:

* Copying resources from source directory to classes/ directory in WAR file.
  This is useful for resources like .properties and .xml files.

* Fixed bug: Skeleton .java files are now actually generated.

* Refactored quite some code in the API, Function and CallContext classes.

* Gathering statistics, which can be retrieved by calling _GetStatistics.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.4:

* Only generating files if the concerning APIs, function and types are
  explicitly mentioned in the concerning lists in xins-project.xml or api.xml.

* Generating skeleton .java files if function implementation files do not
  exist.

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.3:

* Now including dependency JAR files in generated JAR file (xins.jar)

______________________________________________________________________________
CHANGES INTRODUCED IN XINS 0.2:

* Generated APIImpl classes now correctly call init(Properties) on all
  instances.
