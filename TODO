$Id$

This file lists the planned changes for XINS.


______________________________________________________________________________
XINS PROTOCOL AND SPECIFICATION FORMAT

* Result codes should be allowed to have their own specification for output
  parameters and data section.
* Add standard type '_date'.
* Consider allowing a default value to be specified for an input parameter.
  Perhaps this should be specified for a specific implementation instead of
  in the specification.
* Remove 'success' attribute from 'result' element. The existence of the
  'code' attribute indicates an error while the absence indicates success.
* Support API inheritance.
* Define regular expression for input parameter names.
* Allow the following type of constraint to be specified in a function
  specification file: "if input parameter A is set, then input parameter B
  must also be set."
* Allow freezing of api.xml files. Support 'freeze' attribute in DTD and
  copy behaviour from behaviour for frozen .fnc files.

______________________________________________________________________________
XINS/JAVA SERVER FRAMEWORK

* Change _GetStatistics to support reset=true.
* Change implementation of meta-functions from one method per meta-function to
  one class per meta-function.
* Include the timezone in every message that contains a time.
* A new maximum call duration (for a specific function) could be logged.
* CallContext should not rely on CallResultBuilder but implement the
  CallResult interface self.
* CallContext.getCallResult() should either be removed or it should return
  'this'.
* Check state transitions in APIServlet class.
* Set state in API class using private setState(State) method.
* Check state transitions in API class.
* Per State in the APIServlet and API classes define what a valid next state
  is. Change the setState(State) methods to check this.
* Support returning of call ID in function output, as an output parameter
  named '_callID'.
* CallResultBuilder should perhaps not implement CallResult.
* If an invalid value is passed for an input parameter of type _properties,
  the InternalError result code is returned instead of an InvalidParameters.
* Generated Javadoc should include package-private and private members.
* Log an INFO message if some runtime properties are unused.
* Implement a _DumpStatistics function that writes the statistics in a comma
  separated line in a text file.
* Make generated logdoc classes package-private.
* Stop runtime configuration file watch thread when the servlet is disposed.
* Access control rules: Make default behaviour to deny requests. We should
  then be able to remove log message 4033.
* Move the logs in the Function#performedCall() method somewhere else
  and remove this method from Function.
* Log received input parameters.
* Log that the runtime properties file is opened at startup (DEBUG level).
* Refactor the invocation of the call method in the implementation.
  The implementation should now have only a Request object as argument
  and returns a Result object which can be a Successful or Unsuccessful
  result.
* When the runtime properties file is marked as -r (not readable) at startup,
  an error will be logged (3001). After that, the file watch thread is
  started. However, when the permissions of the file are changed so that the
  file is now marked +r (readable), the change is not noticed, since the
  modification date does not change. The framework should notice this and
  reinitialize.
* If input/param/description is empty, then for the generated classes the
  @param section should be appropriate, non-empty.

______________________________________________________________________________
XINS/JAVA CLIENT FRAMEWORK

* Convert to logdoc-approach.
* Support non-200 HTTP return codes.
* Replace FunctionCaller / ActualFunctionCaller / CallTargetGroup hierarchy
  with Service-based solution, implemented in XINS/Java Common Library,
  package org.xins.util.service.
* Add method getRemoteSettings() to class AbstractCAPI. Functionality: Calls
  _GetSettings and converts the result to a RemoteSettings object with build
  properties, runtime properties and system properties.
* Add class MultiCallResult that maps ActualFunctionCaller instances to a
  result. The result is either a CallException or a CallResult.
* Add multi-call functionality to CallTargetGroup.
* Create subclass of UnsuccessfulCallException for the InvalidParameters
  result code.
* Create subclass of UnsuccessfulCallException for the MissingParameters
  result code.
* Send "_function=<name>" instead of "function=<name>" as soon as all existing
  backends support this (in class XINSServiceCaller).
* Abandon JDOM completely, favour SAX for parsing and a custom Document Object
  Model implementation, where appropriate.
* Make sure that the XINSServiceCaller properly supports HTTP result codes
  other than 200. Document the behaviour. Redirects should probably not be
  followed, but this has to be determined.
* Use an IndexedMap in class XINSServiceCaller, for improved iteration
  performance.
* Throw an InvalidKeyException in class XINSServiceCaller, when and where
  appropriate.

______________________________________________________________________________
XINS/JAVA COMMON LIBRARY

* Improve description of class Manageable. It still refers to the term
  'lifespan manager'.
* Convert to logdoc-approach.
* Make LDAPServiceCaller class correctly detect time-outs.
* Change Type class to add a 'version' property.
* Add DateType class to represent standard type '_date'. Add Date class to
  represent an actual date and make this the value class for the DateType.
* Change ExpiryFolder to allow retrieval of slot info.
* Add functionality to allow the retrieval of property names from a
  PropertyReader for which get(String) has not been called.
* Fix @return for method fromStringForOptional(String) in class
  org.xins.types.standard.Properties.
* Create an implementation of interface IndexedMap.
* Implemented and test method isValidValueImpl in class
  org.xins.types.standard.Properties.

______________________________________________________________________________
LOGDOC

* Add the French translation in src/logdoc/translation-bundle-fr_FR.xml.
* Support element in log.xml to reserve an ID that was previously used. For
  example <reserve id="5002" />

______________________________________________________________________________
GENERATED SPECIFICATION DOCUMENTATION

* Display specified output parameters and data section per result code.
* Check all names using regular expressions.
* Make sure a result code does not clash with the default result codes.
* Have a page per environment with links to _GetVersion, _GetStatistics,
  _GetSettings, etc. Let the link on the page for an API link to that page.
* Link to CVSweb or ViewCVS.
* Generate an anchor for each input parameter, output parameter, element and
  attribute in the generated file for a function.
* On specification documentation page for a result code: Have a list of links
  to the functions that specify they may return the result code.
* Use an image to indicate the inheritance relationship between one type and
  another.
* Generate Docbook from the specifications.
* If the api.xml has changed, the specification documentation should be
  regenerated.
* Have an item for a result code page in the header.

______________________________________________________________________________
GENERATED TEST FORMS

* None

______________________________________________________________________________
GENERATED TYPE CLASSES

* None

______________________________________________________________________________
GENERATED XINS/JAVA SERVER FUNDAMENT CLASSES

* None

______________________________________________________________________________
GENERATED XINS/JAVA CLIENT CAPI CLASSES

* Add check to test whether required attributes in returned elements are
  actually available.

______________________________________________________________________________
MISCELLANEOUS

* The standard result codes should be documented online.
* A pattern test script should be provided on http://xins.sourceforge.net/.
* Finish SourceForgeUpload task to smoothen the release process by performing
  the following actions:
  - upload the distribution file(s) to ftp://upload.sourceforge.net/incoming/
  - create a release on the SourceForge site
  - add the corresponding file
  - set the type of the file to '.gz'
  - let SourceForge send a release notification e-mail
* Add date to CHANGES file when a release is created. A (small) custom Ant
  task would need to be developed for this.
* Support the Freshmeat.net XML-RPC interface for notification of new
  releases.
* Refactor documentation.
* Merge the similar targets in build.xml (java-client, java-server,
  -prepare-java-client, -prepare-java-server, -prepare-java-common).
* Link the javadoc to the correct XINS version on sourceforge.
* xslt & xml files should contain a description in their header.
* Generate DocBook and PDF from the Javadoc using the Doclet available at
  http://www.michael-a-fuchs.de/projects/dbdoclet/en/index.html
* Include a few examples in the release.
