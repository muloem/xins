$Id$

This file lists the planned changes for XINS.


______________________________________________________________________________
XINS PROTOCOL AND SPECIFICATION FORMAT

* Support API inheritance.
* Define regular expression for input parameter names.
* Allow the following type of constraint to be specified in a function
  specification file: "if input parameter A is set, then input parameter B
  must also be set."
* Allow freezing of api.xml files. Support 'freeze' attribute in DTD and
  copy behaviour from behaviour for frozen .fnc files.

______________________________________________________________________________
XINS/JAVA SERVER FRAMEWORK

* Change implementation of meta-functions from one method per meta-function to
  one class per meta-function.
* Include the timezone in every message that contains a time?
  --> No, if this information is required it should be printed by Log4J. In
      general all timestamps should be printed using Log4J.
* A new maximum call duration (for a specific function) could be logged.
* CallContext.getCallResult() should either be removed or it should return
  'this'.
* Check state transitions in APIServlet class.
* Set state in API class using private setState(State) method.
* Check state transitions in API class.
* Per State in the APIServlet and API classes define what a valid next state
  is. Change the setState(State) methods to check this.
* Support returning of call ID in function output, as an output parameter
  named '_callID'.
* If an invalid value is passed for an input parameter of type _properties,
  the InternalError result code is returned instead of an InvalidParameters.
* Generated Javadoc should include package-private and private members.
* Log an INFO message for each unused runtime property.
  --> After XINS 1.0, perhaps in 1.1.
* Implement a function called _DumpStatistics that writes the statistics in a
  comma separated line in a text file.
  --> After XINS 1.0, perhaps in 1.1.
* Stop runtime configuration file watch thread when the servlet is disposed.
  --> After XINS 1.0, perhaps in 1.1.
* Log that the runtime properties file is opened at startup (DEBUG level).
  --> Before XINS 1.0.
* When the runtime properties file is marked as -r (not readable) at startup,
  an error will be logged (3001). After that, the file watch thread is
  started. However, when the permissions of the file are changed so that the
  file is now marked +r (readable), the change is not noticed, since the
  modification date does not change. The framework should notice this and
  reinitialize.
  --> This is considered a bug. It should preferrably be fixed before XINS
      1.0. If it is not, then it should be listed in a public place, as a
      known issue.
* Improve the performance of the parsing of the query string by using a custom
  method to do this. Return an HTTP error code if the query string is invalid,
  for example if it contains duplicate parameter names.
  --> Can be done after XINS 1.0. Unit tests should be written before
      development is started. This is a stand-alone task that can be done by
      anyone.
* Log 1514/1515 for meta-functions.
  --> To be investigated. This is considered a bug. If this is not resolved
      yet, then it should be listed in a public place as a known issue.

______________________________________________________________________________
XINS/JAVA CLIENT FRAMEWORK

* Improve fail-over. In a lot of situations, fail-over should not be
  attempted.
  --> Exact behaviour should be defined by Ernst de Haan. Then this should be
      a fairly simple exercise.
* Support non-200 HTTP return codes.
* Add method getRemoteSettings() to class AbstractCAPI. Functionality: Calls
  _GetSettings and converts the result to a RemoteSettings object with build
  properties, runtime properties and system properties.
  --> This may not be such a good idea.
* Add multi-call functionality to CallTargetGroup.
  --> This should be given some more thought.
* Add class MultiCallResult that maps ActualFunctionCaller instances to a
  result. The result is either a CallException or a CallResult.
  --> This should be given some more thought.
* Create subclass of UnsuccessfulCallException for the _InvalidRequest error
  code.
  --> This should be given some more thought.
* Send "_function=<name>" instead of "function=<name>" as soon as all existing
  backends support this (in class XINSServiceCaller).
* Make sure that the XINSServiceCaller properly supports HTTP result codes
  other than 200. Document the behaviour. Redirects should probably not be
  followed, but this has to be determined. Perhaps a configuration setting
  should be introduced to control the behaviour.
* Use an IndexedMap in class XINSServiceCaller, for improved iteration
  performance.
  --> To be investigated. Probably best to do this after XINS 1.0.
* Throw an InvalidKeyException in class XINSServiceCaller, when and where
  appropriate.
  --> To be investigated.
* Add the possibility to link CAPI to a local WAR file. The invocation of the
  method is then local instead of a remote call via HTTP.

______________________________________________________________________________
XINS/JAVA COMMON LIBRARY

* Change the service caller framework to distinguish between connection and
  socket time-outs.
  --> This should preferrably be done before XINS 1.0.
* Improve description of class Manageable. It still refers to the term
  'lifespan manager'.
  --> This should be fixed ASAP.
* Change Type class to add a 'version' property.
  --> This should be given some more thought.
* Change ExpiryFolder to allow retrieval of slot info.
* Add functionality to allow the retrieval of property names from a
  PropertyReader for which get(String) has not been called.
* Create an implementation of interface IndexedMap.

______________________________________________________________________________
LOGDOC

* Add the French translation in src/logdoc/translation-bundle-fr_FR.xml.
* Support element in log.xml to reserve an ID that was previously used. For
  example <reserve id="1502" />

______________________________________________________________________________
GENERATED SPECIFICATION DOCUMENTATION

* Check all names using regular expressions.
* Have a page per environment with links to _GetVersion, _GetStatistics,
  _GetSettings, etc. Let the link on the page for an API link to that page.
* Link to CVSweb or ViewCVS.
* On specification documentation page for a result code: Have a list of links
  to the functions that specify they may return the result code.
* Use an image to indicate the inheritance relationship between one type and
  another.
* Generate Docbook from the specifications.
* Have an item for a result code page in the header.
* Per type have a list of input parameters, output parameters and data element
  attributes that are defined as of this type.

______________________________________________________________________________
GENERATED TEST FORMS

* None

______________________________________________________________________________
GENERATED TYPE CLASSES

* None

______________________________________________________________________________
GENERATED XINS/JAVA SERVER FUNDAMENT CLASSES

* None

______________________________________________________________________________
GENERATED XINS/JAVA CLIENT CAPI CLASSES

* Add check to test whether required attributes in returned elements are
  actually available.

______________________________________________________________________________
MISCELLANEOUS

* The standard result codes should be documented online.
* Finish SourceForgeUpload task to smoothen the release process by performing
  the following actions:
  - create a release on the SourceForge site
  - add the corresponding file
  - set the type of the file to '.gz'
  - let SourceForge send a release notification e-mail
* Add date to CHANGES file when a release is created. A (small) custom Ant
  task would need to be developed for this.
* Support the Freshmeat.net XML-RPC interface for notification of new
  releases.
* Generate DocBook and PDF from the Javadoc using the Doclet available at
  http://www.michael-a-fuchs.de/projects/dbdoclet/en/index.html
