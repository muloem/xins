List of things to be done for XINS release 1.0.0.
$Id$


Version control:
[ ] File TODO should be removed before the branch is created.
[ ] File TODO.RELEASE_1_0 should be removed before the branch is created.
[ ] Create branch BRANCH_1_0_x. Make sure empty directories are not included.
[ ] Set @since tags on all classes to: XINS 1.0.0.
[ ] CHANGES file should be moved to xins-docs.
[ ] First tag on the BRANCH_1_0_x branch should be RELEASE_1_0_0_RC1

Improve service framework in org.xins.common.service:
[x] Create tag (IMPLEMENTING_NEW_SERVICE_FRAMEWORK_20040920_1129)
[x] Add CallException class (abstract)
[x] Remove CallFailedException class
[x] Add GenericCallException (generic, abstract, extends CallException)
[x] Add ConnectionCallException (abstract, extends GenericCallException)
[x] Add ConnectionRefusedCallException (final, extends ConnectionCallException)
[x] Add ConnectionTimeOutCallException (final, extends ConnectionCallException)
[x] Add SocketTimeOutCallException (final, extends GenericCallException)
[x] Add TotalTimeOutCallException (final, extends GenericCallException)
[x] Add UnexpectedExceptionCallException (final, extends GenericCallException)
[x] Add IOCallException (final, extends GenericCallException)
[x] Change ServiceCaller to use CallRequest and CallException
[x] Make CallResult class abstract
[x] Remove getResult() from CallResult class
[x] Add createCallResult method in class ServiceCaller
[x] Combine a number of CallExceptions in a CallExceptionList object
[x] Make the CallResult constructor accept a CallExceptionList
[ ] Document when fail-over will be applied and when not

Adapt HTTP service caller to build upon improved service framework:
[x] Add HTTPCallException class (abstract, extends CallException)
[x] Add HTTPCallRequest class (final, extends CallRequest)
[x] Add StatusCodeHTTPCallException (extends HTTPCallException)
[x] Add HTTPStatusCodeVerifier interface
[x] Store HTTPStatusCodeVerifier object in HTTPCallRequest
[x] Call HTTPStatusCodeVerifier from HTTPServiceCaller
[x] Throw SocketTimeOutCallException when appropriate
[x] Throw ConnectionRefusedCallException when appropriate
[x] Throw ConnectionTimeOutCallException when appropriate
[x] Throw TotalTimeOutCallException when appropriate
[x] Throw UnexpectedExceptionCallException when appropriate
[x] Throw IOCallException when appropriate
[x] Throw StatusCodeHTTPCallException when appropriate
[x] Add call(TargetDescriptor,HTTPCallRequest) to HTTPServiceCaller
[x] Add getResult() to HTTPServiceCaller.Result
[x] Remove getErrorCode() in class HTTPServiceCaller.Result
[x] Make inner class HTTPServiceCaller.Result static
[x] Rename HTTPServiceCaller.Result to HTTPCallResult
[x] Describe HTTPCallRequest properly in describe() (from _asString).
[x] Lazily initialize HTTPCallRequest description, if appropriate
[x] Change class HTTPServiceCaller.Method to HTTPMethod
[x] Change example in HTTPServiceCaller to match new interface
[ ] Log all events properly
[x] Move classes in org.xins.common.service.http to org.xins.common.http.
[x] Store information from CallResult in HTTPCallResult
[x] Make HTTPCallResult extend CallResult (research if this is wise)
[x] Implement createCallResult method in class HTTPServiceCaller
[ ] Document what kind of exception to expect in what case
[x] Document when fail-over will be applied and when not
[ ] Do not access (private) HTTPCallResult.Data fields directly
[ ] Externalize inner class HTTPCallResult.Data to interface HTTPCallResultData
[ ] Make HTTPCallResultParser.Handler implement HTTPCallResultData
[ ] Return HTTPCallResultData from HTTPCallResultParser
[ ] Make call(HTTPCallRequest,TargetDescriptor) static  [LOW PRIO]
[ ] Support failOverAllowed property in HTTPCallRequest

Adapt XINS/Java Client Framework to build upon improved service framework:
[x] Rename CallException to XINSCallException
[x] Rename CallRequest to XINSCallRequest
[x] Let XINSCallException extend CallException
[x] Let XINSCallRequest extend CallRequest
[x] Use ConnectionCallException instead of ConnectionException
[x] Remove ConnectionException class
[x] Use ConnectionRefusedCallException instead of ConnectionRefusedException
[x] Remove ConnectionRefusedException class
[x] Use ConnectionTimeOutCallException instead of ConnectionTimeOutException
[x] Remove ConnectionTimeOutException class
[x] Use SocketTimeOutCallException instead of SocketTimeOutException
[x] Remove SocketTimeOutException class
[x] Use StatusCodeHTTPCallException instead of UnexpectedHTTPStatusCodeException
[x] Remove UnexpectedHTTPStatusCodeException class
[x] Make XINSServiceCaller throw appropriate CallException subclasses
[x] Use HTTPServiceCaller for the actual call
[x] Rename Result to XINSCallResult
[x] Rename ResultParser to XINSCallResultParser
[x] Rename UnacceptableCallResultException to UnacceptableResultXINSCallException
[x] Make UnacceptableResultXINSCallException extend XINSCallException
[x] Rename UnsuccessfulCallException to UnsuccessfulXINSCallException
[x] Make UnsuccessfulXINSCallException extend XINSCallException
[x] Rename InvalidCallResultException to InvalidResultXINSCallException
[x] Make InvalidResultXINSCallException extend XINSCallException
[x] Correctly determine duration in call(TargetDescriptor,XINSCallRequest)
[x] Describe XINSCallRequest properly in describe() (from _asString).
[x] Lazily initialize XINSCallRequest description, if appropriate
[x] Check the parameters in XINSCallRequest constructor.
[x] Add example in XINSServiceCaller class comments
[ ] Log all events properly
[x] Store information from CallResult in XINSCallResult
[x] Make XINSCallResult extend CallResult
[x] Implement createCallResult method in class XINSServiceCaller
[ ] Document what kind of exception to expect in what case
[x] Document when fail-over will be applied and when not
[x] Do not access (private) XINSCallResult.Data fields directly
[x] Externalize inner class XINSCallResult.Data to interface XINSCallResultData
[x] Make XINSCallResultParser.Handler implement XINSCallResultData
[x] Return XINSCallResultData from XINSCallResultParser
[ ] Make call(XINSCallRequest,TargetDescriptor) static  [LOW PRIO]

Adapt CAPI generation:
[x] Build upon new XINS/Java Client Framework

Improve server framework XINS version logging:
[ ] Log the current XINS version (INFO level)
[ ] Log if the current XINS version is not a production version, i.e. does not match the regex [1-9][0-9]*\.[0-9]+\.[0-9]+ (WARNING level)
[ ] Log the XINS version the API package was built with (INFO level)
[ ] Log if the API package was built with a different XINS major version as the current XINS version (WARNING level)
[ ] Log if the API package was built with a higher XINS version as the current one (WARNING level)

Other:
[ ] Prepare the announcement (text + web sites where it will be posted)
[ ] Extend unit tests.
[ ] Make sure the automated release process works for the 1.x.y releases.

Improved Logdoc for XINS/Java Common Library:
[x] Let Logdoc groups match Java package names
[x] Make parameter names match hungarian notation
[ ] Review Logdoc entry descriptions
[ ] Make Logdoc entry descriptions and translations match
[ ] Review Logdoc translations
[ ] Add groups for missing Java packages
[ ] Review Logdoc entry IDs
[ ] Add missing Logdoc entries
[ ] Remove Dutch translations
