/*
 * $Id$
 *
 * Copyright 2003-2005 Wanadoo Nederland B.V.
 * See the COPYRIGHT file for redistribution and use restrictions.
 */
package org.xins.client;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;

import org.xins.common.MandatoryArgumentChecker;

import org.xins.common.collections.CollectionUtils;

import org.xins.common.constraint.Constraint;

import org.xins.common.types.Type;
import org.xins.common.types.TypeValueException;

/**
 * Base class for generated CAPI function classes.
 *
 * <p><em>This method should not be subclassed manually. It is only intended
 * to be subclassed by classes generated by XINS.</em>
 *
 * @version $Revision$ $Date$
 * @author Ernst de Haan (<a href="mailto:ernst.dehaan@nl.wanadoo.com">ernst.dehaan@nl.wanadoo.com</a>)
 *
 * @since XINS 1.2.0
 */
public abstract class AbstractCAPIFunction
extends Object {

   //-------------------------------------------------------------------------
   // Class fields
   //-------------------------------------------------------------------------

   /**
    * Fully-qualified name of this class.
    */
   private static final String CLASSNAME = AbstractCAPIFunction.class.getName();


   //-------------------------------------------------------------------------
   // Class functions
   //-------------------------------------------------------------------------

   //-------------------------------------------------------------------------
   // Constructors
   //-------------------------------------------------------------------------

   /**
    * Creates a new <code>AbstractCAPIFunction</code> object.
    *
    * @param name
    *    the name of the represented function, cannot be <code>null</code>.
    *
    * @param inputConstraints
    *    the input constraints associated with this function, can be
    *    <code>null</code> if there are none.
    *
    * @param outputConstraints
    *    the output constraints associated with this function, can be
    *    <code>null</code> if there are none.
    *
    * @throws IllegalArgumentException
    *    if <code>name                          == null
    *          || inputConstraints.length       == 0
    *          || inputConstraints[<em>i</em>]  == null
    *          || outputConstraints.length      == 0
    *          || outputConstraints[<em>i</em>] == null</code>
    *    or if <code>inputConstraints</code> constains any duplicates
    *    or if <code>outputConstraints</code> constains any duplicates.
    *
    */
   protected AbstractCAPIFunction(String       name,
                                  Constraint[] inputConstraints,
                                  Constraint[] outputConstraints)
   throws IllegalArgumentException {

      // Check preconditions
      MandatoryArgumentChecker.check("name", name);

      // Store function name
      _name = name;

      // Check and store input constraints
      if (inputConstraints == null || inputConstraints.length == 0) {
         _inputConstraints = Collections.EMPTY_LIST;
      } else {
         _inputConstraints = CollectionUtils.list("inputConstraints",
                                                  inputConstraints,
                                                  1);
      }

      // Check and store output constraints
      if (outputConstraints == null || outputConstraints.length == 0) {
         _outputConstraints = Collections.EMPTY_LIST;
      } else {
         _outputConstraints = CollectionUtils.list("outputConstraints",
                                                   outputConstraints,
                                                   1);
      }
   }


   //-------------------------------------------------------------------------
   // Fields
   //-------------------------------------------------------------------------

   /**
    * The name of the represented function. Never <code>null</code>.
    */
   private final String _name;

   /**
    * The list of all input constraints associated with the function. Never
    * <code>null</code>.
    */
   private final List _inputConstraints;

   /**
    * The list of all output constraints associated with the function. Never
    * <code>null</code>.
    */
   private final List _outputConstraints;


   //-------------------------------------------------------------------------
   // Methods
   //-------------------------------------------------------------------------

   /**
    * Returns the name of the represented function.
    *
    * @return
    *    the name of the function, never <code>null</code>.
    */
   public String getName() {
      return _name;
   }

   /**
    * Returns the list of input constraints for this function.
    *
    * @return
    *    the list of associated input constraints, never <code>null</code>.
    */
   List getInputConstraints() {

      // XXX: The returned list may be modifiable

      return _inputConstraints;
   }

   /**
    * Returns the list of output constraints for this function.
    *
    * @return
    *    the list of associated output constraints, never <code>null</code>.
    */
   List getOutputConstraints() {

      // XXX: The returned list may be modifiable

      return _outputConstraints;
   }
}
