/*
 * $Id$
 *
 * Copyright 2003-2005 Wanadoo Nederland B.V.
 * See the COPYRIGHT file for redistribution and use restrictions.
 */
package org.xins.client;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.xins.common.MandatoryArgumentChecker;
import org.xins.common.Utils;

import org.xins.common.collections.CollectionUtils;

import org.xins.common.constraint.Constraint;
import org.xins.common.constraint.ConstraintViolation;

import org.xins.common.types.Type;
import org.xins.common.types.TypeValueException;

/**
 * Base class for generated CAPI function request classes.
 *
 * <p>This class should not be subclassed manually. It is only intended to be
 * subclassed by classes generated by XINS.
 *
 * @version $Revision$ $Date$
 * @author Ernst de Haan (<a href="mailto:ernst.dehaan@nl.wanadoo.com">ernst.dehaan@nl.wanadoo.com</a>)
 *
 * @since XINS 1.2.0
 */
public abstract class AbstractCAPICallRequest
extends Object {

   //-------------------------------------------------------------------------
   // Class fields
   //-------------------------------------------------------------------------

   /**
    * Fully-qualified name of this class.
    */
   private static final String CLASSNAME = AbstractCAPICallRequest.class.getName();


   //-------------------------------------------------------------------------
   // Class functions
   //-------------------------------------------------------------------------

   //-------------------------------------------------------------------------
   // Constructors
   //-------------------------------------------------------------------------

   /**
    * Creates a new <code>AbstractCAPICallRequest</code> object.
    *
    * @param function
    *    representation of the function to call, cannot be <code>null</code>.
    *
    * @throws IllegalArgumentException
    *    if <code>function == null</code>.
    */
   protected AbstractCAPICallRequest(AbstractCAPIFunction function)
   throws IllegalArgumentException {
      _function          = function;
      _constraintContext = new ConstraintContext();
      _parameterTypes    = new HashMap();
   }


   //-------------------------------------------------------------------------
   // Fields
   //-------------------------------------------------------------------------

   /**
    * Representation of the function to call. Never <code>null</code>.
    */
   private final AbstractCAPIFunction _function;

   /**
    * Constraint context. Never <code>null</code>.
    */
   private final ConstraintContext _constraintContext;

   /**
    * The call configuration. Initially <code>null</code>.
    */
   private XINSCallConfig _callConfig;

   /**
    * Mapping from parameter names to their associated types. This field is
    * initialized by the constructor and never <code>null</code>.
    */
   private final HashMap _parameterTypes;

   /**
    * Mapping from parameter names to either their associated string values or
    * to an exception if the conversion to a string failed. This field is
    * lazily initialized and initially <code>null</code>.
    */
   private HashMap _parameterValues;


   //-------------------------------------------------------------------------
   // Methods
   //-------------------------------------------------------------------------

   /**
    * Sets the type for the specified parameter.
    *
    * @param name
    *    the name of the parameter to set the type for, cannot be
    *    <code>null</code>.
    *
    * @param type
    *    the type of the parameter, cannot be <code>null</code>.
    *
    * @throws IllegalArgumentException
    *    if <code>name == null || type == null</code>.
    */
   protected final void parameterType(String name, Type type)
   throws IllegalArgumentException {

      // Check preconditions
      MandatoryArgumentChecker.check("name",  name, "type", type);

      // TODO: Make sure there is no type defined for the param yet

      // Store the association
      _parameterTypes.put(name, type);
   }

   /**
    * Sets the specified parameter to the specified value.
    *
    * @param name
    *    the name of the parameter to set, cannot be <code>null</code>.
    *
    * @param value
    *    the value of the parameter, can be <code>null</code>.
    *
    * @throws IllegalArgumentException
    *    if <code>name == null</code>.
    */
   protected final void parameterValue(String name, Object value)
   throws IllegalArgumentException {

      // Check preconditions
      MandatoryArgumentChecker.check("name",  name);

      // If there is no value, then remove the entry from the map
      if (value == null) {
         if (_parameterValues != null) {
            _parameterValues.remove(name);
         }

      // Otherwise just store
      } else {

         if (_parameterValues == null) {
            _parameterValues = new HashMap();
         }
         _parameterValues.put(name, value);
      }
   }

   /**
    * Returns the <code>AbstractCAPIFunction</code> instance representing the
    * function to call.
    *
    * @return
    *    the function to call, never <code>null</code>.
    */
   final AbstractCAPIFunction function() {
      return _function;
   }

   /**
    * Returns the parameter type map. This is a mapping from parameter names
    * to their associated types.
    *
    * @return
    *    the parameter type map, never <code>null</code>.
    */
   final Map parameterTypeMap() {
      return _parameterTypes;
   }

   /**
    * Returns the parameter value map. This is a mapping from parameter names
    * to their associated values.
    *
    * @return
    *    the parameter value map, never <code>null</code>.
    */
   final Map parameterValueMap() {
      if (_parameterValues == null) {
         return Collections.EMPTY_MAP;
      } else {
         return _parameterValues;
      }
   }

   /**
    * Returns an appropriate <code>XINSCallRequest</code> object.
    *
    * @return
    *    a {@link XINSCallRequest}, never <code>null</code>.
    */
   final XINSCallRequest xinsCallRequest() {

      final String THIS_METHOD = "xinsCallRequest()";

      // Construct a XINSCallRequest object
      XINSCallRequest request = new XINSCallRequest(_function.getName());

      // Set all parameters on the request, if any
      if (_parameterValues != null && _parameterValues.size() > 0) {

         // Loop over all parameters in the map containing the types
         Iterator iterator = _parameterTypes.keySet().iterator();
         while (iterator.hasNext()) {

            // Determine parameter name, type and value
            String name  = (String) iterator.next();
            Type   type  = (Type)   _parameterTypes.get(name);
            Object value = _parameterValues.get(name);

            if (value != null) {
               // Convert the value to a string
               String valueString;
               try {
                  valueString = type.toString(value);
               } catch (TypeValueException exception) {
                  throw Utils.logProgrammingError(
                     CLASSNAME,
                     THIS_METHOD,
                     CLASSNAME,
                     THIS_METHOD,
                     null,
                     exception);
               }

               // Set the parameter on the request
               request.setParameter(name, valueString);
            }
         }
      }

      return request;
   }

   /**
    * Assigns the specified call configuration to this request.
    *
    * @param config
    *    the call configuration to apply when executing this request, or
    *    <code>null</code> if no specific call configuration should be
    *    associated with this request.
    */
   public final void configure(XINSCallConfig config) {
      _callConfig = config;
   }

   /**
    * Retrieves the call configuration currently associated with this request.
    *
    * @return
    *    the call configuration currently associated with this request, which
    *    will be applied when executing this request, or <code>null</code> if
    *    no specific call configuration is associated with this request.
    */
   public final XINSCallConfig configuration() {
      return _callConfig;
   }

   /**
    * Validates whether this request is considered acceptable. If any
    * constraints are violated, then an {@link UnacceptableRequestException}
    * is thrown.
    *
    * <p>This method is called when the request is executed, but it may also
    * be called in advance.
    *
    * @throws UnacceptableRequestException
    *    if this request is considered unacceptable.
    */
   public final void validate()
   throws UnacceptableRequestException {

      // Retrieve all input constrainst
      List constraints = _function.getInputConstraints();

      // Check constraints and build list of violations (lazily initialized)
      ArrayList violations = null;
      int constraintCount = constraints.size();
      for (int i = 0; i < constraintCount; i++) {

         // Get the constraint from the collection
         Constraint constraint = (Constraint) constraints.get(i);

         // Validate it
         ConstraintViolation violation = constraint.check(_constraintContext);

         if (violation != null) {

            // Lazily initialize the list of violations
            if (violations == null) {
               violations = new ArrayList(constraintCount - i);
            }

            violations.add(violation);
         }
      }

      // If there is at least one violation, then fail
      if (violations != null) {
         throw new UnacceptableRequestException(this, violations);
      }
   }


   //-------------------------------------------------------------------------
   // Inner classes
   //-------------------------------------------------------------------------

   /**
    * Implementation of a <code>ConstraintContext</code> based on an
    * <code>AbstractCAPICallRequest</code>.
    *
    * @version $Revision$ $Date$
    * @author Ernst de Haan (<a href="mailto:ernst.dehaan@nl.wanadoo.com">ernst.dehaan@nl.wanadoo.com</a>)
    */
   private class ConstraintContext
   extends Object
   implements org.xins.common.constraint.ConstraintContext {

      //----------------------------------------------------------------------
      // Constructors
      //----------------------------------------------------------------------

      /**
       * Constructs a new <code>ConstraintContext</code> instance.
       */
      private ConstraintContext() {
         // empty
      }


      //----------------------------------------------------------------------
      // Fields
      //----------------------------------------------------------------------

      //----------------------------------------------------------------------
      // Methods
      //----------------------------------------------------------------------

      /**
       * Retrieves the value of the specified parameter.
       *
       * @param name
       *    the name of the parameter, cannot be <code>null</code>.
       *
       * @return
       *    the value of the parameter, possibly be <code>null</code>.
       *
       * @throws IllegalArgumentException
       *    if <code>parameterName == null</code>.
       */
      public Object getParameter(String name)
      throws IllegalArgumentException {
         if (_parameterValues == null) {
            return null;
         } else {
            return _parameterValues.get(name);
         }
      }
   }
}
