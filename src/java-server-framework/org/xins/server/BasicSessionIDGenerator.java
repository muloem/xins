/*
 * $Id$
 */
package org.xins.server;

import org.xins.util.LongUtils;

/**
 * Basic implementation of a session ID generator. Session IDs generated by
 * this class are constructed as follows:
 *
 * <ul>
 *    <li>Startup timestamp (exactly 8 hex digits)
 *    <li>Colon (<code>':'</code>)
 *    <li>Counter (exactly 8 hex digits)
 * </ul>
 *
 * @version $Revision$ $Date$
 * @author Ernst de Haan (<a href="mailto:znerd@FreeBSD.org">znerd@FreeBSD.org</a>)
 *
 * @since XINS 0.57
 */
public final class BasicSessionIDGenerator
extends SessionIDGenerator {

   //-------------------------------------------------------------------------
   // Class fields
   //-------------------------------------------------------------------------

   //-------------------------------------------------------------------------
   // Class functions
   //-------------------------------------------------------------------------

   //-------------------------------------------------------------------------
   // Constructors
   //-------------------------------------------------------------------------

   /**
    * Constructs a new <code>BasicSessionIDGenerator</code> for the
    * specified API.
    *
    * @param api
    *    the api for which to create this session ID generator, cannot be
    *    <code>null</code>.
    *
    * @throws IllegalArgumentException
    *    if <code>api == null</code>.
    */
   public BasicSessionIDGenerator(API api) {
      super(api);

      _lock = new Object();
      _startupTimestamp = LongUtils.toHexString(api.getStartupTimestamp());
   }


   //-------------------------------------------------------------------------
   // Fields
   //-------------------------------------------------------------------------

   /**
    * Counter for the session IDs. Will be used to generate the session ID.
    */
   private long _counter;

   /**
    * Object that will be locked on before the value of <code>_counter</code>
    * is get and set.
    */
   private Object _lock;

   /**
    * Cached startup timestamp, converted to a 16-digit hex string. See
    * {@link API#getStartupTimestamp()}.
    */
   private final String _startupTimestamp;


   //-------------------------------------------------------------------------
   // Methods
   //-------------------------------------------------------------------------

   protected String generateSessionIDImpl() {
      // TODO: Improve performance ?
      long num;
      synchronized (_lock) {
         num = _counter++;
      }
      return _startupTimestamp + ':' + LongUtils.toHexString(num);
   }
}
