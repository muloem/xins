<?xml version="1.0" encoding="US-ASCII"?>
<!--
 $Id$

 Specification of the "_xins-std" calling convention.
-->

<cc-spec rcsversion="$Revision$" rcsdate="$Date$">
	<terminology>
		<term name="client">entity that wishes to invoke a function that resides at a server</term>
		<term name="custom parameter">parameter that is not reserved and can be used freely</term>
		<term name="context identifier">identification of the current diagnostic context, typically an identifier that is unique per call to the front-end system</term>
		<term name="request">communication from a client to a server, intended to trigger a function invocation</term>
		<term name="reserved parameter">parameter that is only to be used as explicitly specified by this specification</term>
		<term name="response">communication from a server to a client, in response to a request</term>
		<term name="server">entity that hosts a number of functions that can be called by certain clients</term>
	</terminology>
	<requirements>
		<group side="client" prefix="CRQ">
			<title>Request construction</title>
			<description>These requirements specify how a client must construct a request.</description>
			<rule>A request <keyword term="MUST"/> be a valid HTTP 1.1 request.</rule>
			<rule>A request <keyword term="MUST"/> use the HTTP GET, POST or HEAD method.</rule>
			<rule>All input parameter names <keyword term="MUST" /> contain only ASCII letters ('A' to 'Z' and 'a' to 'z'), digits ('0' to '9') and underscore characters ('_').</rule>
			<rule>Each reserved input parameter <keyword term="MUST" /> start with an underscore, followed by a letter.</rule>
			<rule>Each custom input parameter <keyword term="MUST" /> start with a letter.</rule>
			<rule>All input parameters that are set to a non-empty value <keyword term="MUST"/> be specified in HTTP parameters with the same name and value.</rule>
			<rule>The names of all input parameters that are set to an empty value <keyword term="MUST"/> be specified in an HTTP parameter named <code>_empty</code>, separated by commas.</rule>
			<rule>A request <keyword term="MUST"/> set the parameter <code>_function</code> to the name of the function to be invoked.</rule>
			<rule>A request <keyword term="SHOULD"/> set the parameter <code>_convention</code> to the value <code>_xins-std</code>.</rule>
			<rule>A request <keyword term="MUST NOT"/> set the parameter <code>_convention</code> to a value other than <code>_xins-std</code>.</rule>
			<rule>A request <keyword term="SHOULD NOT"/> contain any input parameters that are unset.</rule>
		</group>
		<group side="client" prefix="CRS">
			<title>Response interpretation</title>
			<description>These requirements specify how a client must interpret a response, returned in response to a valid request.</description>
			<rule>A response that is not a valid HTTP 1.1 request <keyword term="SHOULD"/> be considered erroneous.</rule>
		</group>
		<group side="server" prefix="SRQ">
			<title>Request interpretation</title>
			<description>These requirements specify how a server must interpret an incoming request.</description>
			<rule>A request <keyword term="MUST NOT"/> trigger a function invocation if it is considered erroneous.</rule>
			<rule>A request that is not a valid HTTP 1.1 request <keyword term="SHOULD"/> be considered erroneous.</rule>
			<rule>A request that contains conflicting values for an input parameter <keyword term="MUST"/> be considered erroneous.</rule>
			<rule>A request that is considered unauthorized <keyword term="MUST"/> be considered erroneous.</rule>
		</group>
		<group side="server" prefix="SRS">
			<title>Response construction</title>
			<description>These requirements specify how a server must construct a response.</description>
			<rule>An erroneous request <keyword term="MUST"/> return an HTTP status code that indicates an error.</rule>
			<rule>A request that is not erroneous <keyword term="MUST"/> return an HTTP status code that indicates an error.</rule>
			<rule>A response <keyword term="MUST"/> be a valid HTTP 1.1 response.</rule>
		</group>
	</requirements>
</cc-spec>
